
020625_SDtest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005030  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080051b8  080051b8  000061b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e8  080051e8  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051e8  080051e8  000061e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051f0  080051f0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f0  080051f0  000061f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051f4  080051f4  000061f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080051f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          000003dc  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  200003e8  200003e8  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c620  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000241a  00000000  00000000  0001365c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  00015a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000897  00000000  00000000  000165f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022133  00000000  00000000  00016e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f7f1  00000000  00000000  00038fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c70b5  00000000  00000000  000487ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010f860  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002dc8  00000000  00000000  0010f8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0011266c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080051a0 	.word	0x080051a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080051a0 	.word	0x080051a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fb2c 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f84c 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f90e 	bl	8000720 <MX_GPIO_Init>
  MX_DMA_Init();
 8000504:	f000 f8e4 	bl	80006d0 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000508:	f000 f8ae 	bl	8000668 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800050c:	f003 ff02 	bl	8004314 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  // Try to mount SD card

    res = f_mount(&fs, "", 1);
 8000510:	2201      	movs	r2, #1
 8000512:	491c      	ldr	r1, [pc, #112]	@ (8000584 <main+0x90>)
 8000514:	481c      	ldr	r0, [pc, #112]	@ (8000588 <main+0x94>)
 8000516:	f004 fd75 	bl	8005004 <f_mount>
 800051a:	4603      	mov	r3, r0
 800051c:	461a      	mov	r2, r3
 800051e:	4b1b      	ldr	r3, [pc, #108]	@ (800058c <main+0x98>)
 8000520:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // SET is LOW for on board LEDs
 8000522:	2201      	movs	r2, #1
 8000524:	2140      	movs	r1, #64	@ 0x40
 8000526:	481a      	ldr	r0, [pc, #104]	@ (8000590 <main+0x9c>)
 8000528:	f001 f9f6 	bl	8001918 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2180      	movs	r1, #128	@ 0x80
 8000530:	4817      	ldr	r0, [pc, #92]	@ (8000590 <main+0x9c>)
 8000532:	f001 f9f1 	bl	8001918 <HAL_GPIO_WritePin>

    if (res != FR_OK) //this might be delaying program. Hardcoded values not working
 8000536:	4b15      	ldr	r3, [pc, #84]	@ (800058c <main+0x98>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d00a      	beq.n	8000554 <main+0x60>
//    		printf("SD card failed to mount");
//    	      HAL_GPIO_TogglePin(LED_SD_init_GPIO_Port, LED_SD_init_Pin);
//    	      HAL_Delay(1000);
//    	}
//    	printf("SD card failed to mount");
    	HAL_GPIO_WritePin(LED_SD_init_GPIO_Port, LED_SD_init_Pin, GPIO_PIN_RESET); // reset sets to high
 800053e:	2200      	movs	r2, #0
 8000540:	2180      	movs	r1, #128	@ 0x80
 8000542:	4813      	ldr	r0, [pc, #76]	@ (8000590 <main+0x9c>)
 8000544:	f001 f9e8 	bl	8001918 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET); // PC4 - red LED - didn't work
 8000548:	2201      	movs	r2, #1
 800054a:	2110      	movs	r1, #16
 800054c:	4811      	ldr	r0, [pc, #68]	@ (8000594 <main+0xa0>)
 800054e:	f001 f9e3 	bl	8001918 <HAL_GPIO_WritePin>
 8000552:	e009      	b.n	8000568 <main+0x74>
//		  // SD card mount success – blink every 5sec (PA7 = 1)
//		  HAL_GPIO_TogglePin(LED_SD_init_GPIO_Port, LED_SD_init_Pin);
//		  HAL_Delay(100);
//    	}
//    	printf("SD card sucksexfully initialized");
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // RESET is HIGH (but only for LEDs on the board)
 8000554:	2200      	movs	r2, #0
 8000556:	2140      	movs	r1, #64	@ 0x40
 8000558:	480d      	ldr	r0, [pc, #52]	@ (8000590 <main+0x9c>)
 800055a:	f001 f9dd 	bl	8001918 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_2_GPIO_Port,LED_2_Pin,GPIO_PIN_SET); // PC5 - green LED - worked
 800055e:	2201      	movs	r2, #1
 8000560:	2120      	movs	r1, #32
 8000562:	480c      	ldr	r0, [pc, #48]	@ (8000594 <main+0xa0>)
 8000564:	f001 f9d8 	bl	8001918 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)

  {
	  if (res == FR_OK){
 8000568:	4b08      	ldr	r3, [pc, #32]	@ (800058c <main+0x98>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d1fb      	bne.n	8000568 <main+0x74>
		  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000570:	2120      	movs	r1, #32
 8000572:	4808      	ldr	r0, [pc, #32]	@ (8000594 <main+0xa0>)
 8000574:	f001 f9e9 	bl	800194a <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000578:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800057c:	f000 fb5c 	bl	8000c38 <HAL_Delay>
	  if (res == FR_OK){
 8000580:	e7f2      	b.n	8000568 <main+0x74>
 8000582:	bf00      	nop
 8000584:	080051b8 	.word	0x080051b8
 8000588:	2000016c 	.word	0x2000016c
 800058c:	2000039c 	.word	0x2000039c
 8000590:	40020000 	.word	0x40020000
 8000594:	40020800 	.word	0x40020800

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	@ 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	@ 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 fdcd 	bl	8005146 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	4a26      	ldr	r2, [pc, #152]	@ (8000660 <SystemClock_Config+0xc8>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80005cc:	4b24      	ldr	r3, [pc, #144]	@ (8000660 <SystemClock_Config+0xc8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a20      	ldr	r2, [pc, #128]	@ (8000664 <SystemClock_Config+0xcc>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <SystemClock_Config+0xcc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000608:	2310      	movs	r3, #16
 800060a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800060c:	23c0      	movs	r3, #192	@ 0xc0
 800060e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f001 f9af 	bl	8001980 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000628:	f000 f8ec 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fc12 	bl	8001e70 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000652:	f000 f8d7 	bl	8000804 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	@ 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800066c:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <MX_SDIO_SD_Init+0x60>)
 800066e:	4a17      	ldr	r2, [pc, #92]	@ (80006cc <MX_SDIO_SD_Init+0x64>)
 8000670:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <MX_SDIO_SD_Init+0x60>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000678:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <MX_SDIO_SD_Init+0x60>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800067e:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <MX_SDIO_SD_Init+0x60>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000684:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <MX_SDIO_SD_Init+0x60>)
 8000686:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800068a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800068c:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_SDIO_SD_Init+0x60>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <MX_SDIO_SD_Init+0x60>)
 8000694:	2202      	movs	r2, #2
 8000696:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_SDIO_SD_Init+0x60>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800069e:	480a      	ldr	r0, [pc, #40]	@ (80006c8 <MX_SDIO_SD_Init+0x60>)
 80006a0:	f001 fd92 	bl	80021c8 <HAL_SD_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_SDIO_SD_Init+0x46>

  {

	Error_Handler();
 80006aa:	f000 f8ab 	bl	8000804 <Error_Handler>
  }

  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80006ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_SDIO_SD_Init+0x60>)
 80006b4:	f002 fb58 	bl	8002d68 <HAL_SD_ConfigWideBusOperation>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_SDIO_SD_Init+0x5a>

  {

    Error_Handler();
 80006be:	f000 f8a1 	bl	8000804 <Error_Handler>
  }
  /* USER CODE END SDIO_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000028 	.word	0x20000028
 80006cc:	40012c00 	.word	0x40012c00

080006d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_DMA_Init+0x4c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a0f      	ldr	r2, [pc, #60]	@ (800071c <MX_DMA_Init+0x4c>)
 80006e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <MX_DMA_Init+0x4c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	203b      	movs	r0, #59	@ 0x3b
 80006f8:	f000 fb9d 	bl	8000e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006fc:	203b      	movs	r0, #59	@ 0x3b
 80006fe:	f000 fbb6 	bl	8000e6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2045      	movs	r0, #69	@ 0x45
 8000708:	f000 fb95 	bl	8000e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800070c:	2045      	movs	r0, #69	@ 0x45
 800070e:	f000 fbae 	bl	8000e6e <HAL_NVIC_EnableIRQ>

}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b2f      	ldr	r3, [pc, #188]	@ (80007f8 <MX_GPIO_Init+0xd8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a2e      	ldr	r2, [pc, #184]	@ (80007f8 <MX_GPIO_Init+0xd8>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b2c      	ldr	r3, [pc, #176]	@ (80007f8 <MX_GPIO_Init+0xd8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <MX_GPIO_Init+0xd8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a27      	ldr	r2, [pc, #156]	@ (80007f8 <MX_GPIO_Init+0xd8>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <MX_GPIO_Init+0xd8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <MX_GPIO_Init+0xd8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a20      	ldr	r2, [pc, #128]	@ (80007f8 <MX_GPIO_Init+0xd8>)
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b1e      	ldr	r3, [pc, #120]	@ (80007f8 <MX_GPIO_Init+0xd8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|LED_SD_init_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	21c0      	movs	r1, #192	@ 0xc0
 800078e:	481b      	ldr	r0, [pc, #108]	@ (80007fc <MX_GPIO_Init+0xdc>)
 8000790:	f001 f8c2 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2130      	movs	r1, #48	@ 0x30
 8000798:	4819      	ldr	r0, [pc, #100]	@ (8000800 <MX_GPIO_Init+0xe0>)
 800079a:	f001 f8bd 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800079e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	4813      	ldr	r0, [pc, #76]	@ (8000800 <MX_GPIO_Init+0xe0>)
 80007b4:	f000 ff14 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 LED_SD_init_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|LED_SD_init_Pin;
 80007b8:	23c0      	movs	r3, #192	@ 0xc0
 80007ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	4619      	mov	r1, r3
 80007ce:	480b      	ldr	r0, [pc, #44]	@ (80007fc <MX_GPIO_Init+0xdc>)
 80007d0:	f000 ff06 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80007d4:	2330      	movs	r3, #48	@ 0x30
 80007d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4619      	mov	r1, r3
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_GPIO_Init+0xe0>)
 80007ec:	f000 fef8 	bl	80015e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007f0:	bf00      	nop
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020800 	.word	0x40020800

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <Error_Handler+0x8>

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b10      	ldr	r3, [pc, #64]	@ (800085c <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081e:	4a0f      	ldr	r2, [pc, #60]	@ (800085c <HAL_MspInit+0x4c>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000824:	6453      	str	r3, [r2, #68]	@ 0x44
 8000826:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	4a08      	ldr	r2, [pc, #32]	@ (800085c <HAL_MspInit+0x4c>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	@ 0x40
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a68      	ldr	r2, [pc, #416]	@ (8000a20 <HAL_SD_MspInit+0x1c0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	f040 80c9 	bne.w	8000a16 <HAL_SD_MspInit+0x1b6>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	4b66      	ldr	r3, [pc, #408]	@ (8000a24 <HAL_SD_MspInit+0x1c4>)
 800088a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088c:	4a65      	ldr	r2, [pc, #404]	@ (8000a24 <HAL_SD_MspInit+0x1c4>)
 800088e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000892:	6453      	str	r3, [r2, #68]	@ 0x44
 8000894:	4b63      	ldr	r3, [pc, #396]	@ (8000a24 <HAL_SD_MspInit+0x1c4>)
 8000896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000898:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	4b5f      	ldr	r3, [pc, #380]	@ (8000a24 <HAL_SD_MspInit+0x1c4>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a8:	4a5e      	ldr	r2, [pc, #376]	@ (8000a24 <HAL_SD_MspInit+0x1c4>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b0:	4b5c      	ldr	r3, [pc, #368]	@ (8000a24 <HAL_SD_MspInit+0x1c4>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	4b58      	ldr	r3, [pc, #352]	@ (8000a24 <HAL_SD_MspInit+0x1c4>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c4:	4a57      	ldr	r2, [pc, #348]	@ (8000a24 <HAL_SD_MspInit+0x1c4>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80008cc:	4b55      	ldr	r3, [pc, #340]	@ (8000a24 <HAL_SD_MspInit+0x1c4>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008d8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008ea:	230c      	movs	r3, #12
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	484c      	ldr	r0, [pc, #304]	@ (8000a28 <HAL_SD_MspInit+0x1c8>)
 80008f6:	f000 fe73 	bl	80015e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008fa:	2304      	movs	r3, #4
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800090a:	230c      	movs	r3, #12
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4845      	ldr	r0, [pc, #276]	@ (8000a2c <HAL_SD_MspInit+0x1cc>)
 8000916:	f000 fe63 	bl	80015e0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800091a:	4b45      	ldr	r3, [pc, #276]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 800091c:	4a45      	ldr	r2, [pc, #276]	@ (8000a34 <HAL_SD_MspInit+0x1d4>)
 800091e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000920:	4b43      	ldr	r3, [pc, #268]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 8000922:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000926:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000928:	4b41      	ldr	r3, [pc, #260]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800092e:	4b40      	ldr	r3, [pc, #256]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000934:	4b3e      	ldr	r3, [pc, #248]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 8000936:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800093a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800093c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 800093e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000942:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000944:	4b3a      	ldr	r3, [pc, #232]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 8000946:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800094a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800094c:	4b38      	ldr	r3, [pc, #224]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 800094e:	2220      	movs	r2, #32
 8000950:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000952:	4b37      	ldr	r3, [pc, #220]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000958:	4b35      	ldr	r3, [pc, #212]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 800095a:	2204      	movs	r2, #4
 800095c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800095e:	4b34      	ldr	r3, [pc, #208]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 8000960:	2203      	movs	r2, #3
 8000962:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000964:	4b32      	ldr	r3, [pc, #200]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 8000966:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800096a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800096c:	4b30      	ldr	r3, [pc, #192]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 800096e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000972:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000974:	482e      	ldr	r0, [pc, #184]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 8000976:	f000 fa95 	bl	8000ea4 <HAL_DMA_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000980:	f7ff ff40 	bl	8000804 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a2a      	ldr	r2, [pc, #168]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 8000988:	641a      	str	r2, [r3, #64]	@ 0x40
 800098a:	4a29      	ldr	r2, [pc, #164]	@ (8000a30 <HAL_SD_MspInit+0x1d0>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000990:	4b29      	ldr	r3, [pc, #164]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 8000992:	4a2a      	ldr	r2, [pc, #168]	@ (8000a3c <HAL_SD_MspInit+0x1dc>)
 8000994:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000996:	4b28      	ldr	r3, [pc, #160]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 8000998:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800099c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800099e:	4b26      	ldr	r3, [pc, #152]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 80009a0:	2240      	movs	r2, #64	@ 0x40
 80009a2:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a4:	4b24      	ldr	r3, [pc, #144]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009aa:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 80009ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b0:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009b2:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 80009b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009b8:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 80009bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009c0:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 80009c4:	2220      	movs	r2, #32
 80009c6:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 80009d0:	2204      	movs	r2, #4
 80009d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009d4:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 80009d6:	2203      	movs	r2, #3
 80009d8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 80009dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80009e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 80009e4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80009e8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80009ea:	4813      	ldr	r0, [pc, #76]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 80009ec:	f000 fa5a 	bl	8000ea4 <HAL_DMA_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80009f6:	f7ff ff05 	bl	8000804 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 80009fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a00:	4a0d      	ldr	r2, [pc, #52]	@ (8000a38 <HAL_SD_MspInit+0x1d8>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2031      	movs	r0, #49	@ 0x31
 8000a0c:	f000 fa13 	bl	8000e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000a10:	2031      	movs	r0, #49	@ 0x31
 8000a12:	f000 fa2c 	bl	8000e6e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	@ 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40012c00 	.word	0x40012c00
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	200000ac 	.word	0x200000ac
 8000a34:	40026458 	.word	0x40026458
 8000a38:	2000010c 	.word	0x2000010c
 8000a3c:	400264a0 	.word	0x400264a0

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <NMI_Handler+0x4>

08000a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <MemManage_Handler+0x4>

08000a58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a96:	f000 f8af 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <SDIO_IRQHandler+0x10>)
 8000aa6:	f001 fdff 	bl	80026a8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000028 	.word	0x20000028

08000ab4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000ab8:	4802      	ldr	r0, [pc, #8]	@ (8000ac4 <DMA2_Stream3_IRQHandler+0x10>)
 8000aba:	f000 fb1b 	bl	80010f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000ac 	.word	0x200000ac

08000ac8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000acc:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <DMA2_Stream6_IRQHandler+0x10>)
 8000ace:	f000 fb11 	bl	80010f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000010c 	.word	0x2000010c

08000adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	@ (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b04:	f7ff ffea 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	@ (8000b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	@ (8000b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f004 fb13 	bl	8005158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b32:	f7ff fcdf 	bl	80004f4 <main>
  bx  lr    
 8000b36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b44:	080051f8 	.word	0x080051f8
  ldr r2, =_sbss
 8000b48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b4c:	200003e8 	.word	0x200003e8

08000b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b58:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <HAL_Init+0x40>)
 8000b5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b64:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <HAL_Init+0x40>)
 8000b6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a07      	ldr	r2, [pc, #28]	@ (8000b94 <HAL_Init+0x40>)
 8000b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f94f 	bl	8000e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b82:	200f      	movs	r0, #15
 8000b84:	f000 f808 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f7ff fe42 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023c00 	.word	0x40023c00

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <HAL_InitTick+0x54>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <HAL_InitTick+0x58>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f967 	bl	8000e8a <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00e      	b.n	8000be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d80a      	bhi.n	8000be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f000 f92f 	bl	8000e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <HAL_InitTick+0x5c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	200003a0 	.word	0x200003a0

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200003a0 	.word	0x200003a0

08000c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff ffee 	bl	8000c20 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c50:	d005      	beq.n	8000c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c52:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <HAL_Delay+0x44>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c5e:	bf00      	nop
 8000c60:	f7ff ffde 	bl	8000c20 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d8f7      	bhi.n	8000c60 <HAL_Delay+0x28>
  {
  }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db0b      	blt.n	8000d0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 021f 	and.w	r2, r3, #31
 8000cfc:	4907      	ldr	r1, [pc, #28]	@ (8000d1c <__NVIC_EnableIRQ+0x38>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	2001      	movs	r0, #1
 8000d06:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	@ (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	@ (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	@ 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	@ 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dec:	d301      	bcc.n	8000df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00f      	b.n	8000e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <SysTick_Config+0x40>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f7ff ff8e 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <SysTick_Config+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <SysTick_Config+0x40>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff29 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff3e 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff8e 	bl	8000d74 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5d 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff31 	bl	8000ce4 <__NVIC_EnableIRQ>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffa2 	bl	8000ddc <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff feb6 	bl	8000c20 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e099      	b.n	8000ff4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0201 	bic.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ee0:	e00f      	b.n	8000f02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ee2:	f7ff fe9d 	bl	8000c20 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b05      	cmp	r3, #5
 8000eee:	d908      	bls.n	8000f02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2203      	movs	r2, #3
 8000efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e078      	b.n	8000ff4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1e8      	bne.n	8000ee2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	4b38      	ldr	r3, [pc, #224]	@ (8000ffc <HAL_DMA_Init+0x158>)
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d107      	bne.n	8000f6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f64:	4313      	orrs	r3, r2
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f023 0307 	bic.w	r3, r3, #7
 8000f82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	d117      	bne.n	8000fc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00e      	beq.n	8000fc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 fa9d 	bl	80014e8 <DMA_CheckFifoParam>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d008      	beq.n	8000fc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2240      	movs	r2, #64	@ 0x40
 8000fb8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e016      	b.n	8000ff4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 fa54 	bl	800147c <DMA_CalcBaseAndBitshift>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fdc:	223f      	movs	r2, #63	@ 0x3f
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	f010803f 	.word	0xf010803f

08001000 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001016:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_DMA_Start_IT+0x26>
 8001022:	2302      	movs	r3, #2
 8001024:	e040      	b.n	80010a8 <HAL_DMA_Start_IT+0xa8>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d12f      	bne.n	800109a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2202      	movs	r2, #2
 800103e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2200      	movs	r2, #0
 8001046:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f000 f9e6 	bl	8001420 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001058:	223f      	movs	r2, #63	@ 0x3f
 800105a:	409a      	lsls	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0216 	orr.w	r2, r2, #22
 800106e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	2b00      	cmp	r3, #0
 8001076:	d007      	beq.n	8001088 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0208 	orr.w	r2, r2, #8
 8001086:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0201 	orr.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e005      	b.n	80010a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80010a2:	2302      	movs	r3, #2
 80010a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d004      	beq.n	80010ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2280      	movs	r2, #128	@ 0x80
 80010c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00c      	b.n	80010e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2205      	movs	r2, #5
 80010d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0201 	bic.w	r2, r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001100:	4b8e      	ldr	r3, [pc, #568]	@ (800133c <HAL_DMA_IRQHandler+0x248>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a8e      	ldr	r2, [pc, #568]	@ (8001340 <HAL_DMA_IRQHandler+0x24c>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	0a9b      	lsrs	r3, r3, #10
 800110c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001112:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800111e:	2208      	movs	r2, #8
 8001120:	409a      	lsls	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d01a      	beq.n	8001160 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	2b00      	cmp	r3, #0
 8001136:	d013      	beq.n	8001160 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0204 	bic.w	r2, r2, #4
 8001146:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800114c:	2208      	movs	r2, #8
 800114e:	409a      	lsls	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001158:	f043 0201 	orr.w	r2, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001164:	2201      	movs	r2, #1
 8001166:	409a      	lsls	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4013      	ands	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d012      	beq.n	8001196 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00b      	beq.n	8001196 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001182:	2201      	movs	r2, #1
 8001184:	409a      	lsls	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800118e:	f043 0202 	orr.w	r2, r3, #2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800119a:	2204      	movs	r2, #4
 800119c:	409a      	lsls	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d012      	beq.n	80011cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00b      	beq.n	80011cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011b8:	2204      	movs	r2, #4
 80011ba:	409a      	lsls	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c4:	f043 0204 	orr.w	r2, r3, #4
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d0:	2210      	movs	r2, #16
 80011d2:	409a      	lsls	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d043      	beq.n	8001264 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d03c      	beq.n	8001264 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ee:	2210      	movs	r2, #16
 80011f0:	409a      	lsls	r2, r3
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d018      	beq.n	8001236 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d108      	bne.n	8001224 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	2b00      	cmp	r3, #0
 8001218:	d024      	beq.n	8001264 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	4798      	blx	r3
 8001222:	e01f      	b.n	8001264 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001228:	2b00      	cmp	r3, #0
 800122a:	d01b      	beq.n	8001264 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	4798      	blx	r3
 8001234:	e016      	b.n	8001264 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001240:	2b00      	cmp	r3, #0
 8001242:	d107      	bne.n	8001254 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0208 	bic.w	r2, r2, #8
 8001252:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001268:	2220      	movs	r2, #32
 800126a:	409a      	lsls	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 808f 	beq.w	8001394 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 8087 	beq.w	8001394 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800128a:	2220      	movs	r2, #32
 800128c:	409a      	lsls	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b05      	cmp	r3, #5
 800129c:	d136      	bne.n	800130c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0216 	bic.w	r2, r2, #22
 80012ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	695a      	ldr	r2, [r3, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d103      	bne.n	80012ce <HAL_DMA_IRQHandler+0x1da>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d007      	beq.n	80012de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0208 	bic.w	r2, r2, #8
 80012dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e2:	223f      	movs	r2, #63	@ 0x3f
 80012e4:	409a      	lsls	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d07e      	beq.n	8001400 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	4798      	blx	r3
        }
        return;
 800130a:	e079      	b.n	8001400 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d01d      	beq.n	8001356 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10d      	bne.n	8001344 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132c:	2b00      	cmp	r3, #0
 800132e:	d031      	beq.n	8001394 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	4798      	blx	r3
 8001338:	e02c      	b.n	8001394 <HAL_DMA_IRQHandler+0x2a0>
 800133a:	bf00      	nop
 800133c:	20000000 	.word	0x20000000
 8001340:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001348:	2b00      	cmp	r3, #0
 800134a:	d023      	beq.n	8001394 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	4798      	blx	r3
 8001354:	e01e      	b.n	8001394 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10f      	bne.n	8001384 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0210 	bic.w	r2, r2, #16
 8001372:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001398:	2b00      	cmp	r3, #0
 800139a:	d032      	beq.n	8001402 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d022      	beq.n	80013ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2205      	movs	r2, #5
 80013ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	3301      	adds	r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d307      	bcc.n	80013dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f2      	bne.n	80013c0 <HAL_DMA_IRQHandler+0x2cc>
 80013da:	e000      	b.n	80013de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80013dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	4798      	blx	r3
 80013fe:	e000      	b.n	8001402 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001400:	bf00      	nop
    }
  }
}
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800143c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b40      	cmp	r3, #64	@ 0x40
 800144c:	d108      	bne.n	8001460 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800145e:	e007      	b.n	8001470 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	60da      	str	r2, [r3, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	3b10      	subs	r3, #16
 800148c:	4a14      	ldr	r2, [pc, #80]	@ (80014e0 <DMA_CalcBaseAndBitshift+0x64>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001496:	4a13      	ldr	r2, [pc, #76]	@ (80014e4 <DMA_CalcBaseAndBitshift+0x68>)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d909      	bls.n	80014be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	1d1a      	adds	r2, r3, #4
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80014bc:	e007      	b.n	80014ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80014c6:	f023 0303 	bic.w	r3, r3, #3
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	aaaaaaab 	.word	0xaaaaaaab
 80014e4:	080051cc 	.word	0x080051cc

080014e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d11f      	bne.n	8001542 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d856      	bhi.n	80015b6 <DMA_CheckFifoParam+0xce>
 8001508:	a201      	add	r2, pc, #4	@ (adr r2, 8001510 <DMA_CheckFifoParam+0x28>)
 800150a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150e:	bf00      	nop
 8001510:	08001521 	.word	0x08001521
 8001514:	08001533 	.word	0x08001533
 8001518:	08001521 	.word	0x08001521
 800151c:	080015b7 	.word	0x080015b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001524:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d046      	beq.n	80015ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001530:	e043      	b.n	80015ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001536:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800153a:	d140      	bne.n	80015be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001540:	e03d      	b.n	80015be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800154a:	d121      	bne.n	8001590 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d837      	bhi.n	80015c2 <DMA_CheckFifoParam+0xda>
 8001552:	a201      	add	r2, pc, #4	@ (adr r2, 8001558 <DMA_CheckFifoParam+0x70>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	08001569 	.word	0x08001569
 800155c:	0800156f 	.word	0x0800156f
 8001560:	08001569 	.word	0x08001569
 8001564:	08001581 	.word	0x08001581
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
      break;
 800156c:	e030      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001572:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d025      	beq.n	80015c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800157e:	e022      	b.n	80015c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001588:	d11f      	bne.n	80015ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800158e:	e01c      	b.n	80015ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d903      	bls.n	800159e <DMA_CheckFifoParam+0xb6>
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d003      	beq.n	80015a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800159c:	e018      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
      break;
 80015a2:	e015      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00e      	beq.n	80015ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
      break;
 80015b4:	e00b      	b.n	80015ce <DMA_CheckFifoParam+0xe6>
      break;
 80015b6:	bf00      	nop
 80015b8:	e00a      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      break;
 80015ba:	bf00      	nop
 80015bc:	e008      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      break;
 80015be:	bf00      	nop
 80015c0:	e006      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      break;
 80015c2:	bf00      	nop
 80015c4:	e004      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      break;
 80015c6:	bf00      	nop
 80015c8:	e002      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80015ca:	bf00      	nop
 80015cc:	e000      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      break;
 80015ce:	bf00      	nop
    }
  } 
  
  return status; 
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop

080015e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	e16b      	b.n	80018d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	429a      	cmp	r2, r3
 8001616:	f040 815a 	bne.w	80018ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	2b01      	cmp	r3, #1
 8001624:	d005      	beq.n	8001632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162e:	2b02      	cmp	r3, #2
 8001630:	d130      	bne.n	8001694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001668:	2201      	movs	r2, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	f003 0201 	and.w	r2, r3, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b03      	cmp	r3, #3
 800169e:	d017      	beq.n	80016d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d123      	bne.n	8001724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	08da      	lsrs	r2, r3, #3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3208      	adds	r2, #8
 80016e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	69b9      	ldr	r1, [r7, #24]
 8001720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0203 	and.w	r2, r3, #3
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80b4 	beq.w	80018ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b60      	ldr	r3, [pc, #384]	@ (80018ec <HAL_GPIO_Init+0x30c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	4a5f      	ldr	r2, [pc, #380]	@ (80018ec <HAL_GPIO_Init+0x30c>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001774:	6453      	str	r3, [r2, #68]	@ 0x44
 8001776:	4b5d      	ldr	r3, [pc, #372]	@ (80018ec <HAL_GPIO_Init+0x30c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001782:	4a5b      	ldr	r2, [pc, #364]	@ (80018f0 <HAL_GPIO_Init+0x310>)
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a52      	ldr	r2, [pc, #328]	@ (80018f4 <HAL_GPIO_Init+0x314>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d02b      	beq.n	8001806 <HAL_GPIO_Init+0x226>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a51      	ldr	r2, [pc, #324]	@ (80018f8 <HAL_GPIO_Init+0x318>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d025      	beq.n	8001802 <HAL_GPIO_Init+0x222>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a50      	ldr	r2, [pc, #320]	@ (80018fc <HAL_GPIO_Init+0x31c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d01f      	beq.n	80017fe <HAL_GPIO_Init+0x21e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001900 <HAL_GPIO_Init+0x320>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d019      	beq.n	80017fa <HAL_GPIO_Init+0x21a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001904 <HAL_GPIO_Init+0x324>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d013      	beq.n	80017f6 <HAL_GPIO_Init+0x216>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001908 <HAL_GPIO_Init+0x328>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d00d      	beq.n	80017f2 <HAL_GPIO_Init+0x212>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4c      	ldr	r2, [pc, #304]	@ (800190c <HAL_GPIO_Init+0x32c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d007      	beq.n	80017ee <HAL_GPIO_Init+0x20e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001910 <HAL_GPIO_Init+0x330>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d101      	bne.n	80017ea <HAL_GPIO_Init+0x20a>
 80017e6:	2307      	movs	r3, #7
 80017e8:	e00e      	b.n	8001808 <HAL_GPIO_Init+0x228>
 80017ea:	2308      	movs	r3, #8
 80017ec:	e00c      	b.n	8001808 <HAL_GPIO_Init+0x228>
 80017ee:	2306      	movs	r3, #6
 80017f0:	e00a      	b.n	8001808 <HAL_GPIO_Init+0x228>
 80017f2:	2305      	movs	r3, #5
 80017f4:	e008      	b.n	8001808 <HAL_GPIO_Init+0x228>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x228>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e004      	b.n	8001808 <HAL_GPIO_Init+0x228>
 80017fe:	2302      	movs	r3, #2
 8001800:	e002      	b.n	8001808 <HAL_GPIO_Init+0x228>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_GPIO_Init+0x228>
 8001806:	2300      	movs	r3, #0
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	f002 0203 	and.w	r2, r2, #3
 800180e:	0092      	lsls	r2, r2, #2
 8001810:	4093      	lsls	r3, r2
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001818:	4935      	ldr	r1, [pc, #212]	@ (80018f0 <HAL_GPIO_Init+0x310>)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001826:	4b3b      	ldr	r3, [pc, #236]	@ (8001914 <HAL_GPIO_Init+0x334>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800184a:	4a32      	ldr	r2, [pc, #200]	@ (8001914 <HAL_GPIO_Init+0x334>)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001850:	4b30      	ldr	r3, [pc, #192]	@ (8001914 <HAL_GPIO_Init+0x334>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001874:	4a27      	ldr	r2, [pc, #156]	@ (8001914 <HAL_GPIO_Init+0x334>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800187a:	4b26      	ldr	r3, [pc, #152]	@ (8001914 <HAL_GPIO_Init+0x334>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800189e:	4a1d      	ldr	r2, [pc, #116]	@ (8001914 <HAL_GPIO_Init+0x334>)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <HAL_GPIO_Init+0x334>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018c8:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <HAL_GPIO_Init+0x334>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3301      	adds	r3, #1
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	2b0f      	cmp	r3, #15
 80018d8:	f67f ae90 	bls.w	80015fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3724      	adds	r7, #36	@ 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40013800 	.word	0x40013800
 80018f4:	40020000 	.word	0x40020000
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020c00 	.word	0x40020c00
 8001904:	40021000 	.word	0x40021000
 8001908:	40021400 	.word	0x40021400
 800190c:	40021800 	.word	0x40021800
 8001910:	40021c00 	.word	0x40021c00
 8001914:	40013c00 	.word	0x40013c00

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001934:	e003      	b.n	800193e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800195c:	887a      	ldrh	r2, [r7, #2]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	041a      	lsls	r2, r3, #16
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43d9      	mvns	r1, r3
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	400b      	ands	r3, r1
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	619a      	str	r2, [r3, #24]
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e267      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d075      	beq.n	8001a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800199e:	4b88      	ldr	r3, [pc, #544]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d00c      	beq.n	80019c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019aa:	4b85      	ldr	r3, [pc, #532]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d112      	bne.n	80019dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b6:	4b82      	ldr	r3, [pc, #520]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019c2:	d10b      	bne.n	80019dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	4b7e      	ldr	r3, [pc, #504]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d05b      	beq.n	8001a88 <HAL_RCC_OscConfig+0x108>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d157      	bne.n	8001a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e242      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e4:	d106      	bne.n	80019f4 <HAL_RCC_OscConfig+0x74>
 80019e6:	4b76      	ldr	r3, [pc, #472]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a75      	ldr	r2, [pc, #468]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e01d      	b.n	8001a30 <HAL_RCC_OscConfig+0xb0>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x98>
 80019fe:	4b70      	ldr	r3, [pc, #448]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6f      	ldr	r2, [pc, #444]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6c      	ldr	r2, [pc, #432]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0xb0>
 8001a18:	4b69      	ldr	r3, [pc, #420]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a68      	ldr	r2, [pc, #416]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b66      	ldr	r3, [pc, #408]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a65      	ldr	r2, [pc, #404]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff f8f2 	bl	8000c20 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff f8ee 	bl	8000c20 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	@ 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e207      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b5b      	ldr	r3, [pc, #364]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0xc0>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff f8de 	bl	8000c20 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff f8da 	bl	8000c20 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	@ 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1f3      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	4b51      	ldr	r3, [pc, #324]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0xe8>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d063      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a96:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa2:	4b47      	ldr	r3, [pc, #284]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d11c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aae:	4b44      	ldr	r3, [pc, #272]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d116      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	4b41      	ldr	r3, [pc, #260]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x152>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e1c7      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4937      	ldr	r1, [pc, #220]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e03a      	b.n	8001b5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af0:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <HAL_RCC_OscConfig+0x244>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f893 	bl	8000c20 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff f88f 	bl	8000c20 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1a8      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1c:	4b28      	ldr	r3, [pc, #160]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4925      	ldr	r1, [pc, #148]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e015      	b.n	8001b5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b32:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <HAL_RCC_OscConfig+0x244>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff f872 	bl	8000c20 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b40:	f7ff f86e 	bl	8000c20 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e187      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d036      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d016      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_RCC_OscConfig+0x248>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7ff f852 	bl	8000c20 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff f84e 	bl	8000c20 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e167      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x200>
 8001b9e:	e01b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <HAL_RCC_OscConfig+0x248>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f83b 	bl	8000c20 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	e00e      	b.n	8001bcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff f837 	bl	8000c20 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d907      	bls.n	8001bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e150      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	42470000 	.word	0x42470000
 8001bc8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b88      	ldr	r3, [pc, #544]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ea      	bne.n	8001bae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8097 	beq.w	8001d14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b81      	ldr	r3, [pc, #516]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10f      	bne.n	8001c16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b7d      	ldr	r3, [pc, #500]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	4a7c      	ldr	r2, [pc, #496]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c06:	4b7a      	ldr	r3, [pc, #488]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c12:	2301      	movs	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	4b77      	ldr	r3, [pc, #476]	@ (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d118      	bne.n	8001c54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c22:	4b74      	ldr	r3, [pc, #464]	@ (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a73      	ldr	r2, [pc, #460]	@ (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2e:	f7fe fff7 	bl	8000c20 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7fe fff3 	bl	8000c20 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e10c      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	4b6a      	ldr	r3, [pc, #424]	@ (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2ea>
 8001c5c:	4b64      	ldr	r3, [pc, #400]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c60:	4a63      	ldr	r2, [pc, #396]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c68:	e01c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x324>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x30c>
 8001c72:	4b5f      	ldr	r3, [pc, #380]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c76:	4a5e      	ldr	r2, [pc, #376]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c82:	4a5b      	ldr	r2, [pc, #364]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x324>
 8001c8c:	4b58      	ldr	r3, [pc, #352]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c90:	4a57      	ldr	r2, [pc, #348]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c92:	f023 0301 	bic.w	r3, r3, #1
 8001c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c98:	4b55      	ldr	r3, [pc, #340]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9c:	4a54      	ldr	r2, [pc, #336]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	f023 0304 	bic.w	r3, r3, #4
 8001ca2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d015      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7fe ffb8 	bl	8000c20 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7fe ffb4 	bl	8000c20 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e0cb      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cca:	4b49      	ldr	r3, [pc, #292]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0ee      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x334>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7fe ffa2 	bl	8000c20 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7fe ff9e 	bl	8000c20 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0b5      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ee      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d08:	4b39      	ldr	r3, [pc, #228]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	4a38      	ldr	r2, [pc, #224]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80a1 	beq.w	8001e60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d1e:	4b34      	ldr	r3, [pc, #208]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d05c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d141      	bne.n	8001db6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <HAL_RCC_OscConfig+0x478>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7fe ff72 	bl	8000c20 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7fe ff6e 	bl	8000c20 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e087      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	4b27      	ldr	r3, [pc, #156]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	019b      	lsls	r3, r3, #6
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	3b01      	subs	r3, #1
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d80:	061b      	lsls	r3, r3, #24
 8001d82:	491b      	ldr	r1, [pc, #108]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d88:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <HAL_RCC_OscConfig+0x478>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7fe ff47 	bl	8000c20 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7fe ff43 	bl	8000c20 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e05c      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x416>
 8001db4:	e054      	b.n	8001e60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <HAL_RCC_OscConfig+0x478>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe ff30 	bl	8000c20 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7fe ff2c 	bl	8000c20 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e045      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x444>
 8001de2:	e03d      	b.n	8001e60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e038      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000
 8001df8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <HAL_RCC_OscConfig+0x4ec>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d028      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d121      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d11a      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d111      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	3b01      	subs	r3, #1
 8001e46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d107      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800

08001e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0cc      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e84:	4b68      	ldr	r3, [pc, #416]	@ (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d90c      	bls.n	8001eac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b65      	ldr	r3, [pc, #404]	@ (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b63      	ldr	r3, [pc, #396]	@ (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0b8      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d020      	beq.n	8001efa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec4:	4b59      	ldr	r3, [pc, #356]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a58      	ldr	r2, [pc, #352]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ece:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001edc:	4b53      	ldr	r3, [pc, #332]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4a52      	ldr	r2, [pc, #328]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ee6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee8:	4b50      	ldr	r3, [pc, #320]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	494d      	ldr	r1, [pc, #308]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d044      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	4b47      	ldr	r3, [pc, #284]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d119      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e07f      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e06f      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e067      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4e:	4b37      	ldr	r3, [pc, #220]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f023 0203 	bic.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4934      	ldr	r1, [pc, #208]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f60:	f7fe fe5e 	bl	8000c20 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f68:	f7fe fe5a 	bl	8000c20 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e04f      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 020c 	and.w	r2, r3, #12
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d1eb      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f90:	4b25      	ldr	r3, [pc, #148]	@ (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d20c      	bcs.n	8001fb8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b20      	ldr	r3, [pc, #128]	@ (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e032      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc4:	4b19      	ldr	r3, [pc, #100]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4916      	ldr	r1, [pc, #88]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe2:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	490e      	ldr	r1, [pc, #56]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ff6:	f000 f821 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	490a      	ldr	r1, [pc, #40]	@ (8002030 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	5ccb      	ldrb	r3, [r1, r3]
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	4a09      	ldr	r2, [pc, #36]	@ (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002012:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <HAL_RCC_ClockConfig+0x1c8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fdbe 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40023c00 	.word	0x40023c00
 800202c:	40023800 	.word	0x40023800
 8002030:	080051bc 	.word	0x080051bc
 8002034:	20000000 	.word	0x20000000
 8002038:	20000004 	.word	0x20000004

0800203c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800203c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002040:	b090      	sub	sp, #64	@ 0x40
 8002042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002054:	4b59      	ldr	r3, [pc, #356]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d00d      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x40>
 8002060:	2b08      	cmp	r3, #8
 8002062:	f200 80a1 	bhi.w	80021a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x34>
 800206a:	2b04      	cmp	r3, #4
 800206c:	d003      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x3a>
 800206e:	e09b      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b53      	ldr	r3, [pc, #332]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002072:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002074:	e09b      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002076:	4b53      	ldr	r3, [pc, #332]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002078:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800207a:	e098      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800207c:	4b4f      	ldr	r3, [pc, #316]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x180>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002084:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002086:	4b4d      	ldr	r3, [pc, #308]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d028      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002092:	4b4a      	ldr	r3, [pc, #296]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	099b      	lsrs	r3, r3, #6
 8002098:	2200      	movs	r2, #0
 800209a:	623b      	str	r3, [r7, #32]
 800209c:	627a      	str	r2, [r7, #36]	@ 0x24
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020a4:	2100      	movs	r1, #0
 80020a6:	4b47      	ldr	r3, [pc, #284]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020a8:	fb03 f201 	mul.w	r2, r3, r1
 80020ac:	2300      	movs	r3, #0
 80020ae:	fb00 f303 	mul.w	r3, r0, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	4a43      	ldr	r2, [pc, #268]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020b6:	fba0 1202 	umull	r1, r2, r0, r2
 80020ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020bc:	460a      	mov	r2, r1
 80020be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80020c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020c2:	4413      	add	r3, r2
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020c8:	2200      	movs	r2, #0
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	61fa      	str	r2, [r7, #28]
 80020ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020d6:	f7fe f877 	bl	80001c8 <__aeabi_uldivmod>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4613      	mov	r3, r2
 80020e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020e2:	e053      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e4:	4b35      	ldr	r3, [pc, #212]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x180>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	099b      	lsrs	r3, r3, #6
 80020ea:	2200      	movs	r2, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	617a      	str	r2, [r7, #20]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020f6:	f04f 0b00 	mov.w	fp, #0
 80020fa:	4652      	mov	r2, sl
 80020fc:	465b      	mov	r3, fp
 80020fe:	f04f 0000 	mov.w	r0, #0
 8002102:	f04f 0100 	mov.w	r1, #0
 8002106:	0159      	lsls	r1, r3, #5
 8002108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800210c:	0150      	lsls	r0, r2, #5
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	ebb2 080a 	subs.w	r8, r2, sl
 8002116:	eb63 090b 	sbc.w	r9, r3, fp
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002126:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800212a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800212e:	ebb2 0408 	subs.w	r4, r2, r8
 8002132:	eb63 0509 	sbc.w	r5, r3, r9
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	00eb      	lsls	r3, r5, #3
 8002140:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002144:	00e2      	lsls	r2, r4, #3
 8002146:	4614      	mov	r4, r2
 8002148:	461d      	mov	r5, r3
 800214a:	eb14 030a 	adds.w	r3, r4, sl
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	eb45 030b 	adc.w	r3, r5, fp
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002162:	4629      	mov	r1, r5
 8002164:	028b      	lsls	r3, r1, #10
 8002166:	4621      	mov	r1, r4
 8002168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800216c:	4621      	mov	r1, r4
 800216e:	028a      	lsls	r2, r1, #10
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002176:	2200      	movs	r2, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	60fa      	str	r2, [r7, #12]
 800217c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002180:	f7fe f822 	bl	80001c8 <__aeabi_uldivmod>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4613      	mov	r3, r2
 800218a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x180>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	0c1b      	lsrs	r3, r3, #16
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	3301      	adds	r3, #1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800219c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800219e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021a6:	e002      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021a8:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80021aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3740      	adds	r7, #64	@ 0x40
 80021b4:	46bd      	mov	sp, r7
 80021b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	00f42400 	.word	0x00f42400
 80021c4:	017d7840 	.word	0x017d7840

080021c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e022      	b.n	8002220 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7fe fb37 	bl	8000860 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2203      	movs	r2, #3
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f814 	bl	8002228 <HAL_SD_InitCard>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e00a      	b.n	8002220 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002228:	b5b0      	push	{r4, r5, r7, lr}
 800222a:	b08e      	sub	sp, #56	@ 0x38
 800222c:	af04      	add	r7, sp, #16
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002244:	2376      	movs	r3, #118	@ 0x76
 8002246:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681d      	ldr	r5, [r3, #0]
 800224c:	466c      	mov	r4, sp
 800224e:	f107 0318 	add.w	r3, r7, #24
 8002252:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002260:	4628      	mov	r0, r5
 8002262:	f001 fae3 	bl	800382c <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002266:	4b2a      	ldr	r3, [pc, #168]	@ (8002310 <HAL_SD_InitCard+0xe8>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f001 fb24 	bl	80038be <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002276:	4b26      	ldr	r3, [pc, #152]	@ (8002310 <HAL_SD_InitCard+0xe8>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800227c:	2002      	movs	r0, #2
 800227e:	f7fe fcdb 	bl	8000c38 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f001 f806 	bl	8003294 <SD_PowerON>
 8002288:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00b      	beq.n	80022a8 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e02e      	b.n	8002306 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 ff25 	bl	80030f8 <SD_InitCard>
 80022ae:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e01b      	b.n	8002306 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 fb83 	bl	80039e2 <SDMMC_CmdBlockLength>
 80022dc:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00f      	beq.n	8002304 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <HAL_SD_InitCard+0xec>)
 80022ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3728      	adds	r7, #40	@ 0x28
 800230a:	46bd      	mov	sp, r7
 800230c:	bdb0      	pop	{r4, r5, r7, pc}
 800230e:	bf00      	nop
 8002310:	422580a0 	.word	0x422580a0
 8002314:	004005ff 	.word	0x004005ff

08002318 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08c      	sub	sp, #48	@ 0x30
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d107      	bne.n	8002340 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002334:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0c0      	b.n	80024c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b01      	cmp	r3, #1
 800234a:	f040 80b9 	bne.w	80024c0 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002354:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	441a      	add	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235e:	429a      	cmp	r2, r3
 8002360:	d907      	bls.n	8002372 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002366:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0a7      	b.n	80024c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2203      	movs	r2, #3
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2200      	movs	r2, #0
 8002380:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	4a4c      	ldr	r2, [pc, #304]	@ (80024cc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800239c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	4a4b      	ldr	r2, [pc, #300]	@ (80024d0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80023a4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	2200      	movs	r2, #0
 80023ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3380      	adds	r3, #128	@ 0x80
 80023dc:	4619      	mov	r1, r3
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	025b      	lsls	r3, r3, #9
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	f7fe fe0b 	bl	8001000 <HAL_DMA_Start_IT>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d017      	beq.n	8002420 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80023fe:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a33      	ldr	r2, [pc, #204]	@ (80024d4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002406:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e050      	b.n	80024c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002420:	4b2d      	ldr	r3, [pc, #180]	@ (80024d8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	2b01      	cmp	r3, #1
 800242c:	d002      	beq.n	8002434 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800242e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002430:	025b      	lsls	r3, r3, #9
 8002432:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295
 8002438:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	025b      	lsls	r3, r3, #9
 800243e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002440:	2390      	movs	r3, #144	@ 0x90
 8002442:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002444:	2302      	movs	r3, #2
 8002446:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002448:	2300      	movs	r3, #0
 800244a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800244c:	2301      	movs	r3, #1
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f107 0210 	add.w	r2, r7, #16
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f001 fa95 	bl	800398a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d90a      	bls.n	800247c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2282      	movs	r2, #130	@ 0x82
 800246a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002472:	4618      	mov	r0, r3
 8002474:	f001 faf9 	bl	8003a6a <SDMMC_CmdReadMultiBlock>
 8002478:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800247a:	e009      	b.n	8002490 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2281      	movs	r2, #129	@ 0x81
 8002480:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002488:	4618      	mov	r0, r3
 800248a:	f001 facc 	bl	8003a26 <SDMMC_CmdReadSingleBlock>
 800248e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d012      	beq.n	80024bc <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a0e      	ldr	r2, [pc, #56]	@ (80024d4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800249c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a4:	431a      	orrs	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e002      	b.n	80024c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3730      	adds	r7, #48	@ 0x30
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	08002f07 	.word	0x08002f07
 80024d0:	08002f79 	.word	0x08002f79
 80024d4:	004005ff 	.word	0x004005ff
 80024d8:	4225858c 	.word	0x4225858c

080024dc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	@ 0x30
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d107      	bne.n	8002504 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0c5      	b.n	8002690 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	f040 80be 	bne.w	800268e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002518:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	441a      	add	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002522:	429a      	cmp	r2, r3
 8002524:	d907      	bls.n	8002536 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0ac      	b.n	8002690 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2203      	movs	r2, #3
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2200      	movs	r2, #0
 8002544:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800255e:	4a4e      	ldr	r2, [pc, #312]	@ (8002698 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002560:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002566:	4a4d      	ldr	r2, [pc, #308]	@ (800269c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002568:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256e:	2200      	movs	r2, #0
 8002570:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	2b01      	cmp	r3, #1
 8002578:	d002      	beq.n	8002580 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800257a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257c:	025b      	lsls	r3, r3, #9
 800257e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d90a      	bls.n	800259c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	22a0      	movs	r2, #160	@ 0xa0
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002592:	4618      	mov	r0, r3
 8002594:	f001 faad 	bl	8003af2 <SDMMC_CmdWriteMultiBlock>
 8002598:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800259a:	e009      	b.n	80025b0 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2290      	movs	r2, #144	@ 0x90
 80025a0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025a8:	4618      	mov	r0, r3
 80025aa:	f001 fa80 	bl	8003aae <SDMMC_CmdWriteSingleBlock>
 80025ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80025b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d012      	beq.n	80025dc <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a39      	ldr	r2, [pc, #228]	@ (80026a0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80025bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c4:	431a      	orrs	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e059      	b.n	8002690 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80025dc:	4b31      	ldr	r3, [pc, #196]	@ (80026a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e6:	2240      	movs	r2, #64	@ 0x40
 80025e8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3380      	adds	r3, #128	@ 0x80
 8002612:	461a      	mov	r2, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	025b      	lsls	r3, r3, #9
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	f7fe fcf1 	bl	8001000 <HAL_DMA_Start_IT>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01c      	beq.n	800265e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8002632:	f023 0302 	bic.w	r3, r3, #2
 8002636:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a18      	ldr	r2, [pc, #96]	@ (80026a0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800263e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002644:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e018      	b.n	8002690 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	025b      	lsls	r3, r3, #9
 8002668:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800266a:	2390      	movs	r3, #144	@ 0x90
 800266c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002676:	2301      	movs	r3, #1
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f107 0210 	add.w	r2, r7, #16
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f001 f980 	bl	800398a <SDIO_ConfigData>

      return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800268e:	2302      	movs	r3, #2
  }
}
 8002690:	4618      	mov	r0, r3
 8002692:	3730      	adds	r7, #48	@ 0x30
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	08002edd 	.word	0x08002edd
 800269c:	08002f79 	.word	0x08002f79
 80026a0:	004005ff 	.word	0x004005ff
 80026a4:	4225858c 	.word	0x4225858c

080026a8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_SD_IRQHandler+0x2e>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f001 f806 	bl	80036e0 <SD_Read_IT>
 80026d4:	e165      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 808f 	beq.w	8002804 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026ee:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80026fe:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8002702:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d039      	beq.n	8002792 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d104      	bne.n	8002732 <HAL_SD_IRQHandler+0x8a>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b00      	cmp	r3, #0
 8002730:	d011      	beq.n	8002756 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f001 f9fe 	bl	8003b38 <SDMMC_CmdStopTransfer>
 800273c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f92f 	bl	80029b4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800275e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d104      	bne.n	8002782 <HAL_SD_IRQHandler+0xda>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f001 fe64 	bl	8004450 <HAL_SD_RxCpltCallback>
 8002788:	e10b      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f001 fe56 	bl	800443c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002790:	e107      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8102 	beq.w	80029a2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d011      	beq.n	80027cc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f001 f9c3 	bl	8003b38 <SDMMC_CmdStopTransfer>
 80027b2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8f4 	bl	80029b4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 80e5 	bne.w	80029a2 <HAL_SD_IRQHandler+0x2fa>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 80df 	bne.w	80029a2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0208 	bic.w	r2, r2, #8
 80027f2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f001 fe1d 	bl	800443c <HAL_SD_TxCpltCallback>
}
 8002802:	e0ce      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_SD_IRQHandler+0x17c>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 ffb0 	bl	8003782 <SD_Write_IT>
 8002822:	e0be      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800282a:	f240 233a 	movw	r3, #570	@ 0x23a
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80b6 	beq.w	80029a2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002848:	f043 0202 	orr.w	r2, r3, #2
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002862:	f043 0208 	orr.w	r2, r3, #8
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002896:	f043 0210 	orr.w	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b0:	f043 0208 	orr.w	r2, r3, #8
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f240 723a 	movw	r2, #1850	@ 0x73a
 80028c0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 80028d0:	f023 0302 	bic.w	r3, r3, #2
 80028d4:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 f92c 	bl	8003b38 <SDMMC_CmdStopTransfer>
 80028e0:	4602      	mov	r2, r0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f855 	bl	80029b4 <HAL_SD_ErrorCallback>
}
 800290a:	e04a      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002912:	2b00      	cmp	r3, #0
 8002914:	d045      	beq.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d104      	bne.n	800292a <HAL_SD_IRQHandler+0x282>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d011      	beq.n	800294e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292e:	4a1f      	ldr	r2, [pc, #124]	@ (80029ac <HAL_SD_IRQHandler+0x304>)
 8002930:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fbba 	bl	80010b0 <HAL_DMA_Abort_IT>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d02f      	beq.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fb68 	bl	800301c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800294c:	e029      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <HAL_SD_IRQHandler+0x2ba>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d011      	beq.n	8002986 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	4a12      	ldr	r2, [pc, #72]	@ (80029b0 <HAL_SD_IRQHandler+0x308>)
 8002968:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fb9e 	bl	80010b0 <HAL_DMA_Abort_IT>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d013      	beq.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fb83 	bl	800308a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002984:	e00d      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f001 fd44 	bl	8004428 <HAL_SD_AbortCallback>
}
 80029a0:	e7ff      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	0800301d 	.word	0x0800301d
 80029b0:	0800308b 	.word	0x0800308b

080029b4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029d6:	0f9b      	lsrs	r3, r3, #30
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029f4:	0e1b      	lsrs	r3, r3, #24
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a06:	0c1b      	lsrs	r3, r3, #16
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a28:	0d1b      	lsrs	r3, r3, #20
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a34:	0c1b      	lsrs	r3, r3, #16
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a46:	0bdb      	lsrs	r3, r3, #15
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a58:	0b9b      	lsrs	r3, r3, #14
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a6a:	0b5b      	lsrs	r3, r3, #13
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a7c:	0b1b      	lsrs	r3, r3, #12
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d163      	bne.n	8002b60 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a9c:	009a      	lsls	r2, r3, #2
 8002a9e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002aa8:	0f92      	lsrs	r2, r2, #30
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ab4:	0edb      	lsrs	r3, r3, #27
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ac6:	0e1b      	lsrs	r3, r3, #24
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ad8:	0d5b      	lsrs	r3, r3, #21
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aea:	0c9b      	lsrs	r3, r3, #18
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002afc:	0bdb      	lsrs	r3, r3, #15
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	7e1b      	ldrb	r3, [r3, #24]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	3302      	adds	r3, #2
 8002b20:	2201      	movs	r2, #1
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002b2a:	fb03 f202 	mul.w	r2, r3, r2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	7a1b      	ldrb	r3, [r3, #8]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002b4c:	0a52      	lsrs	r2, r2, #9
 8002b4e:	fb03 f202 	mul.w	r2, r3, r2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b5c:	661a      	str	r2, [r3, #96]	@ 0x60
 8002b5e:	e031      	b.n	8002bc4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d11d      	bne.n	8002ba4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b76:	0c1b      	lsrs	r3, r3, #16
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	3301      	adds	r3, #1
 8002b84:	029a      	lsls	r2, r3, #10
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b98:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ba2:	e00f      	b.n	8002bc4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	@ (8002d0c <HAL_SD_GetCardCSD+0x344>)
 8002baa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e09d      	b.n	8002d00 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bc8:	0b9b      	lsrs	r3, r3, #14
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bda:	09db      	lsrs	r3, r3, #7
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfc:	0fdb      	lsrs	r3, r3, #31
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c08:	0f5b      	lsrs	r3, r3, #29
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1a:	0e9b      	lsrs	r3, r3, #26
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2c:	0d9b      	lsrs	r3, r3, #22
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3e:	0d5b      	lsrs	r3, r3, #21
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5a:	0c1b      	lsrs	r3, r3, #16
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6e:	0bdb      	lsrs	r3, r3, #15
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	0b9b      	lsrs	r3, r3, #14
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c96:	0b5b      	lsrs	r3, r3, #13
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002caa:	0b1b      	lsrs	r3, r3, #12
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbe:	0a9b      	lsrs	r3, r3, #10
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	004005ff 	.word	0x004005ff

08002d10 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	b08e      	sub	sp, #56	@ 0x38
 8002d6c:	af04      	add	r7, sp, #16
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d02e      	beq.n	8002de6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d8e:	d106      	bne.n	8002d9e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d9c:	e029      	b.n	8002df2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002da4:	d10a      	bne.n	8002dbc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fb2a 	bl	8003400 <SD_WideBus_Enable>
 8002dac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002dba:	e01a      	b.n	8002df2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fb67 	bl	8003496 <SD_WideBus_Disable>
 8002dc8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8002dd6:	e00c      	b.n	8002df2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ddc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	639a      	str	r2, [r3, #56]	@ 0x38
 8002de4:	e005      	b.n	8002df2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dea:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a26      	ldr	r2, [pc, #152]	@ (8002e98 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002e00:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002e10:	e01f      	b.n	8002e52 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681d      	ldr	r5, [r3, #0]
 8002e38:	466c      	mov	r4, sp
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e46:	f107 0308 	add.w	r3, r7, #8
 8002e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	f000 fced 	bl	800382c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fdc1 	bl	80039e2 <SDMMC_CmdBlockLength>
 8002e60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00c      	beq.n	8002e82 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e98 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002e6e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8002e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3728      	adds	r7, #40	@ 0x28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bdb0      	pop	{r4, r5, r7, pc}
 8002e96:	bf00      	nop
 8002e98:	004005ff 	.word	0x004005ff

08002e9c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002ea8:	f107 030c 	add.w	r3, r7, #12
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fa7e 	bl	80033b0 <SD_SendStatus>
 8002eb4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	0a5b      	lsrs	r3, r3, #9
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002ed2:	693b      	ldr	r3, [r7, #16]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ef8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002efa:	bf00      	nop
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f12:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f18:	2b82      	cmp	r3, #130	@ 0x82
 8002f1a:	d111      	bne.n	8002f40 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fe09 	bl	8003b38 <SDMMC_CmdStopTransfer>
 8002f26:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f7ff fd3a 	bl	80029b4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0208 	bic.w	r2, r2, #8
 8002f4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002f58:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f001 fa71 	bl	8004450 <HAL_SD_RxCpltCallback>
#endif
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f84:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fe fa3e 	bl	8001408 <HAL_DMA_GetError>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d03e      	beq.n	8003010 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f98:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d002      	beq.n	8002fae <SD_DMAError+0x36>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d12d      	bne.n	800300a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a19      	ldr	r2, [pc, #100]	@ (8003018 <SD_DMAError+0xa0>)
 8002fb4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8002fc4:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fca:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002fd2:	6978      	ldr	r0, [r7, #20]
 8002fd4:	f7ff ff62 	bl	8002e9c <HAL_SD_GetCardState>
 8002fd8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b06      	cmp	r3, #6
 8002fde:	d002      	beq.n	8002fe6 <SD_DMAError+0x6e>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d10a      	bne.n	8002ffc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fda4 	bl	8003b38 <SDMMC_CmdStopTransfer>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800300a:	6978      	ldr	r0, [r7, #20]
 800300c:	f7ff fcd2 	bl	80029b4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003010:	bf00      	nop
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	004005ff 	.word	0x004005ff

0800301c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003028:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003032:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f7ff ff31 	bl	8002e9c <HAL_SD_GetCardState>
 800303a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b06      	cmp	r3, #6
 800304e:	d002      	beq.n	8003056 <SD_DMATxAbort+0x3a>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b05      	cmp	r3, #5
 8003054:	d10a      	bne.n	800306c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fd6c 	bl	8003b38 <SDMMC_CmdStopTransfer>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003066:	431a      	orrs	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003070:	2b00      	cmp	r3, #0
 8003072:	d103      	bne.n	800307c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f001 f9d7 	bl	8004428 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800307a:	e002      	b.n	8003082 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f7ff fc99 	bl	80029b4 <HAL_SD_ErrorCallback>
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003096:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f240 523a 	movw	r2, #1338	@ 0x53a
 80030a0:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f7ff fefa 	bl	8002e9c <HAL_SD_GetCardState>
 80030a8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b06      	cmp	r3, #6
 80030bc:	d002      	beq.n	80030c4 <SD_DMARxAbort+0x3a>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d10a      	bne.n	80030da <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fd35 	bl	8003b38 <SDMMC_CmdStopTransfer>
 80030ce:	4602      	mov	r2, r0
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d4:	431a      	orrs	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d103      	bne.n	80030ea <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f001 f9a0 	bl	8004428 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80030e8:	e002      	b.n	80030f0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f7ff fc62 	bl	80029b4 <HAL_SD_ErrorCallback>
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030f8:	b5b0      	push	{r4, r5, r7, lr}
 80030fa:	b094      	sub	sp, #80	@ 0x50
 80030fc:	af04      	add	r7, sp, #16
 80030fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003100:	2301      	movs	r3, #1
 8003102:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fbe6 	bl	80038da <SDIO_GetPowerState>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003114:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003118:	e0b8      	b.n	800328c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	2b03      	cmp	r3, #3
 8003120:	d02f      	beq.n	8003182 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fe10 	bl	8003d4c <SDMMC_CmdSendCID>
 800312c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800312e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <SD_InitCard+0x40>
    {
      return errorstate;
 8003134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003136:	e0a9      	b.n	800328c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fc10 	bl	8003964 <SDIO_GetResponse>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2104      	movs	r1, #4
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fc07 	bl	8003964 <SDIO_GetResponse>
 8003156:	4602      	mov	r2, r0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2108      	movs	r1, #8
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fbfe 	bl	8003964 <SDIO_GetResponse>
 8003168:	4602      	mov	r2, r0
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	210c      	movs	r1, #12
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fbf5 	bl	8003964 <SDIO_GetResponse>
 800317a:	4602      	mov	r2, r0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003186:	2b03      	cmp	r3, #3
 8003188:	d00d      	beq.n	80031a6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f107 020e 	add.w	r2, r7, #14
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fe16 	bl	8003dc6 <SDMMC_CmdSetRelAdd>
 800319a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800319c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <SD_InitCard+0xae>
    {
      return errorstate;
 80031a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031a4:	e072      	b.n	800328c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d036      	beq.n	800321c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80031ae:	89fb      	ldrh	r3, [r7, #14]
 80031b0:	461a      	mov	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031be:	041b      	lsls	r3, r3, #16
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f000 fde0 	bl	8003d88 <SDMMC_CmdSendCSD>
 80031c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80031ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80031d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031d2:	e05b      	b.n	800328c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2100      	movs	r1, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fbc2 	bl	8003964 <SDIO_GetResponse>
 80031e0:	4602      	mov	r2, r0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2104      	movs	r1, #4
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fbb9 	bl	8003964 <SDIO_GetResponse>
 80031f2:	4602      	mov	r2, r0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2108      	movs	r1, #8
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fbb0 	bl	8003964 <SDIO_GetResponse>
 8003204:	4602      	mov	r2, r0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	210c      	movs	r1, #12
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fba7 	bl	8003964 <SDIO_GetResponse>
 8003216:	4602      	mov	r2, r0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2104      	movs	r1, #4
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fb9e 	bl	8003964 <SDIO_GetResponse>
 8003228:	4603      	mov	r3, r0
 800322a:	0d1a      	lsrs	r2, r3, #20
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003230:	f107 0310 	add.w	r3, r7, #16
 8003234:	4619      	mov	r1, r3
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff fbc6 	bl	80029c8 <HAL_SD_GetCardCSD>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003242:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003246:	e021      	b.n	800328c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6819      	ldr	r1, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	2200      	movs	r2, #0
 8003254:	461c      	mov	r4, r3
 8003256:	4615      	mov	r5, r2
 8003258:	4622      	mov	r2, r4
 800325a:	462b      	mov	r3, r5
 800325c:	4608      	mov	r0, r1
 800325e:	f000 fc8d 	bl	8003b7c <SDMMC_CmdSelDesel>
 8003262:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <SD_InitCard+0x176>
  {
    return errorstate;
 800326a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800326c:	e00e      	b.n	800328c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681d      	ldr	r5, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	466c      	mov	r4, sp
 8003276:	f103 0210 	add.w	r2, r3, #16
 800327a:	ca07      	ldmia	r2, {r0, r1, r2}
 800327c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003280:	3304      	adds	r3, #4
 8003282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003284:	4628      	mov	r0, r5
 8003286:	f000 fad1 	bl	800382c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3740      	adds	r7, #64	@ 0x40
 8003290:	46bd      	mov	sp, r7
 8003292:	bdb0      	pop	{r4, r5, r7, pc}

08003294 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fc88 	bl	8003bc2 <SDMMC_CmdGoIdleState>
 80032b2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <SD_PowerON+0x2a>
  {
    return errorstate;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	e072      	b.n	80033a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fc9b 	bl	8003bfe <SDMMC_CmdOperCond>
 80032c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00d      	beq.n	80032ec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fc71 	bl	8003bc2 <SDMMC_CmdGoIdleState>
 80032e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	e05b      	b.n	80033a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d137      	bne.n	800336a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fc9b 	bl	8003c3c <SDMMC_CmdAppCommand>
 8003306:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d02d      	beq.n	800336a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800330e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003312:	e047      	b.n	80033a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fc8e 	bl	8003c3c <SDMMC_CmdAppCommand>
 8003320:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <SD_PowerON+0x98>
    {
      return errorstate;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	e03b      	b.n	80033a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	491e      	ldr	r1, [pc, #120]	@ (80033ac <SD_PowerON+0x118>)
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fca4 	bl	8003c80 <SDMMC_CmdAppOperCommand>
 8003338:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003340:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003344:	e02e      	b.n	80033a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fb09 	bl	8003964 <SDIO_GetResponse>
 8003352:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	0fdb      	lsrs	r3, r3, #31
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <SD_PowerON+0xcc>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <SD_PowerON+0xce>
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]

    count++;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	3301      	adds	r3, #1
 8003368:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003370:	4293      	cmp	r3, r2
 8003372:	d802      	bhi.n	800337a <SD_PowerON+0xe6>
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0cc      	beq.n	8003314 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003380:	4293      	cmp	r3, r2
 8003382:	d902      	bls.n	800338a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003384:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003388:	e00c      	b.n	80033a4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	645a      	str	r2, [r3, #68]	@ 0x44
 800339a:	e002      	b.n	80033a2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	c1100000 	.word	0xc1100000

080033b0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80033c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80033c4:	e018      	b.n	80033f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f000 fd18 	bl	8003e08 <SDMMC_CmdSendStatus>
 80033d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	e009      	b.n	80033f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 faba 	bl	8003964 <SDIO_GetResponse>
 80033f0:	4602      	mov	r2, r0
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	2300      	movs	r3, #0
 800340e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f000 faa4 	bl	8003964 <SDIO_GetResponse>
 800341c:	4603      	mov	r3, r0
 800341e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003422:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003426:	d102      	bne.n	800342e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003428:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800342c:	e02f      	b.n	800348e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f879 	bl	800352c <SD_FindSCR>
 800343a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	e023      	b.n	800348e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01c      	beq.n	800348a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	4619      	mov	r1, r3
 800345c:	4610      	mov	r0, r2
 800345e:	f000 fbed 	bl	8003c3c <SDMMC_CmdAppCommand>
 8003462:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	e00f      	b.n	800348e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2102      	movs	r1, #2
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fc26 	bl	8003cc6 <SDMMC_CmdBusWidth>
 800347a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	e003      	b.n	800348e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003486:	2300      	movs	r3, #0
 8003488:	e001      	b.n	800348e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800348a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b086      	sub	sp, #24
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fa59 	bl	8003964 <SDIO_GetResponse>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034bc:	d102      	bne.n	80034c4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80034be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034c2:	e02f      	b.n	8003524 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80034c4:	f107 030c 	add.w	r3, r7, #12
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f82e 	bl	800352c <SD_FindSCR>
 80034d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	e023      	b.n	8003524 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01c      	beq.n	8003520 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f000 fba2 	bl	8003c3c <SDMMC_CmdAppCommand>
 80034f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	e00f      	b.n	8003524 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fbdb 	bl	8003cc6 <SDMMC_CmdBusWidth>
 8003510:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	e003      	b.n	8003524 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800351c:	2300      	movs	r3, #0
 800351e:	e001      	b.n	8003524 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003520:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b08f      	sub	sp, #60	@ 0x3c
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003536:	f7fd fb73 	bl	8000c20 <HAL_GetTick>
 800353a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2108      	movs	r1, #8
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fa45 	bl	80039e2 <SDMMC_CmdBlockLength>
 8003558:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800355a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003562:	e0b9      	b.n	80036d8 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f000 fb63 	bl	8003c3c <SDMMC_CmdAppCommand>
 8003576:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <SD_FindSCR+0x56>
  {
    return errorstate;
 800357e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003580:	e0aa      	b.n	80036d8 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003588:	2308      	movs	r3, #8
 800358a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800358c:	2330      	movs	r3, #48	@ 0x30
 800358e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003590:	2302      	movs	r3, #2
 8003592:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003594:	2300      	movs	r3, #0
 8003596:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003598:	2301      	movs	r3, #1
 800359a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f107 0210 	add.w	r2, r7, #16
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f9ef 	bl	800398a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fbaa 	bl	8003d0a <SDMMC_CmdSendSCR>
 80035b6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80035b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d02a      	beq.n	8003614 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80035be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c0:	e08a      	b.n	80036d8 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00f      	beq.n	80035f0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	f107 0208 	add.w	r2, r7, #8
 80035dc:	18d4      	adds	r4, r2, r3
 80035de:	4608      	mov	r0, r1
 80035e0:	f000 f94f 	bl	8003882 <SDIO_ReadFIFO>
 80035e4:	4603      	mov	r3, r0
 80035e6:	6023      	str	r3, [r4, #0]
      index++;
 80035e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ea:	3301      	adds	r3, #1
 80035ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80035ee:	e006      	b.n	80035fe <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d012      	beq.n	8003624 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80035fe:	f7fd fb0f 	bl	8000c20 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d102      	bne.n	8003614 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800360e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003612:	e061      	b.n	80036d8 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800361a:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0cf      	beq.n	80035c2 <SD_FindSCR+0x96>
 8003622:	e000      	b.n	8003626 <SD_FindSCR+0xfa>
      break;
 8003624:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <SD_FindSCR+0x116>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2208      	movs	r2, #8
 8003648:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800364a:	2308      	movs	r3, #8
 800364c:	e044      	b.n	80036d8 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2202      	movs	r2, #2
 8003662:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003664:	2302      	movs	r3, #2
 8003666:	e037      	b.n	80036d8 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2220      	movs	r2, #32
 800367c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800367e:	2320      	movs	r3, #32
 8003680:	e02a      	b.n	80036d8 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f240 523a 	movw	r2, #1338	@ 0x53a
 800368a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	061a      	lsls	r2, r3, #24
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003698:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80036a2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	0e1b      	lsrs	r3, r3, #24
 80036a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80036aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ac:	601a      	str	r2, [r3, #0]
    scr++;
 80036ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b0:	3304      	adds	r3, #4
 80036b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	061a      	lsls	r2, r3, #24
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	021b      	lsls	r3, r3, #8
 80036bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80036c0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	0a1b      	lsrs	r3, r3, #8
 80036c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80036ca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	0e1b      	lsrs	r3, r3, #24
 80036d0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80036d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	373c      	adds	r7, #60	@ 0x3c
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd90      	pop	{r4, r7, pc}

080036e0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ec:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d03f      	beq.n	800377a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e033      	b.n	8003768 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f000 f8bc 	bl	8003882 <SDIO_ReadFIFO>
 800370a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	3301      	adds	r3, #1
 8003718:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	3b01      	subs	r3, #1
 800371e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	b2da      	uxtb	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	701a      	strb	r2, [r3, #0]
      tmp++;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3301      	adds	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	3b01      	subs	r3, #1
 8003734:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	3301      	adds	r3, #1
 8003744:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	3b01      	subs	r3, #1
 800374a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	0e1b      	lsrs	r3, r3, #24
 8003750:	b2da      	uxtb	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3301      	adds	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3b01      	subs	r3, #1
 8003760:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	3301      	adds	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2b07      	cmp	r3, #7
 800376c:	d9c8      	bls.n	8003700 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d043      	beq.n	8003824 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	e037      	b.n	8003812 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3301      	adds	r3, #1
 80037ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	021a      	lsls	r2, r3, #8
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3301      	adds	r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	041a      	lsls	r2, r3, #16
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3301      	adds	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	061a      	lsls	r2, r3, #24
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3301      	adds	r3, #1
 80037f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f107 0208 	add.w	r2, r7, #8
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f848 	bl	800389c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	3301      	adds	r3, #1
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b07      	cmp	r3, #7
 8003816:	d9c4      	bls.n	80037a2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8003824:	bf00      	nop
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800382c:	b084      	sub	sp, #16
 800382e:	b480      	push	{r7}
 8003830:	b085      	sub	sp, #20
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	f107 001c 	add.w	r0, r7, #28
 800383a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003842:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003844:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003846:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800384a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800384c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800384e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8003852:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8003856:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8003866:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	b004      	add	sp, #16
 8003880:	4770      	bx	lr

08003882 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2203      	movs	r2, #3
 80038ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0303 	and.w	r3, r3, #3
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003914:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800391a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003920:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003930:	f023 030f 	bic.w	r3, r3, #15
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	b2db      	uxtb	r3, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3314      	adds	r3, #20
 8003972:	461a      	mov	r2, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4413      	add	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
}  
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80039b0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80039b6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80039bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c8:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0

}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b088      	sub	sp, #32
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80039f0:	2310      	movs	r3, #16
 80039f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039f4:	2340      	movs	r3, #64	@ 0x40
 80039f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a02:	f107 0308 	add.w	r3, r7, #8
 8003a06:	4619      	mov	r1, r3
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff74 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a12:	2110      	movs	r1, #16
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fa19 	bl	8003e4c <SDMMC_GetCmdResp1>
 8003a1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b088      	sub	sp, #32
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003a34:	2311      	movs	r3, #17
 8003a36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a38:	2340      	movs	r3, #64	@ 0x40
 8003a3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a46:	f107 0308 	add.w	r3, r7, #8
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ff52 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a56:	2111      	movs	r1, #17
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f9f7 	bl	8003e4c <SDMMC_GetCmdResp1>
 8003a5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a60:	69fb      	ldr	r3, [r7, #28]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b088      	sub	sp, #32
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003a78:	2312      	movs	r3, #18
 8003a7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a7c:	2340      	movs	r3, #64	@ 0x40
 8003a7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a8a:	f107 0308 	add.w	r3, r7, #8
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ff30 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	2112      	movs	r1, #18
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f9d5 	bl	8003e4c <SDMMC_GetCmdResp1>
 8003aa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b088      	sub	sp, #32
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003abc:	2318      	movs	r3, #24
 8003abe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ac0:	2340      	movs	r3, #64	@ 0x40
 8003ac2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ac8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003acc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ace:	f107 0308 	add.w	r3, r7, #8
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff ff0e 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ade:	2118      	movs	r1, #24
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f9b3 	bl	8003e4c <SDMMC_GetCmdResp1>
 8003ae6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b088      	sub	sp, #32
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003b00:	2319      	movs	r3, #25
 8003b02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b04:	2340      	movs	r3, #64	@ 0x40
 8003b06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b12:	f107 0308 	add.w	r3, r7, #8
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff feec 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b22:	2119      	movs	r1, #25
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f991 	bl	8003e4c <SDMMC_GetCmdResp1>
 8003b2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003b44:	230c      	movs	r3, #12
 8003b46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b48:	2340      	movs	r3, #64	@ 0x40
 8003b4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b56:	f107 0308 	add.w	r3, r7, #8
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff feca 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003b62:	4a05      	ldr	r2, [pc, #20]	@ (8003b78 <SDMMC_CmdStopTransfer+0x40>)
 8003b64:	210c      	movs	r1, #12
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f970 	bl	8003e4c <SDMMC_GetCmdResp1>
 8003b6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	05f5e100 	.word	0x05f5e100

08003b7c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	@ 0x28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003b8c:	2307      	movs	r3, #7
 8003b8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b90:	2340      	movs	r3, #64	@ 0x40
 8003b92:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b9c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b9e:	f107 0310 	add.w	r3, r7, #16
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff fea6 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bae:	2107      	movs	r1, #7
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f94b 	bl	8003e4c <SDMMC_GetCmdResp1>
 8003bb6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3728      	adds	r7, #40	@ 0x28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b088      	sub	sp, #32
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003be0:	f107 0308 	add.w	r3, r7, #8
 8003be4:	4619      	mov	r1, r3
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff fe85 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fb65 	bl	80042bc <SDMMC_GetCmdError>
 8003bf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b088      	sub	sp, #32
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003c06:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8003c0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c10:	2340      	movs	r3, #64	@ 0x40
 8003c12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c1e:	f107 0308 	add.w	r3, r7, #8
 8003c22:	4619      	mov	r1, r3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff fe66 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 faf8 	bl	8004220 <SDMMC_GetCmdResp7>
 8003c30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c32:	69fb      	ldr	r3, [r7, #28]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003c4a:	2337      	movs	r3, #55	@ 0x37
 8003c4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c4e:	2340      	movs	r3, #64	@ 0x40
 8003c50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c5c:	f107 0308 	add.w	r3, r7, #8
 8003c60:	4619      	mov	r1, r3
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff fe47 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6c:	2137      	movs	r1, #55	@ 0x37
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f8ec 	bl	8003e4c <SDMMC_GetCmdResp1>
 8003c74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c76:	69fb      	ldr	r3, [r7, #28]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3720      	adds	r7, #32
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003c96:	2329      	movs	r3, #41	@ 0x29
 8003c98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c9a:	2340      	movs	r3, #64	@ 0x40
 8003c9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ca6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ca8:	f107 0308 	add.w	r3, r7, #8
 8003cac:	4619      	mov	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff fe21 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f9ff 	bl	80040b8 <SDMMC_GetCmdResp3>
 8003cba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b088      	sub	sp, #32
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003cd4:	2306      	movs	r3, #6
 8003cd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cd8:	2340      	movs	r3, #64	@ 0x40
 8003cda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ce0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ce4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	4619      	mov	r1, r3
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff fe02 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf6:	2106      	movs	r1, #6
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f8a7 	bl	8003e4c <SDMMC_GetCmdResp1>
 8003cfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d00:	69fb      	ldr	r3, [r7, #28]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b088      	sub	sp, #32
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003d16:	2333      	movs	r3, #51	@ 0x33
 8003d18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d1a:	2340      	movs	r3, #64	@ 0x40
 8003d1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d28:	f107 0308 	add.w	r3, r7, #8
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff fde1 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d38:	2133      	movs	r1, #51	@ 0x33
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f886 	bl	8003e4c <SDMMC_GetCmdResp1>
 8003d40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d42:	69fb      	ldr	r3, [r7, #28]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003d5c:	23c0      	movs	r3, #192	@ 0xc0
 8003d5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d6a:	f107 0308 	add.w	r3, r7, #8
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff fdc0 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f956 	bl	8004028 <SDMMC_GetCmdResp2>
 8003d7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3720      	adds	r7, #32
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003d96:	2309      	movs	r3, #9
 8003d98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003d9a:	23c0      	movs	r3, #192	@ 0xc0
 8003d9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003da2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003da6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003da8:	f107 0308 	add.w	r3, r7, #8
 8003dac:	4619      	mov	r1, r3
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff fda1 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f937 	bl	8004028 <SDMMC_GetCmdResp2>
 8003dba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b088      	sub	sp, #32
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dd8:	2340      	movs	r3, #64	@ 0x40
 8003dda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003de0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003de4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003de6:	f107 0308 	add.w	r3, r7, #8
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fd82 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	2103      	movs	r1, #3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f99c 	bl	8004134 <SDMMC_GetCmdResp6>
 8003dfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3720      	adds	r7, #32
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003e16:	230d      	movs	r3, #13
 8003e18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e1a:	2340      	movs	r3, #64	@ 0x40
 8003e1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e28:	f107 0308 	add.w	r3, r7, #8
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff fd61 	bl	80038f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e38:	210d      	movs	r1, #13
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f806 	bl	8003e4c <SDMMC_GetCmdResp1>
 8003e40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e42:	69fb      	ldr	r3, [r7, #28]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3720      	adds	r7, #32
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	460b      	mov	r3, r1
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003e5a:	4b70      	ldr	r3, [pc, #448]	@ (800401c <SDMMC_GetCmdResp1+0x1d0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a70      	ldr	r2, [pc, #448]	@ (8004020 <SDMMC_GetCmdResp1+0x1d4>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	0a5a      	lsrs	r2, r3, #9
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
 8003e6c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	1e5a      	subs	r2, r3, #1
 8003e72:	61fa      	str	r2, [r7, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003e7c:	e0c9      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e82:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0ef      	beq.n	8003e6e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1ea      	bne.n	8003e6e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d004      	beq.n	8003eae <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003eaa:	2304      	movs	r3, #4
 8003eac:	e0b1      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0a6      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	22c5      	movs	r2, #197	@ 0xc5
 8003ec8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f7ff fd3d 	bl	800394a <SDIO_GetCommandResponse>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	7afb      	ldrb	r3, [r7, #11]
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d001      	beq.n	8003ede <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e099      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003ede:	2100      	movs	r1, #0
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff fd3f 	bl	8003964 <SDIO_GetResponse>
 8003ee6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4b4e      	ldr	r3, [pc, #312]	@ (8004024 <SDMMC_GetCmdResp1+0x1d8>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e08d      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	da02      	bge.n	8003f02 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003efc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f00:	e087      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003f0c:	2340      	movs	r3, #64	@ 0x40
 8003f0e:	e080      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003f1a:	2380      	movs	r3, #128	@ 0x80
 8003f1c:	e079      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003f28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f2c:	e071      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f3c:	e069      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003f48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f4c:	e061      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003f58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f5c:	e059      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f6c:	e051      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003f78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f7c:	e049      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003f88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f8c:	e041      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003f98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f9c:	e039      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003fa8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fac:	e031      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003fb8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003fbc:	e029      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003fc8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003fcc:	e021      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003fd8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003fdc:	e019      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003fe8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003fec:	e011      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003ff8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003ffc:	e009      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004008:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800400c:	e001      	b.n	8004012 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800400e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3720      	adds	r7, #32
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000000 	.word	0x20000000
 8004020:	10624dd3 	.word	0x10624dd3
 8004024:	fdffe008 	.word	0xfdffe008

08004028 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004030:	4b1f      	ldr	r3, [pc, #124]	@ (80040b0 <SDMMC_GetCmdResp2+0x88>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1f      	ldr	r2, [pc, #124]	@ (80040b4 <SDMMC_GetCmdResp2+0x8c>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0a5b      	lsrs	r3, r3, #9
 800403c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004040:	fb02 f303 	mul.w	r3, r2, r3
 8004044:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1e5a      	subs	r2, r3, #1
 800404a:	60fa      	str	r2, [r7, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d102      	bne.n	8004056 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004050:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004054:	e026      	b.n	80040a4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800405a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0ef      	beq.n	8004046 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1ea      	bne.n	8004046 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d004      	beq.n	8004086 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2204      	movs	r2, #4
 8004080:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004082:	2304      	movs	r3, #4
 8004084:	e00e      	b.n	80040a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d004      	beq.n	800409c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004098:	2301      	movs	r3, #1
 800409a:	e003      	b.n	80040a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	22c5      	movs	r2, #197	@ 0xc5
 80040a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	20000000 	.word	0x20000000
 80040b4:	10624dd3 	.word	0x10624dd3

080040b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80040c0:	4b1a      	ldr	r3, [pc, #104]	@ (800412c <SDMMC_GetCmdResp3+0x74>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004130 <SDMMC_GetCmdResp3+0x78>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	0a5b      	lsrs	r3, r3, #9
 80040cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d0:	fb02 f303 	mul.w	r3, r2, r3
 80040d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1e5a      	subs	r2, r3, #1
 80040da:	60fa      	str	r2, [r7, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80040e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80040e4:	e01b      	b.n	800411e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ef      	beq.n	80040d6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ea      	bne.n	80040d6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2204      	movs	r2, #4
 8004110:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004112:	2304      	movs	r3, #4
 8004114:	e003      	b.n	800411e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	22c5      	movs	r2, #197	@ 0xc5
 800411a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20000000 	.word	0x20000000
 8004130:	10624dd3 	.word	0x10624dd3

08004134 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	460b      	mov	r3, r1
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004142:	4b35      	ldr	r3, [pc, #212]	@ (8004218 <SDMMC_GetCmdResp6+0xe4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a35      	ldr	r2, [pc, #212]	@ (800421c <SDMMC_GetCmdResp6+0xe8>)
 8004148:	fba2 2303 	umull	r2, r3, r2, r3
 800414c:	0a5b      	lsrs	r3, r3, #9
 800414e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004152:	fb02 f303 	mul.w	r3, r2, r3
 8004156:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	1e5a      	subs	r2, r3, #1
 800415c:	61fa      	str	r2, [r7, #28]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004162:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004166:	e052      	b.n	800420e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800416c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0ef      	beq.n	8004158 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1ea      	bne.n	8004158 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2204      	movs	r2, #4
 8004192:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004194:	2304      	movs	r3, #4
 8004196:	e03a      	b.n	800420e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2201      	movs	r2, #1
 80041a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e02f      	b.n	800420e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7ff fbcb 	bl	800394a <SDIO_GetCommandResponse>
 80041b4:	4603      	mov	r3, r0
 80041b6:	461a      	mov	r2, r3
 80041b8:	7afb      	ldrb	r3, [r7, #11]
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d001      	beq.n	80041c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041be:	2301      	movs	r3, #1
 80041c0:	e025      	b.n	800420e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	22c5      	movs	r2, #197	@ 0xc5
 80041c6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80041c8:	2100      	movs	r1, #0
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7ff fbca 	bl	8003964 <SDIO_GetResponse>
 80041d0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	0c1b      	lsrs	r3, r3, #16
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e011      	b.n	800420e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80041f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041f8:	e009      	b.n	800420e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004204:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004208:	e001      	b.n	800420e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800420a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800420e:	4618      	mov	r0, r3
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000000 	.word	0x20000000
 800421c:	10624dd3 	.word	0x10624dd3

08004220 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004228:	4b22      	ldr	r3, [pc, #136]	@ (80042b4 <SDMMC_GetCmdResp7+0x94>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a22      	ldr	r2, [pc, #136]	@ (80042b8 <SDMMC_GetCmdResp7+0x98>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	0a5b      	lsrs	r3, r3, #9
 8004234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004238:	fb02 f303 	mul.w	r3, r2, r3
 800423c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1e5a      	subs	r2, r3, #1
 8004242:	60fa      	str	r2, [r7, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004248:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800424c:	e02c      	b.n	80042a8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004252:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0ef      	beq.n	800423e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1ea      	bne.n	800423e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2204      	movs	r2, #4
 8004278:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800427a:	2304      	movs	r3, #4
 800427c:	e014      	b.n	80042a8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004290:	2301      	movs	r3, #1
 8004292:	e009      	b.n	80042a8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2240      	movs	r2, #64	@ 0x40
 80042a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80042a6:	2300      	movs	r3, #0
  
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	20000000 	.word	0x20000000
 80042b8:	10624dd3 	.word	0x10624dd3

080042bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042c4:	4b11      	ldr	r3, [pc, #68]	@ (800430c <SDMMC_GetCmdError+0x50>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a11      	ldr	r2, [pc, #68]	@ (8004310 <SDMMC_GetCmdError+0x54>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	0a5b      	lsrs	r3, r3, #9
 80042d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d4:	fb02 f303 	mul.w	r3, r2, r3
 80042d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1e5a      	subs	r2, r3, #1
 80042de:	60fa      	str	r2, [r7, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80042e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80042e8:	e009      	b.n	80042fe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f1      	beq.n	80042da <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	22c5      	movs	r2, #197	@ 0xc5
 80042fa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000000 	.word	0x20000000
 8004310:	10624dd3 	.word	0x10624dd3

08004314 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004318:	4904      	ldr	r1, [pc, #16]	@ (800432c <MX_FATFS_Init+0x18>)
 800431a:	4805      	ldr	r0, [pc, #20]	@ (8004330 <MX_FATFS_Init+0x1c>)
 800431c:	f000 ff04 	bl	8005128 <FATFS_LinkDriver>
 8004320:	4603      	mov	r3, r0
 8004322:	461a      	mov	r2, r3
 8004324:	4b03      	ldr	r3, [pc, #12]	@ (8004334 <MX_FATFS_Init+0x20>)
 8004326:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004328:	bf00      	nop
 800432a:	bd80      	pop	{r7, pc}
 800432c:	200003a8 	.word	0x200003a8
 8004330:	080051d4 	.word	0x080051d4
 8004334:	200003a4 	.word	0x200003a4

08004338 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004342:	f000 f896 	bl	8004472 <BSP_SD_IsDetected>
 8004346:	4603      	mov	r3, r0
 8004348:	2b01      	cmp	r3, #1
 800434a:	d001      	beq.n	8004350 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e012      	b.n	8004376 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004350:	480b      	ldr	r0, [pc, #44]	@ (8004380 <BSP_SD_Init+0x48>)
 8004352:	f7fd ff39 	bl	80021c8 <HAL_SD_Init>
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d109      	bne.n	8004374 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004360:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004364:	4806      	ldr	r0, [pc, #24]	@ (8004380 <BSP_SD_Init+0x48>)
 8004366:	f7fe fcff 	bl	8002d68 <HAL_SD_ConfigWideBusOperation>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004374:	79fb      	ldrb	r3, [r7, #7]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000028 	.word	0x20000028

08004384 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	68f9      	ldr	r1, [r7, #12]
 800439a:	4806      	ldr	r0, [pc, #24]	@ (80043b4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800439c:	f7fd ffbc 	bl	8002318 <HAL_SD_ReadBlocks_DMA>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80043aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000028 	.word	0x20000028

080043b8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	68f9      	ldr	r1, [r7, #12]
 80043ce:	4806      	ldr	r0, [pc, #24]	@ (80043e8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80043d0:	f7fe f884 	bl	80024dc <HAL_SD_WriteBlocks_DMA>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000028 	.word	0x20000028

080043ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80043f0:	4805      	ldr	r0, [pc, #20]	@ (8004408 <BSP_SD_GetCardState+0x1c>)
 80043f2:	f7fe fd53 	bl	8002e9c <HAL_SD_GetCardState>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	bf14      	ite	ne
 80043fc:	2301      	movne	r3, #1
 80043fe:	2300      	moveq	r3, #0
 8004400:	b2db      	uxtb	r3, r3
}
 8004402:	4618      	mov	r0, r3
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000028 	.word	0x20000028

0800440c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4803      	ldr	r0, [pc, #12]	@ (8004424 <BSP_SD_GetCardInfo+0x18>)
 8004418:	f7fe fc7a 	bl	8002d10 <HAL_SD_GetCardInfo>
}
 800441c:	bf00      	nop
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000028 	.word	0x20000028

08004428 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8004430:	f000 f818 	bl	8004464 <BSP_SD_AbortCallback>
}
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8004444:	f000 f98c 	bl	8004760 <BSP_SD_WriteCpltCallback>
}
 8004448:	bf00      	nop
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004458:	f000 f98e 	bl	8004778 <BSP_SD_ReadCpltCallback>
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0

}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004478:	2301      	movs	r3, #1
 800447a:	71fb      	strb	r3, [r7, #7]
  return status; // ------------ Manually added --------------------------- //
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	b2db      	uxtb	r3, r3
//  {
//    status = SD_NOT_PRESENT;
//  }
//
//  return status;
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8004494:	f7fc fbc4 	bl	8000c20 <HAL_GetTick>
 8004498:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800449a:	e006      	b.n	80044aa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800449c:	f7ff ffa6 	bl	80043ec <BSP_SD_GetCardState>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e009      	b.n	80044be <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80044aa:	f7fc fbb9 	bl	8000c20 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d8f0      	bhi.n	800449c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80044ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80044d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <SD_CheckStatus+0x38>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80044d8:	f7ff ff88 	bl	80043ec <BSP_SD_GetCardState>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80044e2:	4b07      	ldr	r3, [pc, #28]	@ (8004500 <SD_CheckStatus+0x38>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	4b04      	ldr	r3, [pc, #16]	@ (8004500 <SD_CheckStatus+0x38>)
 80044f0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80044f2:	4b03      	ldr	r3, [pc, #12]	@ (8004500 <SD_CheckStatus+0x38>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	b2db      	uxtb	r3, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000009 	.word	0x20000009

08004504 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800450e:	f7ff ff13 	bl	8004338 <BSP_SD_Init>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d107      	bne.n	8004528 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ffd4 	bl	80044c8 <SD_CheckStatus>
 8004520:	4603      	mov	r3, r0
 8004522:	461a      	mov	r2, r3
 8004524:	4b04      	ldr	r3, [pc, #16]	@ (8004538 <SD_initialize+0x34>)
 8004526:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004528:	4b03      	ldr	r3, [pc, #12]	@ (8004538 <SD_initialize+0x34>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	b2db      	uxtb	r3, r3
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000009 	.word	0x20000009

0800453c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff ffbd 	bl	80044c8 <SD_CheckStatus>
 800454e:	4603      	mov	r3, r0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	4603      	mov	r3, r0
 8004566:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800456c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8004570:	f7ff ff8c 	bl	800448c <SD_CheckStatusWithTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	da01      	bge.n	800457e <SD_read+0x26>
  {
    return res;
 800457a:	7dfb      	ldrb	r3, [r7, #23]
 800457c:	e03b      	b.n	80045f6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	68b8      	ldr	r0, [r7, #8]
 8004584:	f7ff fefe 	bl	8004384 <BSP_SD_ReadBlocks_DMA>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d132      	bne.n	80045f4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800458e:	4b1c      	ldr	r3, [pc, #112]	@ (8004600 <SD_read+0xa8>)
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004594:	f7fc fb44 	bl	8000c20 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800459a:	bf00      	nop
 800459c:	4b18      	ldr	r3, [pc, #96]	@ (8004600 <SD_read+0xa8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d108      	bne.n	80045b6 <SD_read+0x5e>
 80045a4:	f7fc fb3c 	bl	8000c20 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f247 522f 	movw	r2, #29999	@ 0x752f
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d9f2      	bls.n	800459c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80045b6:	4b12      	ldr	r3, [pc, #72]	@ (8004600 <SD_read+0xa8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d102      	bne.n	80045c4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	75fb      	strb	r3, [r7, #23]
 80045c2:	e017      	b.n	80045f4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80045c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <SD_read+0xa8>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80045ca:	f7fc fb29 	bl	8000c20 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80045d0:	e007      	b.n	80045e2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80045d2:	f7ff ff0b 	bl	80043ec <BSP_SD_GetCardState>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d102      	bne.n	80045e2 <SD_read+0x8a>
          {
            res = RES_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80045e0:	e008      	b.n	80045f4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80045e2:	f7fc fb1d 	bl	8000c20 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f247 522f 	movw	r2, #29999	@ 0x752f
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d9ee      	bls.n	80045d2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	200003b0 	.word	0x200003b0

08004604 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	4603      	mov	r3, r0
 8004612:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004618:	4b24      	ldr	r3, [pc, #144]	@ (80046ac <SD_write+0xa8>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800461e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8004622:	f7ff ff33 	bl	800448c <SD_CheckStatusWithTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	da01      	bge.n	8004630 <SD_write+0x2c>
  {
    return res;
 800462c:	7dfb      	ldrb	r3, [r7, #23]
 800462e:	e038      	b.n	80046a2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	68b8      	ldr	r0, [r7, #8]
 8004636:	f7ff febf 	bl	80043b8 <BSP_SD_WriteBlocks_DMA>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d12f      	bne.n	80046a0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004640:	f7fc faee 	bl	8000c20 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004646:	bf00      	nop
 8004648:	4b18      	ldr	r3, [pc, #96]	@ (80046ac <SD_write+0xa8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d108      	bne.n	8004662 <SD_write+0x5e>
 8004650:	f7fc fae6 	bl	8000c20 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800465e:	4293      	cmp	r3, r2
 8004660:	d9f2      	bls.n	8004648 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8004662:	4b12      	ldr	r3, [pc, #72]	@ (80046ac <SD_write+0xa8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d102      	bne.n	8004670 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	75fb      	strb	r3, [r7, #23]
 800466e:	e017      	b.n	80046a0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004670:	4b0e      	ldr	r3, [pc, #56]	@ (80046ac <SD_write+0xa8>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004676:	f7fc fad3 	bl	8000c20 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800467c:	e007      	b.n	800468e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800467e:	f7ff feb5 	bl	80043ec <BSP_SD_GetCardState>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d102      	bne.n	800468e <SD_write+0x8a>
          {
            res = RES_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	75fb      	strb	r3, [r7, #23]
            break;
 800468c:	e008      	b.n	80046a0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800468e:	f7fc fac7 	bl	8000c20 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f247 522f 	movw	r2, #29999	@ 0x752f
 800469c:	4293      	cmp	r3, r2
 800469e:	d9ee      	bls.n	800467e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	200003ac 	.word	0x200003ac

080046b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08c      	sub	sp, #48	@ 0x30
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	603a      	str	r2, [r7, #0]
 80046ba:	71fb      	strb	r3, [r7, #7]
 80046bc:	460b      	mov	r3, r1
 80046be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80046c6:	4b25      	ldr	r3, [pc, #148]	@ (800475c <SD_ioctl+0xac>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <SD_ioctl+0x28>
 80046d4:	2303      	movs	r3, #3
 80046d6:	e03c      	b.n	8004752 <SD_ioctl+0xa2>

  switch (cmd)
 80046d8:	79bb      	ldrb	r3, [r7, #6]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d834      	bhi.n	8004748 <SD_ioctl+0x98>
 80046de:	a201      	add	r2, pc, #4	@ (adr r2, 80046e4 <SD_ioctl+0x34>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	080046fd 	.word	0x080046fd
 80046ec:	08004715 	.word	0x08004715
 80046f0:	0800472f 	.word	0x0800472f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80046fa:	e028      	b.n	800474e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80046fc:	f107 030c 	add.w	r3, r7, #12
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff fe83 	bl	800440c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004712:	e01c      	b.n	800474e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004714:	f107 030c 	add.w	r3, r7, #12
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff fe77 	bl	800440c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004720:	b29a      	uxth	r2, r3
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800472c:	e00f      	b.n	800474e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800472e:	f107 030c 	add.w	r3, r7, #12
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fe6a 	bl	800440c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473a:	0a5a      	lsrs	r2, r3, #9
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004746:	e002      	b.n	800474e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004748:	2304      	movs	r3, #4
 800474a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800474e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004752:	4618      	mov	r0, r3
 8004754:	3730      	adds	r7, #48	@ 0x30
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000009 	.word	0x20000009

08004760 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8004764:	4b03      	ldr	r3, [pc, #12]	@ (8004774 <BSP_SD_WriteCpltCallback+0x14>)
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]
}
 800476a:	bf00      	nop
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	200003ac 	.word	0x200003ac

08004778 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800477c:	4b03      	ldr	r3, [pc, #12]	@ (800478c <BSP_SD_ReadCpltCallback+0x14>)
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]
}
 8004782:	bf00      	nop
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	200003b0 	.word	0x200003b0

08004790 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	4a08      	ldr	r2, [pc, #32]	@ (80047c0 <disk_status+0x30>)
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	79fa      	ldrb	r2, [r7, #7]
 80047a8:	4905      	ldr	r1, [pc, #20]	@ (80047c0 <disk_status+0x30>)
 80047aa:	440a      	add	r2, r1
 80047ac:	7a12      	ldrb	r2, [r2, #8]
 80047ae:	4610      	mov	r0, r2
 80047b0:	4798      	blx	r3
 80047b2:	4603      	mov	r3, r0
 80047b4:	73fb      	strb	r3, [r7, #15]
//  return stat;
	return 0x04;
 80047b6:	2304      	movs	r3, #4
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	200003dc 	.word	0x200003dc

080047c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	4a0e      	ldr	r2, [pc, #56]	@ (8004810 <disk_initialize+0x4c>)
 80047d6:	5cd3      	ldrb	r3, [r2, r3]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d114      	bne.n	8004806 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	4a0c      	ldr	r2, [pc, #48]	@ (8004810 <disk_initialize+0x4c>)
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	79fa      	ldrb	r2, [r7, #7]
 80047ea:	4909      	ldr	r1, [pc, #36]	@ (8004810 <disk_initialize+0x4c>)
 80047ec:	440a      	add	r2, r1
 80047ee:	7a12      	ldrb	r2, [r2, #8]
 80047f0:	4610      	mov	r0, r2
 80047f2:	4798      	blx	r3
 80047f4:	4603      	mov	r3, r0
 80047f6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d103      	bne.n	8004806 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	4a03      	ldr	r2, [pc, #12]	@ (8004810 <disk_initialize+0x4c>)
 8004802:	2101      	movs	r1, #1
 8004804:	54d1      	strb	r1, [r2, r3]
    }
  }
//  stat = 0x04;
  return 0x04;
 8004806:	2304      	movs	r3, #4
//	return 0;
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	200003dc 	.word	0x200003dc

08004814 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004814:	b590      	push	{r4, r7, lr}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	4603      	mov	r3, r0
 8004822:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	4a0a      	ldr	r2, [pc, #40]	@ (8004850 <disk_read+0x3c>)
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	689c      	ldr	r4, [r3, #8]
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	4a07      	ldr	r2, [pc, #28]	@ (8004850 <disk_read+0x3c>)
 8004834:	4413      	add	r3, r2
 8004836:	7a18      	ldrb	r0, [r3, #8]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	47a0      	blx	r4
 8004840:	4603      	mov	r3, r0
 8004842:	75fb      	strb	r3, [r7, #23]
  return res;
 8004844:	7dfb      	ldrb	r3, [r7, #23]
}
 8004846:	4618      	mov	r0, r3
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	bd90      	pop	{r4, r7, pc}
 800484e:	bf00      	nop
 8004850:	200003dc 	.word	0x200003dc

08004854 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	4603      	mov	r3, r0
 8004862:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	4a0a      	ldr	r2, [pc, #40]	@ (8004890 <disk_write+0x3c>)
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	68dc      	ldr	r4, [r3, #12]
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	4a07      	ldr	r2, [pc, #28]	@ (8004890 <disk_write+0x3c>)
 8004874:	4413      	add	r3, r2
 8004876:	7a18      	ldrb	r0, [r3, #8]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	47a0      	blx	r4
 8004880:	4603      	mov	r3, r0
 8004882:	75fb      	strb	r3, [r7, #23]
  return res;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
}
 8004886:	4618      	mov	r0, r3
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	bd90      	pop	{r4, r7, pc}
 800488e:	bf00      	nop
 8004890:	200003dc 	.word	0x200003dc

08004894 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3301      	adds	r3, #1
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80048a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	b21a      	sxth	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	b21b      	sxth	r3, r3
 80048b2:	4313      	orrs	r3, r2
 80048b4:	b21b      	sxth	r3, r3
 80048b6:	81fb      	strh	r3, [r7, #14]
	return rv;
 80048b8:	89fb      	ldrh	r3, [r7, #14]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3303      	adds	r3, #3
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	3202      	adds	r2, #2
 80048de:	7812      	ldrb	r2, [r2, #0]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	3201      	adds	r2, #1
 80048ec:	7812      	ldrb	r2, [r2, #0]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	7812      	ldrb	r2, [r2, #0]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
	return rv;
 80048fe:	68fb      	ldr	r3, [r7, #12]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	e010      	b.n	800493c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800491a:	4a0d      	ldr	r2, [pc, #52]	@ (8004950 <clear_lock+0x44>)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	4413      	add	r3, r2
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	429a      	cmp	r2, r3
 8004928:	d105      	bne.n	8004936 <clear_lock+0x2a>
 800492a:	4a09      	ldr	r2, [pc, #36]	@ (8004950 <clear_lock+0x44>)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	4413      	add	r3, r2
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3301      	adds	r3, #1
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d9eb      	bls.n	800491a <clear_lock+0xe>
	}
}
 8004942:	bf00      	nop
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	200003bc 	.word	0x200003bc

08004954 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	78db      	ldrb	r3, [r3, #3]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d034      	beq.n	80049d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	7858      	ldrb	r0, [r3, #1]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004978:	2301      	movs	r3, #1
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	f7ff ff6a 	bl	8004854 <disk_write>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004986:	2301      	movs	r3, #1
 8004988:	73fb      	strb	r3, [r7, #15]
 800498a:	e022      	b.n	80049d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	1ad2      	subs	r2, r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d217      	bcs.n	80049d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	789b      	ldrb	r3, [r3, #2]
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	e010      	b.n	80049cc <sync_window+0x78>
					wsect += fs->fsize;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4413      	add	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	7858      	ldrb	r0, [r3, #1]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80049be:	2301      	movs	r3, #1
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	f7ff ff47 	bl	8004854 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d8eb      	bhi.n	80049aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d01b      	beq.n	8004a2c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff ffad 	bl	8004954 <sync_window>
 80049fa:	4603      	mov	r3, r0
 80049fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d113      	bne.n	8004a2c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	7858      	ldrb	r0, [r3, #1]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004a0e:	2301      	movs	r3, #1
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	f7ff feff 	bl	8004814 <disk_read>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d004      	beq.n	8004a26 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a20:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b087      	sub	sp, #28
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a42:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d031      	beq.n	8004ab0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	e002      	b.n	8004a5a <get_ldnumber+0x24>
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	3301      	adds	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	d903      	bls.n	8004a6a <get_ldnumber+0x34>
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b3a      	cmp	r3, #58	@ 0x3a
 8004a68:	d1f4      	bne.n	8004a54 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b3a      	cmp	r3, #58	@ 0x3a
 8004a70:	d11c      	bne.n	8004aac <get_ldnumber+0x76>
			tp = *path;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	60fa      	str	r2, [r7, #12]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	3b30      	subs	r3, #48	@ 0x30
 8004a82:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b09      	cmp	r3, #9
 8004a88:	d80e      	bhi.n	8004aa8 <get_ldnumber+0x72>
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d10a      	bne.n	8004aa8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d107      	bne.n	8004aa8 <get_ldnumber+0x72>
					vol = (int)i;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	e002      	b.n	8004ab2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004aac:	2300      	movs	r3, #0
 8004aae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004ab0:	693b      	ldr	r3, [r7, #16]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	70da      	strb	r2, [r3, #3]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004ad8:	6839      	ldr	r1, [r7, #0]
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff ff7e 	bl	80049dc <move_window>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <check_fs+0x2a>
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	e038      	b.n	8004b5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3330      	adds	r3, #48	@ 0x30
 8004aee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fece 	bl	8004894 <ld_word>
 8004af8:	4603      	mov	r3, r0
 8004afa:	461a      	mov	r2, r3
 8004afc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d001      	beq.n	8004b08 <check_fs+0x48>
 8004b04:	2303      	movs	r3, #3
 8004b06:	e029      	b.n	8004b5c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b0e:	2be9      	cmp	r3, #233	@ 0xe9
 8004b10:	d009      	beq.n	8004b26 <check_fs+0x66>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b18:	2beb      	cmp	r3, #235	@ 0xeb
 8004b1a:	d11e      	bne.n	8004b5a <check_fs+0x9a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004b22:	2b90      	cmp	r3, #144	@ 0x90
 8004b24:	d119      	bne.n	8004b5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3330      	adds	r3, #48	@ 0x30
 8004b2a:	3336      	adds	r3, #54	@ 0x36
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff feca 	bl	80048c6 <ld_dword>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b38:	4a0a      	ldr	r2, [pc, #40]	@ (8004b64 <check_fs+0xa4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d101      	bne.n	8004b42 <check_fs+0x82>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e00c      	b.n	8004b5c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3330      	adds	r3, #48	@ 0x30
 8004b46:	3352      	adds	r3, #82	@ 0x52
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff febc 	bl	80048c6 <ld_dword>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4a05      	ldr	r2, [pc, #20]	@ (8004b68 <check_fs+0xa8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d101      	bne.n	8004b5a <check_fs+0x9a>
 8004b56:	2300      	movs	r3, #0
 8004b58:	e000      	b.n	8004b5c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004b5a:	2302      	movs	r3, #2
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	00544146 	.word	0x00544146
 8004b68:	33544146 	.word	0x33544146

08004b6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b096      	sub	sp, #88	@ 0x58
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	4613      	mov	r3, r2
 8004b78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff ff58 	bl	8004a36 <get_ldnumber>
 8004b86:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	da01      	bge.n	8004b92 <find_volume+0x26>
 8004b8e:	230b      	movs	r3, #11
 8004b90:	e22d      	b.n	8004fee <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004b92:	4aa1      	ldr	r2, [pc, #644]	@ (8004e18 <find_volume+0x2ac>)
 8004b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <find_volume+0x3a>
 8004ba2:	230c      	movs	r3, #12
 8004ba4:	e223      	b.n	8004fee <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004baa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	f023 0301 	bic.w	r3, r3, #1
 8004bb2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01a      	beq.n	8004bf2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff fde5 	bl	8004790 <disk_status>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004bcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10c      	bne.n	8004bf2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <find_volume+0x82>
 8004bde:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004bea:	230a      	movs	r3, #10
 8004bec:	e1ff      	b.n	8004fee <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e1fd      	b.n	8004fee <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c02:	785b      	ldrb	r3, [r3, #1]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fddd 	bl	80047c4 <disk_initialize>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004c10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e1e6      	b.n	8004fee <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <find_volume+0xca>
 8004c26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004c32:	230a      	movs	r3, #10
 8004c34:	e1db      	b.n	8004fee <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004c3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004c3c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c3e:	f7ff ff3f 	bl	8004ac0 <check_fs>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004c48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d149      	bne.n	8004ce4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004c50:	2300      	movs	r3, #0
 8004c52:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c54:	e01e      	b.n	8004c94 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004c64:	4413      	add	r3, r2
 8004c66:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d006      	beq.n	8004c80 <find_volume+0x114>
 8004c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c74:	3308      	adds	r3, #8
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff fe25 	bl	80048c6 <ld_dword>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	e000      	b.n	8004c82 <find_volume+0x116>
 8004c80:	2200      	movs	r2, #0
 8004c82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	3358      	adds	r3, #88	@ 0x58
 8004c88:	443b      	add	r3, r7
 8004c8a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c90:	3301      	adds	r3, #1
 8004c92:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d9dd      	bls.n	8004c56 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <find_volume+0x13e>
 8004ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	3358      	adds	r3, #88	@ 0x58
 8004cb0:	443b      	add	r3, r7
 8004cb2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004cb6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004cb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <find_volume+0x15e>
 8004cbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004cc0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004cc2:	f7ff fefd 	bl	8004ac0 <check_fs>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	e000      	b.n	8004ccc <find_volume+0x160>
 8004cca:	2303      	movs	r3, #3
 8004ccc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004cd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d905      	bls.n	8004ce4 <find_volume+0x178>
 8004cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cda:	3301      	adds	r3, #1
 8004cdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d9e2      	bls.n	8004caa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004ce4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d101      	bne.n	8004cf0 <find_volume+0x184>
 8004cec:	2301      	movs	r3, #1
 8004cee:	e17e      	b.n	8004fee <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004cf0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d901      	bls.n	8004cfc <find_volume+0x190>
 8004cf8:	230d      	movs	r3, #13
 8004cfa:	e178      	b.n	8004fee <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfe:	3330      	adds	r3, #48	@ 0x30
 8004d00:	330b      	adds	r3, #11
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff fdc6 	bl	8004894 <ld_word>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d0e:	d001      	beq.n	8004d14 <find_volume+0x1a8>
 8004d10:	230d      	movs	r3, #13
 8004d12:	e16c      	b.n	8004fee <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d16:	3330      	adds	r3, #48	@ 0x30
 8004d18:	3316      	adds	r3, #22
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff fdba 	bl	8004894 <ld_word>
 8004d20:	4603      	mov	r3, r0
 8004d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <find_volume+0x1cc>
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2c:	3330      	adds	r3, #48	@ 0x30
 8004d2e:	3324      	adds	r3, #36	@ 0x24
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff fdc8 	bl	80048c6 <ld_dword>
 8004d36:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8004d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d3c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d40:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8004d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d46:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4a:	789b      	ldrb	r3, [r3, #2]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d005      	beq.n	8004d5c <find_volume+0x1f0>
 8004d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d52:	789b      	ldrb	r3, [r3, #2]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d001      	beq.n	8004d5c <find_volume+0x1f0>
 8004d58:	230d      	movs	r3, #13
 8004d5a:	e148      	b.n	8004fee <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d5e:	789b      	ldrb	r3, [r3, #2]
 8004d60:	461a      	mov	r2, r3
 8004d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d70:	461a      	mov	r2, r3
 8004d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d74:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d78:	895b      	ldrh	r3, [r3, #10]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <find_volume+0x224>
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d80:	895b      	ldrh	r3, [r3, #10]
 8004d82:	461a      	mov	r2, r3
 8004d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d86:	895b      	ldrh	r3, [r3, #10]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <find_volume+0x228>
 8004d90:	230d      	movs	r3, #13
 8004d92:	e12c      	b.n	8004fee <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d96:	3330      	adds	r3, #48	@ 0x30
 8004d98:	3311      	adds	r3, #17
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff fd7a 	bl	8004894 <ld_word>
 8004da0:	4603      	mov	r3, r0
 8004da2:	461a      	mov	r2, r3
 8004da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004daa:	891b      	ldrh	r3, [r3, #8]
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <find_volume+0x24e>
 8004db6:	230d      	movs	r3, #13
 8004db8:	e119      	b.n	8004fee <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dbc:	3330      	adds	r3, #48	@ 0x30
 8004dbe:	3313      	adds	r3, #19
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fd67 	bl	8004894 <ld_word>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d106      	bne.n	8004dde <find_volume+0x272>
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd2:	3330      	adds	r3, #48	@ 0x30
 8004dd4:	3320      	adds	r3, #32
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fd75 	bl	80048c6 <ld_dword>
 8004ddc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de0:	3330      	adds	r3, #48	@ 0x30
 8004de2:	330e      	adds	r3, #14
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fd55 	bl	8004894 <ld_word>
 8004dea:	4603      	mov	r3, r0
 8004dec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004dee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <find_volume+0x28c>
 8004df4:	230d      	movs	r3, #13
 8004df6:	e0fa      	b.n	8004fee <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004df8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dfc:	4413      	add	r3, r2
 8004dfe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e00:	8912      	ldrh	r2, [r2, #8]
 8004e02:	0912      	lsrs	r2, r2, #4
 8004e04:	b292      	uxth	r2, r2
 8004e06:	4413      	add	r3, r2
 8004e08:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004e0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d204      	bcs.n	8004e1c <find_volume+0x2b0>
 8004e12:	230d      	movs	r3, #13
 8004e14:	e0eb      	b.n	8004fee <find_volume+0x482>
 8004e16:	bf00      	nop
 8004e18:	200003b4 	.word	0x200003b4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004e1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e24:	8952      	ldrh	r2, [r2, #10]
 8004e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e2a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <find_volume+0x2ca>
 8004e32:	230d      	movs	r3, #13
 8004e34:	e0db      	b.n	8004fee <find_volume+0x482>
		fmt = FS_FAT32;
 8004e36:	2303      	movs	r3, #3
 8004e38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d802      	bhi.n	8004e4c <find_volume+0x2e0>
 8004e46:	2302      	movs	r3, #2
 8004e48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d802      	bhi.n	8004e5c <find_volume+0x2f0>
 8004e56:	2301      	movs	r3, #1
 8004e58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5e:	1c9a      	adds	r2, r3, #2
 8004e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e62:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e68:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004e6a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004e6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e6e:	441a      	add	r2, r3
 8004e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e72:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004e74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e78:	441a      	add	r2, r3
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8004e7e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d11e      	bne.n	8004ec4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e88:	3330      	adds	r3, #48	@ 0x30
 8004e8a:	332a      	adds	r3, #42	@ 0x2a
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fd01 	bl	8004894 <ld_word>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <find_volume+0x330>
 8004e98:	230d      	movs	r3, #13
 8004e9a:	e0a8      	b.n	8004fee <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9e:	891b      	ldrh	r3, [r3, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <find_volume+0x33c>
 8004ea4:	230d      	movs	r3, #13
 8004ea6:	e0a2      	b.n	8004fee <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eaa:	3330      	adds	r3, #48	@ 0x30
 8004eac:	332c      	adds	r3, #44	@ 0x2c
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fd09 	bl	80048c6 <ld_dword>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ec2:	e01f      	b.n	8004f04 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec6:	891b      	ldrh	r3, [r3, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <find_volume+0x364>
 8004ecc:	230d      	movs	r3, #13
 8004ece:	e08e      	b.n	8004fee <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ed6:	441a      	add	r2, r3
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eda:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004edc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d103      	bne.n	8004eec <find_volume+0x380>
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	e00a      	b.n	8004f02 <find_volume+0x396>
 8004eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	4413      	add	r3, r2
 8004ef6:	085a      	lsrs	r2, r3, #1
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004f02:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f0a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8004f0e:	0a5b      	lsrs	r3, r3, #9
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d201      	bcs.n	8004f18 <find_volume+0x3ac>
 8004f14:	230d      	movs	r3, #13
 8004f16:	e06a      	b.n	8004fee <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1e:	611a      	str	r2, [r3, #16]
 8004f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f26:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2a:	2280      	movs	r2, #128	@ 0x80
 8004f2c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004f2e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d149      	bne.n	8004fca <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f38:	3330      	adds	r3, #48	@ 0x30
 8004f3a:	3330      	adds	r3, #48	@ 0x30
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fca9 	bl	8004894 <ld_word>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d140      	bne.n	8004fca <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f50:	f7ff fd44 	bl	80049dc <move_window>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d137      	bne.n	8004fca <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f62:	3330      	adds	r3, #48	@ 0x30
 8004f64:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fc93 	bl	8004894 <ld_word>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	461a      	mov	r2, r3
 8004f72:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d127      	bne.n	8004fca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7c:	3330      	adds	r3, #48	@ 0x30
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fca1 	bl	80048c6 <ld_dword>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff8 <find_volume+0x48c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d11e      	bne.n	8004fca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8e:	3330      	adds	r3, #48	@ 0x30
 8004f90:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff fc96 	bl	80048c6 <ld_dword>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	4a17      	ldr	r2, [pc, #92]	@ (8004ffc <find_volume+0x490>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d113      	bne.n	8004fca <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa4:	3330      	adds	r3, #48	@ 0x30
 8004fa6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff fc8b 	bl	80048c6 <ld_dword>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb8:	3330      	adds	r3, #48	@ 0x30
 8004fba:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff fc81 	bl	80048c6 <ld_dword>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fcc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004fd0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005000 <find_volume+0x494>)
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	4b09      	ldr	r3, [pc, #36]	@ (8005000 <find_volume+0x494>)
 8004fdc:	801a      	strh	r2, [r3, #0]
 8004fde:	4b08      	ldr	r3, [pc, #32]	@ (8005000 <find_volume+0x494>)
 8004fe0:	881a      	ldrh	r2, [r3, #0]
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004fe6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004fe8:	f7ff fc90 	bl	800490c <clear_lock>
#endif
	return FR_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3758      	adds	r7, #88	@ 0x58
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	41615252 	.word	0x41615252
 8004ffc:	61417272 	.word	0x61417272
 8005000:	200003b8 	.word	0x200003b8

08005004 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005016:	f107 0310 	add.w	r3, r7, #16
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff fd0b 	bl	8004a36 <get_ldnumber>
 8005020:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	2b00      	cmp	r3, #0
 8005026:	da01      	bge.n	800502c <f_mount+0x28>
 8005028:	230b      	movs	r3, #11
 800502a:	e02b      	b.n	8005084 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800502c:	4a17      	ldr	r2, [pc, #92]	@ (800508c <f_mount+0x88>)
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005034:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800503c:	69b8      	ldr	r0, [r7, #24]
 800503e:	f7ff fc65 	bl	800490c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	490d      	ldr	r1, [pc, #52]	@ (800508c <f_mount+0x88>)
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <f_mount+0x66>
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d001      	beq.n	800506e <f_mount+0x6a>
 800506a:	2300      	movs	r3, #0
 800506c:	e00a      	b.n	8005084 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800506e:	f107 010c 	add.w	r1, r7, #12
 8005072:	f107 0308 	add.w	r3, r7, #8
 8005076:	2200      	movs	r2, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fd77 	bl	8004b6c <find_volume>
 800507e:	4603      	mov	r3, r0
 8005080:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005082:	7dfb      	ldrb	r3, [r7, #23]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3720      	adds	r7, #32
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	200003b4 	.word	0x200003b4

08005090 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800509e:	2301      	movs	r3, #1
 80050a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80050a2:	2300      	movs	r3, #0
 80050a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80050a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005124 <FATFS_LinkDriverEx+0x94>)
 80050a8:	7a5b      	ldrb	r3, [r3, #9]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d131      	bne.n	8005114 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80050b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005124 <FATFS_LinkDriverEx+0x94>)
 80050b2:	7a5b      	ldrb	r3, [r3, #9]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005124 <FATFS_LinkDriverEx+0x94>)
 80050ba:	2100      	movs	r1, #0
 80050bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80050be:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <FATFS_LinkDriverEx+0x94>)
 80050c0:	7a5b      	ldrb	r3, [r3, #9]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	4a17      	ldr	r2, [pc, #92]	@ (8005124 <FATFS_LinkDriverEx+0x94>)
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80050ce:	4b15      	ldr	r3, [pc, #84]	@ (8005124 <FATFS_LinkDriverEx+0x94>)
 80050d0:	7a5b      	ldrb	r3, [r3, #9]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	4b13      	ldr	r3, [pc, #76]	@ (8005124 <FATFS_LinkDriverEx+0x94>)
 80050d8:	4413      	add	r3, r2
 80050da:	79fa      	ldrb	r2, [r7, #7]
 80050dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80050de:	4b11      	ldr	r3, [pc, #68]	@ (8005124 <FATFS_LinkDriverEx+0x94>)
 80050e0:	7a5b      	ldrb	r3, [r3, #9]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	b2d1      	uxtb	r1, r2
 80050e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005124 <FATFS_LinkDriverEx+0x94>)
 80050ea:	7251      	strb	r1, [r2, #9]
 80050ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80050ee:	7dbb      	ldrb	r3, [r7, #22]
 80050f0:	3330      	adds	r3, #48	@ 0x30
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	3301      	adds	r3, #1
 80050fc:	223a      	movs	r2, #58	@ 0x3a
 80050fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	3302      	adds	r3, #2
 8005104:	222f      	movs	r2, #47	@ 0x2f
 8005106:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	3303      	adds	r3, #3
 800510c:	2200      	movs	r2, #0
 800510e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005114:	7dfb      	ldrb	r3, [r7, #23]
}
 8005116:	4618      	mov	r0, r3
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	200003dc 	.word	0x200003dc

08005128 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005132:	2200      	movs	r2, #0
 8005134:	6839      	ldr	r1, [r7, #0]
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff ffaa 	bl	8005090 <FATFS_LinkDriverEx>
 800513c:	4603      	mov	r3, r0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <memset>:
 8005146:	4402      	add	r2, r0
 8005148:	4603      	mov	r3, r0
 800514a:	4293      	cmp	r3, r2
 800514c:	d100      	bne.n	8005150 <memset+0xa>
 800514e:	4770      	bx	lr
 8005150:	f803 1b01 	strb.w	r1, [r3], #1
 8005154:	e7f9      	b.n	800514a <memset+0x4>
	...

08005158 <__libc_init_array>:
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	4d0d      	ldr	r5, [pc, #52]	@ (8005190 <__libc_init_array+0x38>)
 800515c:	4c0d      	ldr	r4, [pc, #52]	@ (8005194 <__libc_init_array+0x3c>)
 800515e:	1b64      	subs	r4, r4, r5
 8005160:	10a4      	asrs	r4, r4, #2
 8005162:	2600      	movs	r6, #0
 8005164:	42a6      	cmp	r6, r4
 8005166:	d109      	bne.n	800517c <__libc_init_array+0x24>
 8005168:	4d0b      	ldr	r5, [pc, #44]	@ (8005198 <__libc_init_array+0x40>)
 800516a:	4c0c      	ldr	r4, [pc, #48]	@ (800519c <__libc_init_array+0x44>)
 800516c:	f000 f818 	bl	80051a0 <_init>
 8005170:	1b64      	subs	r4, r4, r5
 8005172:	10a4      	asrs	r4, r4, #2
 8005174:	2600      	movs	r6, #0
 8005176:	42a6      	cmp	r6, r4
 8005178:	d105      	bne.n	8005186 <__libc_init_array+0x2e>
 800517a:	bd70      	pop	{r4, r5, r6, pc}
 800517c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005180:	4798      	blx	r3
 8005182:	3601      	adds	r6, #1
 8005184:	e7ee      	b.n	8005164 <__libc_init_array+0xc>
 8005186:	f855 3b04 	ldr.w	r3, [r5], #4
 800518a:	4798      	blx	r3
 800518c:	3601      	adds	r6, #1
 800518e:	e7f2      	b.n	8005176 <__libc_init_array+0x1e>
 8005190:	080051f0 	.word	0x080051f0
 8005194:	080051f0 	.word	0x080051f0
 8005198:	080051f0 	.word	0x080051f0
 800519c:	080051f4 	.word	0x080051f4

080051a0 <_init>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr

080051ac <_fini>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	bf00      	nop
 80051b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b2:	bc08      	pop	{r3}
 80051b4:	469e      	mov	lr, r3
 80051b6:	4770      	bx	lr
