
sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009870  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08009a00  08009a00  0000aa00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f88  08009f88  0000b068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009f88  08009f88  0000af88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f90  08009f90  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f90  08009f90  0000af90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f94  08009f94  0000af94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009f98  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b068  2**0
                  CONTENTS
 10 .bss          00002770  20000068  20000068  0000b068  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200027d8  200027d8  0000b068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000103a5  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002662  00000000  00000000  0001b43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  0001daa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b5e  00000000  00000000  0001e958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238dc  00000000  00000000  0001f4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014290  00000000  00000000  00042d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbba3  00000000  00000000  00057022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122bc5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004454  00000000  00000000  00122c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0012705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099e8 	.word	0x080099e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080099e8 	.word	0x080099e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <BSP_SD_IsDetected>:
static void MX_SDIO_SD_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

uint8_t BSP_SD_IsDetected(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80005a2:	2301      	movs	r3, #1
 80005a4:	71fb      	strb	r3, [r7, #7]

  return status;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	b2db      	uxtb	r3, r3
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <_write>:

int _write(int file, char *ptr, int len)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005cc:	68b9      	ldr	r1, [r7, #8]
 80005ce:	4807      	ldr	r0, [pc, #28]	@ (80005ec <_write+0x34>)
 80005d0:	f002 fd08 	bl	8002fe4 <HAL_UART_Transmit>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <_write+0x28>
		return -1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005de:	e000      	b.n	80005e2 <_write+0x2a>
	else
		return len;
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000108 	.word	0x20000108

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fb67 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f873 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f933 	bl	8000868 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000602:	f000 f8d7 	bl	80007b4 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8000606:	f000 f905 	bl	8000814 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800060a:	f003 fe1b 	bl	8004244 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  printf("Block Size: %lu\r\n", hsd.SdCard.BlockSize);
 800060e:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <main+0xc0>)
 8000610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000612:	4619      	mov	r1, r3
 8000614:	4827      	ldr	r0, [pc, #156]	@ (80006b4 <main+0xc4>)
 8000616:	f008 fb7b 	bl	8008d10 <iprintf>
  printf("Block Number: %lu\r\n", hsd.SdCard.BlockNbr);
 800061a:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <main+0xc0>)
 800061c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800061e:	4619      	mov	r1, r3
 8000620:	4825      	ldr	r0, [pc, #148]	@ (80006b8 <main+0xc8>)
 8000622:	f008 fb75 	bl	8008d10 <iprintf>
  printf("Card Size: %lu\r\n", (hsd.SdCard.BlockSize * hsd.SdCard.BlockNbr) / 1024);
 8000626:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <main+0xc0>)
 8000628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800062a:	4a21      	ldr	r2, [pc, #132]	@ (80006b0 <main+0xc0>)
 800062c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800062e:	fb02 f303 	mul.w	r3, r2, r3
 8000632:	0a9b      	lsrs	r3, r3, #10
 8000634:	4619      	mov	r1, r3
 8000636:	4821      	ldr	r0, [pc, #132]	@ (80006bc <main+0xcc>)
 8000638:	f008 fb6a 	bl	8008d10 <iprintf>

  FRESULT res;
  res = f_mount(&SDFatFS, SDPath, 1);
 800063c:	2201      	movs	r2, #1
 800063e:	4920      	ldr	r1, [pc, #128]	@ (80006c0 <main+0xd0>)
 8000640:	4820      	ldr	r0, [pc, #128]	@ (80006c4 <main+0xd4>)
 8000642:	f007 fb4d 	bl	8007ce0 <f_mount>
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  printf("%d\r\n", res);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	4619      	mov	r1, r3
 800064e:	481e      	ldr	r0, [pc, #120]	@ (80006c8 <main+0xd8>)
 8000650:	f008 fb5e 	bl	8008d10 <iprintf>

  res = f_open(&SDFile, "test.txt", FA_OPEN_APPEND | FA_WRITE);
 8000654:	2232      	movs	r2, #50	@ 0x32
 8000656:	491d      	ldr	r1, [pc, #116]	@ (80006cc <main+0xdc>)
 8000658:	481d      	ldr	r0, [pc, #116]	@ (80006d0 <main+0xe0>)
 800065a:	f007 fb87 	bl	8007d6c <f_open>
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if (res == FR_OK)
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d113      	bne.n	8000690 <main+0xa0>
  {
	  UINT bw;
	  res = f_write(&SDFile, "test", 4, &bw);
 8000668:	463b      	mov	r3, r7
 800066a:	2204      	movs	r2, #4
 800066c:	4919      	ldr	r1, [pc, #100]	@ (80006d4 <main+0xe4>)
 800066e:	4818      	ldr	r0, [pc, #96]	@ (80006d0 <main+0xe0>)
 8000670:	f007 fe4b 	bl	800830a <f_write>
 8000674:	4603      	mov	r3, r0
 8000676:	71fb      	strb	r3, [r7, #7]
	  if (res != FR_OK)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d004      	beq.n	8000688 <main+0x98>
		  printf("Could not write to file (%d).\r\n", res);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4619      	mov	r1, r3
 8000682:	4815      	ldr	r0, [pc, #84]	@ (80006d8 <main+0xe8>)
 8000684:	f008 fb44 	bl	8008d10 <iprintf>
	  f_close(&SDFile);
 8000688:	4811      	ldr	r0, [pc, #68]	@ (80006d0 <main+0xe0>)
 800068a:	f008 f933 	bl	80088f4 <f_close>
 800068e:	e004      	b.n	800069a <main+0xaa>
  }
  else
	  printf("Could not open file (%d).\r\n", res);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4619      	mov	r1, r3
 8000694:	4811      	ldr	r0, [pc, #68]	@ (80006dc <main+0xec>)
 8000696:	f008 fb3b 	bl	8008d10 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800069a:	2140      	movs	r1, #64	@ 0x40
 800069c:	4810      	ldr	r0, [pc, #64]	@ (80006e0 <main+0xf0>)
 800069e:	f000 fe44 	bl	800132a <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80006a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a6:	f000 fb81 	bl	8000dac <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80006aa:	bf00      	nop
 80006ac:	e7f5      	b.n	800069a <main+0xaa>
 80006ae:	bf00      	nop
 80006b0:	20000084 	.word	0x20000084
 80006b4:	08009a00 	.word	0x08009a00
 80006b8:	08009a14 	.word	0x08009a14
 80006bc:	08009a28 	.word	0x08009a28
 80006c0:	2000015c 	.word	0x2000015c
 80006c4:	20000160 	.word	0x20000160
 80006c8:	08009a3c 	.word	0x08009a3c
 80006cc:	08009a44 	.word	0x08009a44
 80006d0:	200011a0 	.word	0x200011a0
 80006d4:	08009a50 	.word	0x08009a50
 80006d8:	08009a58 	.word	0x08009a58
 80006dc:	08009a78 	.word	0x08009a78
 80006e0:	40020000 	.word	0x40020000

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	@ 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2230      	movs	r2, #48	@ 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f008 fb61 	bl	8008dba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	4b27      	ldr	r3, [pc, #156]	@ (80007ac <SystemClock_Config+0xc8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	4a26      	ldr	r2, [pc, #152]	@ (80007ac <SystemClock_Config+0xc8>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	@ 0x40
 8000718:	4b24      	ldr	r3, [pc, #144]	@ (80007ac <SystemClock_Config+0xc8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <SystemClock_Config+0xcc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a20      	ldr	r2, [pc, #128]	@ (80007b0 <SystemClock_Config+0xcc>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <SystemClock_Config+0xcc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000740:	2302      	movs	r3, #2
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000748:	2310      	movs	r3, #16
 800074a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000750:	2300      	movs	r3, #0
 8000752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000754:	2310      	movs	r3, #16
 8000756:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000758:	23c0      	movs	r3, #192	@ 0xc0
 800075a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000760:	2304      	movs	r3, #4
 8000762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fdf9 	bl	8001360 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000774:	f000 f8d8 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f85c 	bl	8001850 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800079e:	f000 f8c3 	bl	8000928 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	@ 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <MX_SDIO_SD_Init+0x58>)
 80007ba:	4a15      	ldr	r2, [pc, #84]	@ (8000810 <MX_SDIO_SD_Init+0x5c>)
 80007bc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <MX_SDIO_SD_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_SDIO_SD_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_SDIO_SD_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80007d0:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_SDIO_SD_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <MX_SDIO_SD_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 80007dc:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_SDIO_SD_Init+0x58>)
 80007de:	220a      	movs	r2, #10
 80007e0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80007e2:	480a      	ldr	r0, [pc, #40]	@ (800080c <MX_SDIO_SD_Init+0x58>)
 80007e4:	f001 fa14 	bl	8001c10 <HAL_SD_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_SDIO_SD_Init+0x3e>
  {
	  Error_Handler();
 80007ee:	f000 f89b 	bl	8000928 <Error_Handler>
  }

  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80007f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_SDIO_SD_Init+0x58>)
 80007f8:	f001 fff6 	bl	80027e8 <HAL_SD_ConfigWideBusOperation>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_SDIO_SD_Init+0x52>
  {
	  Error_Handler();
 8000802:	f000 f891 	bl	8000928 <Error_Handler>
  }
  /* USER CODE END SDIO_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000084 	.word	0x20000084
 8000810:	40012c00 	.word	0x40012c00

08000814 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000818:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 800081a:	4a12      	ldr	r2, [pc, #72]	@ (8000864 <MX_USART1_UART_Init+0x50>)
 800081c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800081e:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_USART1_UART_Init+0x4c>)
 800084c:	f002 fb7a 	bl	8002f44 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000856:	f000 f867 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000108 	.word	0x20000108
 8000864:	40011000 	.word	0x40011000

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b26      	ldr	r3, [pc, #152]	@ (800091c <MX_GPIO_Init+0xb4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a25      	ldr	r2, [pc, #148]	@ (800091c <MX_GPIO_Init+0xb4>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b23      	ldr	r3, [pc, #140]	@ (800091c <MX_GPIO_Init+0xb4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b1f      	ldr	r3, [pc, #124]	@ (800091c <MX_GPIO_Init+0xb4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a1e      	ldr	r2, [pc, #120]	@ (800091c <MX_GPIO_Init+0xb4>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <MX_GPIO_Init+0xb4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b18      	ldr	r3, [pc, #96]	@ (800091c <MX_GPIO_Init+0xb4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a17      	ldr	r2, [pc, #92]	@ (800091c <MX_GPIO_Init+0xb4>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <MX_GPIO_Init+0xb4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2140      	movs	r1, #64	@ 0x40
 80008d6:	4812      	ldr	r0, [pc, #72]	@ (8000920 <MX_GPIO_Init+0xb8>)
 80008d8:	f000 fd0e 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008dc:	2340      	movs	r3, #64	@ 0x40
 80008de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	4619      	mov	r1, r3
 80008f2:	480b      	ldr	r0, [pc, #44]	@ (8000920 <MX_GPIO_Init+0xb8>)
 80008f4:	f000 fb64 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_GPIO_Init+0xbc>)
 800090e:	f000 fb57 	bl	8000fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000912:	bf00      	nop
 8000914:	3720      	adds	r7, #32
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000
 8000924:	40020800 	.word	0x40020800

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <Error_Handler+0x8>

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	4a0f      	ldr	r2, [pc, #60]	@ (8000980 <HAL_MspInit+0x4c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000948:	6453      	str	r3, [r2, #68]	@ 0x44
 800094a:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	@ (8000980 <HAL_MspInit+0x4c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	@ 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a28      	ldr	r2, [pc, #160]	@ (8000a44 <HAL_SD_MspInit+0xc0>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d14a      	bne.n	8000a3c <HAL_SD_MspInit+0xb8>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b27      	ldr	r3, [pc, #156]	@ (8000a48 <HAL_SD_MspInit+0xc4>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	4a26      	ldr	r2, [pc, #152]	@ (8000a48 <HAL_SD_MspInit+0xc4>)
 80009b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b6:	4b24      	ldr	r3, [pc, #144]	@ (8000a48 <HAL_SD_MspInit+0xc4>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <HAL_SD_MspInit+0xc4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000a48 <HAL_SD_MspInit+0xc4>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a48 <HAL_SD_MspInit+0xc4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <HAL_SD_MspInit+0xc4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a18      	ldr	r2, [pc, #96]	@ (8000a48 <HAL_SD_MspInit+0xc4>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <HAL_SD_MspInit+0xc4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80009fa:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a0c:	230c      	movs	r3, #12
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	@ (8000a4c <HAL_SD_MspInit+0xc8>)
 8000a18:	f000 fad2 	bl	8000fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	@ (8000a50 <HAL_SD_MspInit+0xcc>)
 8000a38:	f000 fac2 	bl	8000fc0 <HAL_GPIO_Init>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	@ 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40012c00 	.word	0x40012c00
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020800 	.word	0x40020800
 8000a50:	40020c00 	.word	0x40020c00

08000a54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a19      	ldr	r2, [pc, #100]	@ (8000ad8 <HAL_UART_MspInit+0x84>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12c      	bne.n	8000ad0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	4a17      	ldr	r2, [pc, #92]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a80:	f043 0310 	orr.w	r3, r3, #16
 8000a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8a:	f003 0310 	and.w	r3, r3, #16
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a10      	ldr	r2, [pc, #64]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <HAL_UART_MspInit+0x8c>)
 8000acc:	f000 fa78 	bl	8000fc0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40011000 	.word	0x40011000
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <NMI_Handler+0x4>

08000aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <MemManage_Handler+0x4>

08000afc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3a:	f000 f917 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	e00a      	b.n	8000b6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b54:	f3af 8000 	nop.w
 8000b58:	4601      	mov	r1, r0
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	60ba      	str	r2, [r7, #8]
 8000b60:	b2ca      	uxtb	r2, r1
 8000b62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	3301      	adds	r3, #1
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dbf0      	blt.n	8000b54 <_read+0x12>
  }

  return len;
 8000b72:	687b      	ldr	r3, [r7, #4]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ba4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <_isatty>:

int _isatty(int file)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b085      	sub	sp, #20
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	@ (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c14:	f008 f920 	bl	8008e58 <__errno>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c22:	e009      	b.n	8000c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <_sbrk+0x64>)
 8000c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20020000 	.word	0x20020000
 8000c44:	00000400 	.word	0x00000400
 8000c48:	20000150 	.word	0x20000150
 8000c4c:	200027d8 	.word	0x200027d8

08000c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	@ (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c78:	f7ff ffea 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f008 f8df 	bl	8008e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fca3 	bl	80005f0 <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cb8:	08009f98 	.word	0x08009f98
  ldr r2, =_sbss
 8000cbc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cc0:	200027d8 	.word	0x200027d8

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <HAL_Init+0x40>)
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <HAL_Init+0x40>)
 8000cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	@ (8000d08 <HAL_Init+0x40>)
 8000cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f931 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	200f      	movs	r0, #15
 8000cf8:	f000 f808 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff fe1a 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_InitTick+0x54>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <HAL_InitTick+0x58>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f93b 	bl	8000fa6 <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00e      	b.n	8000d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d80a      	bhi.n	8000d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d48:	f000 f911 	bl	8000f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4c:	4a06      	ldr	r2, [pc, #24]	@ (8000d68 <HAL_InitTick+0x5c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000004 	.word	0x20000004

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000154 	.word	0x20000154

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	@ (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000154 	.word	0x20000154

08000dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db4:	f7ff ffee 	bl	8000d94 <HAL_GetTick>
 8000db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dc4:	d005      	beq.n	8000dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <HAL_Delay+0x44>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd2:	bf00      	nop
 8000dd4:	f7ff ffde 	bl	8000d94 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d8f7      	bhi.n	8000dd4 <HAL_Delay+0x28>
  {
  }
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008

08000df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e26:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	60d3      	str	r3, [r2, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e40:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <__NVIC_GetPriorityGrouping+0x18>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	f003 0307 	and.w	r3, r3, #7
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	@ (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	@ (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	@ 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	@ 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff47 	bl	8000df4 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff5c 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffb0 	bl	8000f14 <SysTick_Config>
 8000fb4:	4603      	mov	r3, r0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	@ 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	e16b      	b.n	80012b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	f040 815a 	bne.w	80012ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b01      	cmp	r3, #1
 8001004:	d005      	beq.n	8001012 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100e:	2b02      	cmp	r3, #2
 8001010:	d130      	bne.n	8001074 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001048:	2201      	movs	r2, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	f003 0201 	and.w	r2, r3, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b03      	cmp	r3, #3
 800107e:	d017      	beq.n	80010b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d123      	bne.n	8001104 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	08da      	lsrs	r2, r3, #3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3208      	adds	r2, #8
 80010c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	220f      	movs	r2, #15
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	691a      	ldr	r2, [r3, #16]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	69b9      	ldr	r1, [r7, #24]
 8001100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0203 	and.w	r2, r3, #3
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 80b4 	beq.w	80012ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b60      	ldr	r3, [pc, #384]	@ (80012cc <HAL_GPIO_Init+0x30c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a5f      	ldr	r2, [pc, #380]	@ (80012cc <HAL_GPIO_Init+0x30c>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b5d      	ldr	r3, [pc, #372]	@ (80012cc <HAL_GPIO_Init+0x30c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001162:	4a5b      	ldr	r2, [pc, #364]	@ (80012d0 <HAL_GPIO_Init+0x310>)
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a52      	ldr	r2, [pc, #328]	@ (80012d4 <HAL_GPIO_Init+0x314>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d02b      	beq.n	80011e6 <HAL_GPIO_Init+0x226>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a51      	ldr	r2, [pc, #324]	@ (80012d8 <HAL_GPIO_Init+0x318>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d025      	beq.n	80011e2 <HAL_GPIO_Init+0x222>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a50      	ldr	r2, [pc, #320]	@ (80012dc <HAL_GPIO_Init+0x31c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d01f      	beq.n	80011de <HAL_GPIO_Init+0x21e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4f      	ldr	r2, [pc, #316]	@ (80012e0 <HAL_GPIO_Init+0x320>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d019      	beq.n	80011da <HAL_GPIO_Init+0x21a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4e      	ldr	r2, [pc, #312]	@ (80012e4 <HAL_GPIO_Init+0x324>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d013      	beq.n	80011d6 <HAL_GPIO_Init+0x216>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4d      	ldr	r2, [pc, #308]	@ (80012e8 <HAL_GPIO_Init+0x328>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d00d      	beq.n	80011d2 <HAL_GPIO_Init+0x212>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4c      	ldr	r2, [pc, #304]	@ (80012ec <HAL_GPIO_Init+0x32c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d007      	beq.n	80011ce <HAL_GPIO_Init+0x20e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4b      	ldr	r2, [pc, #300]	@ (80012f0 <HAL_GPIO_Init+0x330>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d101      	bne.n	80011ca <HAL_GPIO_Init+0x20a>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e00e      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011ca:	2308      	movs	r3, #8
 80011cc:	e00c      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011ce:	2306      	movs	r3, #6
 80011d0:	e00a      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011d2:	2305      	movs	r3, #5
 80011d4:	e008      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011d6:	2304      	movs	r3, #4
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011da:	2303      	movs	r3, #3
 80011dc:	e004      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011de:	2302      	movs	r3, #2
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011e6:	2300      	movs	r3, #0
 80011e8:	69fa      	ldr	r2, [r7, #28]
 80011ea:	f002 0203 	and.w	r2, r2, #3
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	4093      	lsls	r3, r2
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f8:	4935      	ldr	r1, [pc, #212]	@ (80012d0 <HAL_GPIO_Init+0x310>)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001206:	4b3b      	ldr	r3, [pc, #236]	@ (80012f4 <HAL_GPIO_Init+0x334>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122a:	4a32      	ldr	r2, [pc, #200]	@ (80012f4 <HAL_GPIO_Init+0x334>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001230:	4b30      	ldr	r3, [pc, #192]	@ (80012f4 <HAL_GPIO_Init+0x334>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001254:	4a27      	ldr	r2, [pc, #156]	@ (80012f4 <HAL_GPIO_Init+0x334>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800125a:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <HAL_GPIO_Init+0x334>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800127e:	4a1d      	ldr	r2, [pc, #116]	@ (80012f4 <HAL_GPIO_Init+0x334>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001284:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <HAL_GPIO_Init+0x334>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a8:	4a12      	ldr	r2, [pc, #72]	@ (80012f4 <HAL_GPIO_Init+0x334>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3301      	adds	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	2b0f      	cmp	r3, #15
 80012b8:	f67f ae90 	bls.w	8000fdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3724      	adds	r7, #36	@ 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40013800 	.word	0x40013800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40021400 	.word	0x40021400
 80012ec:	40021800 	.word	0x40021800
 80012f0:	40021c00 	.word	0x40021c00
 80012f4:	40013c00 	.word	0x40013c00

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	619a      	str	r2, [r3, #24]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800132a:	b480      	push	{r7}
 800132c:	b085      	sub	sp, #20
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800133c:	887a      	ldrh	r2, [r7, #2]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4013      	ands	r3, r2
 8001342:	041a      	lsls	r2, r3, #16
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43d9      	mvns	r1, r3
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	400b      	ands	r3, r1
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	619a      	str	r2, [r3, #24]
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e267      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d075      	beq.n	800146a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800137e:	4b88      	ldr	r3, [pc, #544]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b04      	cmp	r3, #4
 8001388:	d00c      	beq.n	80013a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800138a:	4b85      	ldr	r3, [pc, #532]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001392:	2b08      	cmp	r3, #8
 8001394:	d112      	bne.n	80013bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001396:	4b82      	ldr	r3, [pc, #520]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800139e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013a2:	d10b      	bne.n	80013bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a4:	4b7e      	ldr	r3, [pc, #504]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d05b      	beq.n	8001468 <HAL_RCC_OscConfig+0x108>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d157      	bne.n	8001468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e242      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c4:	d106      	bne.n	80013d4 <HAL_RCC_OscConfig+0x74>
 80013c6:	4b76      	ldr	r3, [pc, #472]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a75      	ldr	r2, [pc, #468]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e01d      	b.n	8001410 <HAL_RCC_OscConfig+0xb0>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x98>
 80013de:	4b70      	ldr	r3, [pc, #448]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a6f      	ldr	r2, [pc, #444]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b6d      	ldr	r3, [pc, #436]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a6c      	ldr	r2, [pc, #432]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e00b      	b.n	8001410 <HAL_RCC_OscConfig+0xb0>
 80013f8:	4b69      	ldr	r3, [pc, #420]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a68      	ldr	r2, [pc, #416]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b66      	ldr	r3, [pc, #408]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a65      	ldr	r2, [pc, #404]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 800140a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800140e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d013      	beq.n	8001440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fcbc 	bl	8000d94 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fcb8 	bl	8000d94 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	@ 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e207      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	4b5b      	ldr	r3, [pc, #364]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0xc0>
 800143e:	e014      	b.n	800146a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fca8 	bl	8000d94 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fca4 	bl	8000d94 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	@ 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e1f3      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	4b51      	ldr	r3, [pc, #324]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0xe8>
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d063      	beq.n	800153e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001476:	4b4a      	ldr	r3, [pc, #296]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00b      	beq.n	800149a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001482:	4b47      	ldr	r3, [pc, #284]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800148a:	2b08      	cmp	r3, #8
 800148c:	d11c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148e:	4b44      	ldr	r3, [pc, #272]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d116      	bne.n	80014c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	4b41      	ldr	r3, [pc, #260]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <HAL_RCC_OscConfig+0x152>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d001      	beq.n	80014b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e1c7      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b2:	4b3b      	ldr	r3, [pc, #236]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4937      	ldr	r1, [pc, #220]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c6:	e03a      	b.n	800153e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d020      	beq.n	8001512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d0:	4b34      	ldr	r3, [pc, #208]	@ (80015a4 <HAL_RCC_OscConfig+0x244>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d6:	f7ff fc5d 	bl	8000d94 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014de:	f7ff fc59 	bl	8000d94 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e1a8      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	4b2b      	ldr	r3, [pc, #172]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b28      	ldr	r3, [pc, #160]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4925      	ldr	r1, [pc, #148]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 800150c:	4313      	orrs	r3, r2
 800150e:	600b      	str	r3, [r1, #0]
 8001510:	e015      	b.n	800153e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001512:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <HAL_RCC_OscConfig+0x244>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fc3c 	bl	8000d94 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001520:	f7ff fc38 	bl	8000d94 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e187      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d036      	beq.n	80015b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d016      	beq.n	8001580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <HAL_RCC_OscConfig+0x248>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001558:	f7ff fc1c 	bl	8000d94 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001560:	f7ff fc18 	bl	8000d94 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e167      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x200>
 800157e:	e01b      	b.n	80015b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <HAL_RCC_OscConfig+0x248>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001586:	f7ff fc05 	bl	8000d94 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158c:	e00e      	b.n	80015ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158e:	f7ff fc01 	bl	8000d94 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d907      	bls.n	80015ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e150      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
 80015a0:	40023800 	.word	0x40023800
 80015a4:	42470000 	.word	0x42470000
 80015a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	4b88      	ldr	r3, [pc, #544]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1ea      	bne.n	800158e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 8097 	beq.w	80016f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ca:	4b81      	ldr	r3, [pc, #516]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10f      	bne.n	80015f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	4b7d      	ldr	r3, [pc, #500]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	4a7c      	ldr	r2, [pc, #496]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e6:	4b7a      	ldr	r3, [pc, #488]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b77      	ldr	r3, [pc, #476]	@ (80017d4 <HAL_RCC_OscConfig+0x474>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d118      	bne.n	8001634 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001602:	4b74      	ldr	r3, [pc, #464]	@ (80017d4 <HAL_RCC_OscConfig+0x474>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a73      	ldr	r2, [pc, #460]	@ (80017d4 <HAL_RCC_OscConfig+0x474>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800160c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160e:	f7ff fbc1 	bl	8000d94 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001616:	f7ff fbbd 	bl	8000d94 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e10c      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	4b6a      	ldr	r3, [pc, #424]	@ (80017d4 <HAL_RCC_OscConfig+0x474>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x2ea>
 800163c:	4b64      	ldr	r3, [pc, #400]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 800163e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001640:	4a63      	ldr	r2, [pc, #396]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6713      	str	r3, [r2, #112]	@ 0x70
 8001648:	e01c      	b.n	8001684 <HAL_RCC_OscConfig+0x324>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b05      	cmp	r3, #5
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x30c>
 8001652:	4b5f      	ldr	r3, [pc, #380]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001656:	4a5e      	ldr	r2, [pc, #376]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6713      	str	r3, [r2, #112]	@ 0x70
 800165e:	4b5c      	ldr	r3, [pc, #368]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001662:	4a5b      	ldr	r2, [pc, #364]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6713      	str	r3, [r2, #112]	@ 0x70
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0x324>
 800166c:	4b58      	ldr	r3, [pc, #352]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 800166e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001670:	4a57      	ldr	r2, [pc, #348]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	6713      	str	r3, [r2, #112]	@ 0x70
 8001678:	4b55      	ldr	r3, [pc, #340]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167c:	4a54      	ldr	r2, [pc, #336]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 800167e:	f023 0304 	bic.w	r3, r3, #4
 8001682:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d015      	beq.n	80016b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff fb82 	bl	8000d94 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001692:	e00a      	b.n	80016aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001694:	f7ff fb7e 	bl	8000d94 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e0cb      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016aa:	4b49      	ldr	r3, [pc, #292]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0ee      	beq.n	8001694 <HAL_RCC_OscConfig+0x334>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff fb6c 	bl	8000d94 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c0:	f7ff fb68 	bl	8000d94 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0b5      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d6:	4b3e      	ldr	r3, [pc, #248]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ee      	bne.n	80016c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d105      	bne.n	80016f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e8:	4b39      	ldr	r3, [pc, #228]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	4a38      	ldr	r2, [pc, #224]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80016ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80a1 	beq.w	8001840 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016fe:	4b34      	ldr	r3, [pc, #208]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b08      	cmp	r3, #8
 8001708:	d05c      	beq.n	80017c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d141      	bne.n	8001796 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001712:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <HAL_RCC_OscConfig+0x478>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fb3c 	bl	8000d94 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001720:	f7ff fb38 	bl	8000d94 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e087      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001732:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69da      	ldr	r2, [r3, #28]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174c:	019b      	lsls	r3, r3, #6
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	3b01      	subs	r3, #1
 8001758:	041b      	lsls	r3, r3, #16
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	491b      	ldr	r1, [pc, #108]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_RCC_OscConfig+0x478>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff fb11 	bl	8000d94 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001776:	f7ff fb0d 	bl	8000d94 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e05c      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x416>
 8001794:	e054      	b.n	8001840 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001796:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <HAL_RCC_OscConfig+0x478>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fafa 	bl	8000d94 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff faf6 	bl	8000d94 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e045      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x444>
 80017c2:	e03d      	b.n	8001840 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d107      	bne.n	80017dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e038      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000
 80017d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <HAL_RCC_OscConfig+0x4ec>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d028      	beq.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d121      	bne.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	429a      	cmp	r2, r3
 8001804:	d11a      	bne.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800180c:	4013      	ands	r3, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001814:	4293      	cmp	r3, r2
 8001816:	d111      	bne.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001822:	085b      	lsrs	r3, r3, #1
 8001824:	3b01      	subs	r3, #1
 8001826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0cc      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001864:	4b68      	ldr	r3, [pc, #416]	@ (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d90c      	bls.n	800188c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b65      	ldr	r3, [pc, #404]	@ (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b63      	ldr	r3, [pc, #396]	@ (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0b8      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d020      	beq.n	80018da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a4:	4b59      	ldr	r3, [pc, #356]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4a58      	ldr	r2, [pc, #352]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018bc:	4b53      	ldr	r3, [pc, #332]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a52      	ldr	r2, [pc, #328]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b50      	ldr	r3, [pc, #320]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	494d      	ldr	r1, [pc, #308]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d044      	beq.n	8001970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b47      	ldr	r3, [pc, #284]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d119      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e07f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d003      	beq.n	800190e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190a:	2b03      	cmp	r3, #3
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e06f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e067      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192e:	4b37      	ldr	r3, [pc, #220]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f023 0203 	bic.w	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4934      	ldr	r1, [pc, #208]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	4313      	orrs	r3, r2
 800193e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001940:	f7ff fa28 	bl	8000d94 <HAL_GetTick>
 8001944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	e00a      	b.n	800195e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001948:	f7ff fa24 	bl	8000d94 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e04f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 020c 	and.w	r2, r3, #12
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	429a      	cmp	r2, r3
 800196e:	d1eb      	bne.n	8001948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001970:	4b25      	ldr	r3, [pc, #148]	@ (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d20c      	bcs.n	8001998 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e032      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a4:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4916      	ldr	r1, [pc, #88]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d009      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	490e      	ldr	r1, [pc, #56]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019d6:	f000 f821 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019da:	4602      	mov	r2, r0
 80019dc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	490a      	ldr	r1, [pc, #40]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 80019e8:	5ccb      	ldrb	r3, [r1, r3]
 80019ea:	fa22 f303 	lsr.w	r3, r2, r3
 80019ee:	4a09      	ldr	r2, [pc, #36]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f988 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023c00 	.word	0x40023c00
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	08009ae8 	.word	0x08009ae8
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a20:	b090      	sub	sp, #64	@ 0x40
 8001a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a34:	4b59      	ldr	r3, [pc, #356]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d00d      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x40>
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	f200 80a1 	bhi.w	8001b88 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x34>
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d003      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a4e:	e09b      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a50:	4b53      	ldr	r3, [pc, #332]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a54:	e09b      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a56:	4b53      	ldr	r3, [pc, #332]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a5a:	e098      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a64:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a66:	4b4d      	ldr	r3, [pc, #308]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d028      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a72:	4b4a      	ldr	r3, [pc, #296]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	099b      	lsrs	r3, r3, #6
 8001a78:	2200      	movs	r2, #0
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a84:	2100      	movs	r1, #0
 8001a86:	4b47      	ldr	r3, [pc, #284]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a88:	fb03 f201 	mul.w	r2, r3, r1
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	fb00 f303 	mul.w	r3, r0, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	4a43      	ldr	r2, [pc, #268]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a96:	fba0 1202 	umull	r1, r2, r0, r2
 8001a9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a9c:	460a      	mov	r2, r1
 8001a9e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001aa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001aa2:	4413      	add	r3, r2
 8001aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	61fa      	str	r2, [r7, #28]
 8001aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ab6:	f7fe fbdb 	bl	8000270 <__aeabi_uldivmod>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4613      	mov	r3, r2
 8001ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ac2:	e053      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac4:	4b35      	ldr	r3, [pc, #212]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	099b      	lsrs	r3, r3, #6
 8001aca:	2200      	movs	r2, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	617a      	str	r2, [r7, #20]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ad6:	f04f 0b00 	mov.w	fp, #0
 8001ada:	4652      	mov	r2, sl
 8001adc:	465b      	mov	r3, fp
 8001ade:	f04f 0000 	mov.w	r0, #0
 8001ae2:	f04f 0100 	mov.w	r1, #0
 8001ae6:	0159      	lsls	r1, r3, #5
 8001ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aec:	0150      	lsls	r0, r2, #5
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	ebb2 080a 	subs.w	r8, r2, sl
 8001af6:	eb63 090b 	sbc.w	r9, r3, fp
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b0e:	ebb2 0408 	subs.w	r4, r2, r8
 8001b12:	eb63 0509 	sbc.w	r5, r3, r9
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	00eb      	lsls	r3, r5, #3
 8001b20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b24:	00e2      	lsls	r2, r4, #3
 8001b26:	4614      	mov	r4, r2
 8001b28:	461d      	mov	r5, r3
 8001b2a:	eb14 030a 	adds.w	r3, r4, sl
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	eb45 030b 	adc.w	r3, r5, fp
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b42:	4629      	mov	r1, r5
 8001b44:	028b      	lsls	r3, r1, #10
 8001b46:	4621      	mov	r1, r4
 8001b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	028a      	lsls	r2, r1, #10
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b56:	2200      	movs	r2, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	60fa      	str	r2, [r7, #12]
 8001b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b60:	f7fe fb86 	bl	8000270 <__aeabi_uldivmod>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4613      	mov	r3, r2
 8001b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	3301      	adds	r3, #1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001b7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b86:	e002      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3740      	adds	r7, #64	@ 0x40
 8001b94:	46bd      	mov	sp, r7
 8001b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	00f42400 	.word	0x00f42400
 8001ba4:	017d7840 	.word	0x017d7840

08001ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bac:	4b03      	ldr	r3, [pc, #12]	@ (8001bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000

08001bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc4:	f7ff fff0 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	0a9b      	lsrs	r3, r3, #10
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	4903      	ldr	r1, [pc, #12]	@ (8001be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40023800 	.word	0x40023800
 8001be4:	08009af8 	.word	0x08009af8

08001be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bec:	f7ff ffdc 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	0b5b      	lsrs	r3, r3, #13
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	4903      	ldr	r1, [pc, #12]	@ (8001c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfe:	5ccb      	ldrb	r3, [r1, r3]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	08009af8 	.word	0x08009af8

08001c10 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e022      	b.n	8001c68 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d105      	bne.n	8001c3a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7fe fea5 	bl	8000984 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f814 	bl	8001c70 <HAL_SD_InitCard>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00a      	b.n	8001c68 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001c70:	b5b0      	push	{r4, r5, r7, lr}
 8001c72:	b08e      	sub	sp, #56	@ 0x38
 8001c74:	af04      	add	r7, sp, #16
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001c8c:	2376      	movs	r3, #118	@ 0x76
 8001c8e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681d      	ldr	r5, [r3, #0]
 8001c94:	466c      	mov	r4, sp
 8001c96:	f107 0318 	add.w	r3, r7, #24
 8001c9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca8:	4628      	mov	r0, r5
 8001caa:	f001 fd57 	bl	800375c <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001cae:	4b2a      	ldr	r3, [pc, #168]	@ (8001d58 <HAL_SD_InitCard+0xe8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 fd98 	bl	80037ee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001cbe:	4b26      	ldr	r3, [pc, #152]	@ (8001d58 <HAL_SD_InitCard+0xe8>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001cc4:	2002      	movs	r0, #2
 8001cc6:	f7ff f871 	bl	8000dac <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 ff14 	bl	8002af8 <SD_PowerON>
 8001cd0:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00b      	beq.n	8001cf0 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e02e      	b.n	8001d4e <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fe33 	bl	800295c <SD_InitCard>
 8001cf6:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e01b      	b.n	8001d4e <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f001 fdf7 	bl	8003912 <SDMMC_CmdBlockLength>
 8001d24:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00f      	beq.n	8001d4c <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <HAL_SD_InitCard+0xec>)
 8001d32:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3728      	adds	r7, #40	@ 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bdb0      	pop	{r4, r5, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	422580a0 	.word	0x422580a0
 8001d5c:	004005ff 	.word	0x004005ff

08001d60 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b092      	sub	sp, #72	@ 0x48
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001d6e:	f7ff f811 	bl	8000d94 <HAL_GetTick>
 8001d72:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d107      	bne.n	8001d92 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d86:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1c5      	b.n	800211e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	f040 81b8 	bne.w	8002110 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001da6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	441a      	add	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d907      	bls.n	8001dc4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e1ac      	b.n	800211e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d002      	beq.n	8001de2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dde:	025b      	lsls	r3, r3, #9
 8001de0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001de6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	025b      	lsls	r3, r3, #9
 8001dec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001dee:	2390      	movs	r3, #144	@ 0x90
 8001df0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001df2:	2302      	movs	r3, #2
 8001df4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f107 0214 	add.w	r2, r7, #20
 8001e06:	4611      	mov	r1, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f001 fd56 	bl	80038ba <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d90a      	bls.n	8001e2a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2202      	movs	r2, #2
 8001e18:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e20:	4618      	mov	r0, r3
 8001e22:	f001 fdba 	bl	800399a <SDMMC_CmdReadMultiBlock>
 8001e26:	6478      	str	r0, [r7, #68]	@ 0x44
 8001e28:	e009      	b.n	8001e3e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e36:	4618      	mov	r0, r3
 8001e38:	f001 fd8d 	bl	8003956 <SDMMC_CmdReadSingleBlock>
 8001e3c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d012      	beq.n	8001e6a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a7e      	ldr	r2, [pc, #504]	@ (8002044 <HAL_SD_ReadBlocks+0x2e4>)
 8001e4a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e52:	431a      	orrs	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e159      	b.n	800211e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001e6e:	e061      	b.n	8001f34 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d03c      	beq.n	8001ef8 <HAL_SD_ReadBlocks+0x198>
 8001e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d039      	beq.n	8001ef8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e88:	e033      	b.n	8001ef2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f001 fc8f 	bl	80037b2 <SDIO_ReadFIFO>
 8001e94:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8001ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eb2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8001eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ec2:	0c1b      	lsrs	r3, r3, #16
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ecc:	3301      	adds	r3, #1
 8001ece:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8001ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed8:	0e1b      	lsrs	r3, r3, #24
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ede:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8001ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8001eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eee:	3301      	adds	r3, #1
 8001ef0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ef4:	2b07      	cmp	r3, #7
 8001ef6:	d9c8      	bls.n	8001e8a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001ef8:	f7fe ff4c 	bl	8000d94 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d902      	bls.n	8001f0e <HAL_SD_ReadBlocks+0x1ae>
 8001f08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d112      	bne.n	8001f34 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a4c      	ldr	r2, [pc, #304]	@ (8002044 <HAL_SD_ReadBlocks+0x2e4>)
 8001f14:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e0f4      	b.n	800211e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f3a:	f240 332a 	movw	r3, #810	@ 0x32a
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d095      	beq.n	8001e70 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d022      	beq.n	8001f98 <HAL_SD_ReadBlocks+0x238>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d91f      	bls.n	8001f98 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d01b      	beq.n	8001f98 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 fd7f 	bl	8003a68 <SDMMC_CmdStopTransfer>
 8001f6a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d012      	beq.n	8001f98 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a33      	ldr	r2, [pc, #204]	@ (8002044 <HAL_SD_ReadBlocks+0x2e4>)
 8001f78:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f80:	431a      	orrs	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0c2      	b.n	800211e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_SD_ReadBlocks+0x254>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d012      	beq.n	8001fda <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a22      	ldr	r2, [pc, #136]	@ (8002044 <HAL_SD_ReadBlocks+0x2e4>)
 8001fba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc0:	f043 0208 	orr.w	r2, r3, #8
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0a1      	b.n	800211e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d012      	beq.n	800200e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a15      	ldr	r2, [pc, #84]	@ (8002044 <HAL_SD_ReadBlocks+0x2e4>)
 8001fee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff4:	f043 0202 	orr.w	r2, r3, #2
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e087      	b.n	800211e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b00      	cmp	r3, #0
 800201a:	d064      	beq.n	80020e6 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a08      	ldr	r2, [pc, #32]	@ (8002044 <HAL_SD_ReadBlocks+0x2e4>)
 8002022:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06d      	b.n	800211e <HAL_SD_ReadBlocks+0x3be>
 8002042:	bf00      	nop
 8002044:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f001 fbb0 	bl	80037b2 <SDIO_ReadFIFO>
 8002052:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002056:	b2da      	uxtb	r2, r3
 8002058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800205a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800205c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800205e:	3301      	adds	r3, #1
 8002060:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002064:	3b01      	subs	r3, #1
 8002066:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	b2da      	uxtb	r2, r3
 800206e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002070:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002074:	3301      	adds	r3, #1
 8002076:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800207a:	3b01      	subs	r3, #1
 800207c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800207e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002080:	0c1b      	lsrs	r3, r3, #16
 8002082:	b2da      	uxtb	r2, r3
 8002084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002086:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800208a:	3301      	adds	r3, #1
 800208c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800208e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002090:	3b01      	subs	r3, #1
 8002092:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002096:	0e1b      	lsrs	r3, r3, #24
 8002098:	b2da      	uxtb	r2, r3
 800209a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800209c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800209e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020a0:	3301      	adds	r3, #1
 80020a2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80020a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020a6:	3b01      	subs	r3, #1
 80020a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80020aa:	f7fe fe73 	bl	8000d94 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d902      	bls.n	80020c0 <HAL_SD_ReadBlocks+0x360>
 80020ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d112      	bne.n	80020e6 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a18      	ldr	r2, [pc, #96]	@ (8002128 <HAL_SD_ReadBlocks+0x3c8>)
 80020c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e01b      	b.n	800211e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_SD_ReadBlocks+0x39a>
 80020f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1a6      	bne.n	8002048 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002102:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	e006      	b.n	800211e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002114:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
  }
}
 800211e:	4618      	mov	r0, r3
 8002120:	3748      	adds	r7, #72	@ 0x48
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	004005ff 	.word	0x004005ff

0800212c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b092      	sub	sp, #72	@ 0x48
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800213a:	f7fe fe2b 	bl	8000d94 <HAL_GetTick>
 800213e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d107      	bne.n	800215e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002152:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e16d      	b.n	800243a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	f040 8160 	bne.w	800242c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002172:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	441a      	add	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217c:	429a      	cmp	r2, r3
 800217e:	d907      	bls.n	8002190 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002184:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e154      	b.n	800243a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2203      	movs	r2, #3
 8002194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2200      	movs	r2, #0
 800219e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d002      	beq.n	80021ae <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80021a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021aa:	025b      	lsls	r3, r3, #9
 80021ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021b2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	025b      	lsls	r3, r3, #9
 80021b8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80021ba:	2390      	movs	r3, #144	@ 0x90
 80021bc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80021c6:	2301      	movs	r3, #1
 80021c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f107 0218 	add.w	r2, r7, #24
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f001 fb70 	bl	80038ba <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d90a      	bls.n	80021f6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2220      	movs	r2, #32
 80021e4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021ec:	4618      	mov	r0, r3
 80021ee:	f001 fc18 	bl	8003a22 <SDMMC_CmdWriteMultiBlock>
 80021f2:	6478      	str	r0, [r7, #68]	@ 0x44
 80021f4:	e009      	b.n	800220a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2210      	movs	r2, #16
 80021fa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002202:	4618      	mov	r0, r3
 8002204:	f001 fbeb 	bl	80039de <SDMMC_CmdWriteSingleBlock>
 8002208:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800220a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800220c:	2b00      	cmp	r3, #0
 800220e:	d012      	beq.n	8002236 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a8b      	ldr	r2, [pc, #556]	@ (8002444 <HAL_SD_WriteBlocks+0x318>)
 8002216:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800221c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800221e:	431a      	orrs	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e101      	b.n	800243a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800223a:	e065      	b.n	8002308 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d040      	beq.n	80022cc <HAL_SD_WriteBlocks+0x1a0>
 800224a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800224c:	2b00      	cmp	r3, #0
 800224e:	d03d      	beq.n	80022cc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002250:	2300      	movs	r3, #0
 8002252:	643b      	str	r3, [r7, #64]	@ 0x40
 8002254:	e037      	b.n	80022c6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800225c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800225e:	3301      	adds	r3, #1
 8002260:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002264:	3b01      	subs	r3, #1
 8002266:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	021a      	lsls	r2, r3, #8
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002276:	3301      	adds	r3, #1
 8002278:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800227a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800227c:	3b01      	subs	r3, #1
 800227e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800228c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228e:	3301      	adds	r3, #1
 8002290:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002294:	3b01      	subs	r3, #1
 8002296:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	061a      	lsls	r2, r3, #24
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80022a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a6:	3301      	adds	r3, #1
 80022a8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80022aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ac:	3b01      	subs	r3, #1
 80022ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f107 0214 	add.w	r2, r7, #20
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 fa86 	bl	80037cc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80022c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c2:	3301      	adds	r3, #1
 80022c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80022c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c8:	2b07      	cmp	r3, #7
 80022ca:	d9c4      	bls.n	8002256 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80022cc:	f7fe fd62 	bl	8000d94 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80022d8:	429a      	cmp	r2, r3
 80022da:	d902      	bls.n	80022e2 <HAL_SD_WriteBlocks+0x1b6>
 80022dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d112      	bne.n	8002308 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a57      	ldr	r2, [pc, #348]	@ (8002444 <HAL_SD_WriteBlocks+0x318>)
 80022e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022f0:	431a      	orrs	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e098      	b.n	800243a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800230e:	f240 331a 	movw	r3, #794	@ 0x31a
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d091      	beq.n	800223c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800231e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d022      	beq.n	800236c <HAL_SD_WriteBlocks+0x240>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d91f      	bls.n	800236c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002330:	2b03      	cmp	r3, #3
 8002332:	d01b      	beq.n	800236c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f001 fb95 	bl	8003a68 <SDMMC_CmdStopTransfer>
 800233e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002342:	2b00      	cmp	r3, #0
 8002344:	d012      	beq.n	800236c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a3e      	ldr	r2, [pc, #248]	@ (8002444 <HAL_SD_WriteBlocks+0x318>)
 800234c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002354:	431a      	orrs	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e066      	b.n	800243a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_SD_WriteBlocks+0x25c>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002384:	2b00      	cmp	r3, #0
 8002386:	d012      	beq.n	80023ae <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a2d      	ldr	r2, [pc, #180]	@ (8002444 <HAL_SD_WriteBlocks+0x318>)
 800238e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002394:	f043 0208 	orr.w	r2, r3, #8
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e045      	b.n	800243a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d012      	beq.n	80023e2 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a20      	ldr	r2, [pc, #128]	@ (8002444 <HAL_SD_WriteBlocks+0x318>)
 80023c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c8:	f043 0202 	orr.w	r2, r3, #2
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e02b      	b.n	800243a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d012      	beq.n	8002416 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a13      	ldr	r2, [pc, #76]	@ (8002444 <HAL_SD_WriteBlocks+0x318>)
 80023f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fc:	f043 0210 	orr.w	r2, r3, #16
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e011      	b.n	800243a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800241e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	e006      	b.n	800243a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002430:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
  }
}
 800243a:	4618      	mov	r0, r3
 800243c:	3748      	adds	r7, #72	@ 0x48
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	004005ff 	.word	0x004005ff

08002448 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002456:	0f9b      	lsrs	r3, r3, #30
 8002458:	b2da      	uxtb	r2, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002462:	0e9b      	lsrs	r3, r3, #26
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	b2da      	uxtb	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002474:	0e1b      	lsrs	r3, r3, #24
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	b2da      	uxtb	r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002486:	0c1b      	lsrs	r3, r3, #16
 8002488:	b2da      	uxtb	r2, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	b2da      	uxtb	r2, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024a8:	0d1b      	lsrs	r3, r3, #20
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024b4:	0c1b      	lsrs	r3, r3, #16
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024c6:	0bdb      	lsrs	r3, r3, #15
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024d8:	0b9b      	lsrs	r3, r3, #14
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024ea:	0b5b      	lsrs	r3, r3, #13
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024fc:	0b1b      	lsrs	r3, r3, #12
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	b2da      	uxtb	r2, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2200      	movs	r2, #0
 800250e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002514:	2b00      	cmp	r3, #0
 8002516:	d163      	bne.n	80025e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800251c:	009a      	lsls	r2, r3, #2
 800251e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002522:	4013      	ands	r3, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002528:	0f92      	lsrs	r2, r2, #30
 800252a:	431a      	orrs	r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002534:	0edb      	lsrs	r3, r3, #27
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	b2da      	uxtb	r2, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002546:	0e1b      	lsrs	r3, r3, #24
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	b2da      	uxtb	r2, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	b2da      	uxtb	r2, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800256a:	0c9b      	lsrs	r3, r3, #18
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	b2da      	uxtb	r2, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800257c:	0bdb      	lsrs	r3, r3, #15
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	b2da      	uxtb	r2, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	7e1b      	ldrb	r3, [r3, #24]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	3302      	adds	r3, #2
 80025a0:	2201      	movs	r2, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80025aa:	fb03 f202 	mul.w	r2, r3, r2
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	7a1b      	ldrb	r3, [r3, #8]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	2201      	movs	r2, #1
 80025be:	409a      	lsls	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80025cc:	0a52      	lsrs	r2, r2, #9
 80025ce:	fb03 f202 	mul.w	r2, r3, r2
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025dc:	661a      	str	r2, [r3, #96]	@ 0x60
 80025de:	e031      	b.n	8002644 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d11d      	bne.n	8002624 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025f6:	0c1b      	lsrs	r3, r3, #16
 80025f8:	431a      	orrs	r2, r3
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	3301      	adds	r3, #1
 8002604:	029a      	lsls	r2, r3, #10
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002618:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	661a      	str	r2, [r3, #96]	@ 0x60
 8002622:	e00f      	b.n	8002644 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a58      	ldr	r2, [pc, #352]	@ (800278c <HAL_SD_GetCardCSD+0x344>)
 800262a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002630:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e09d      	b.n	8002780 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002648:	0b9b      	lsrs	r3, r3, #14
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800265a:	09db      	lsrs	r3, r3, #7
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002662:	b2da      	uxtb	r2, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002672:	b2da      	uxtb	r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267c:	0fdb      	lsrs	r3, r3, #31
 800267e:	b2da      	uxtb	r2, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002688:	0f5b      	lsrs	r3, r3, #29
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	b2da      	uxtb	r2, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269a:	0e9b      	lsrs	r3, r3, #26
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ac:	0d9b      	lsrs	r3, r3, #22
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026be:	0d5b      	lsrs	r3, r3, #21
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026da:	0c1b      	lsrs	r3, r3, #16
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ee:	0bdb      	lsrs	r3, r3, #15
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002702:	0b9b      	lsrs	r3, r3, #14
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	b2da      	uxtb	r2, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002716:	0b5b      	lsrs	r3, r3, #13
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	b2da      	uxtb	r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272a:	0b1b      	lsrs	r3, r3, #12
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b2da      	uxtb	r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	b2da      	uxtb	r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	b2da      	uxtb	r2, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800276e:	b2da      	uxtb	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	004005ff 	.word	0x004005ff

08002790 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80027e8:	b5b0      	push	{r4, r5, r7, lr}
 80027ea:	b08e      	sub	sp, #56	@ 0x38
 80027ec:	af04      	add	r7, sp, #16
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2203      	movs	r2, #3
 80027fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002804:	2b03      	cmp	r3, #3
 8002806:	d02e      	beq.n	8002866 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800280e:	d106      	bne.n	800281e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002814:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	639a      	str	r2, [r3, #56]	@ 0x38
 800281c:	e029      	b.n	8002872 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002824:	d10a      	bne.n	800283c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fa1c 	bl	8002c64 <SD_WideBus_Enable>
 800282c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	639a      	str	r2, [r3, #56]	@ 0x38
 800283a:	e01a      	b.n	8002872 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10a      	bne.n	8002858 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fa59 	bl	8002cfa <SD_WideBus_Disable>
 8002848:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	639a      	str	r2, [r3, #56]	@ 0x38
 8002856:	e00c      	b.n	8002872 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	639a      	str	r2, [r3, #56]	@ 0x38
 8002864:	e005      	b.n	8002872 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a26      	ldr	r2, [pc, #152]	@ (8002918 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002880:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002890:	e01f      	b.n	80028d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681d      	ldr	r5, [r3, #0]
 80028b8:	466c      	mov	r4, sp
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028c6:	f107 0308 	add.w	r3, r7, #8
 80028ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028cc:	4628      	mov	r0, r5
 80028ce:	f000 ff45 	bl	800375c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 f819 	bl	8003912 <SDMMC_CmdBlockLength>
 80028e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00c      	beq.n	8002902 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <HAL_SD_ConfigWideBusOperation+0x130>)
 80028ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800290a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800290e:	4618      	mov	r0, r3
 8002910:	3728      	adds	r7, #40	@ 0x28
 8002912:	46bd      	mov	sp, r7
 8002914:	bdb0      	pop	{r4, r5, r7, pc}
 8002916:	bf00      	nop
 8002918:	004005ff 	.word	0x004005ff

0800291c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002928:	f107 030c 	add.w	r3, r7, #12
 800292c:	4619      	mov	r1, r3
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f970 	bl	8002c14 <SD_SendStatus>
 8002934:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	0a5b      	lsrs	r3, r3, #9
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002952:	693b      	ldr	r3, [r7, #16]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800295c:	b5b0      	push	{r4, r5, r7, lr}
 800295e:	b094      	sub	sp, #80	@ 0x50
 8002960:	af04      	add	r7, sp, #16
 8002962:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002964:	2301      	movs	r3, #1
 8002966:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f000 ff4c 	bl	800380a <SDIO_GetPowerState>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002978:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800297c:	e0b8      	b.n	8002af0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	2b03      	cmp	r3, #3
 8002984:	d02f      	beq.n	80029e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f001 f976 	bl	8003c7c <SDMMC_CmdSendCID>
 8002990:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <SD_InitCard+0x40>
    {
      return errorstate;
 8002998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800299a:	e0a9      	b.n	8002af0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 ff76 	bl	8003894 <SDIO_GetResponse>
 80029a8:	4602      	mov	r2, r0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2104      	movs	r1, #4
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 ff6d 	bl	8003894 <SDIO_GetResponse>
 80029ba:	4602      	mov	r2, r0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2108      	movs	r1, #8
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 ff64 	bl	8003894 <SDIO_GetResponse>
 80029cc:	4602      	mov	r2, r0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	210c      	movs	r1, #12
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 ff5b 	bl	8003894 <SDIO_GetResponse>
 80029de:	4602      	mov	r2, r0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d00d      	beq.n	8002a0a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f107 020e 	add.w	r2, r7, #14
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 f97c 	bl	8003cf6 <SDMMC_CmdSetRelAdd>
 80029fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <SD_InitCard+0xae>
    {
      return errorstate;
 8002a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a08:	e072      	b.n	8002af0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d036      	beq.n	8002a80 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002a12:	89fb      	ldrh	r3, [r7, #14]
 8002a14:	461a      	mov	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a22:	041b      	lsls	r3, r3, #16
 8002a24:	4619      	mov	r1, r3
 8002a26:	4610      	mov	r0, r2
 8002a28:	f001 f946 	bl	8003cb8 <SDMMC_CmdSendCSD>
 8002a2c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a36:	e05b      	b.n	8002af0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 ff28 	bl	8003894 <SDIO_GetResponse>
 8002a44:	4602      	mov	r2, r0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2104      	movs	r1, #4
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 ff1f 	bl	8003894 <SDIO_GetResponse>
 8002a56:	4602      	mov	r2, r0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2108      	movs	r1, #8
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 ff16 	bl	8003894 <SDIO_GetResponse>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	210c      	movs	r1, #12
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 ff0d 	bl	8003894 <SDIO_GetResponse>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2104      	movs	r1, #4
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 ff04 	bl	8003894 <SDIO_GetResponse>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	0d1a      	lsrs	r2, r3, #20
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002a94:	f107 0310 	add.w	r3, r7, #16
 8002a98:	4619      	mov	r1, r3
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff fcd4 	bl	8002448 <HAL_SD_GetCardCSD>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002aa6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002aaa:	e021      	b.n	8002af0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6819      	ldr	r1, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab4:	041b      	lsls	r3, r3, #16
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	461c      	mov	r4, r3
 8002aba:	4615      	mov	r5, r2
 8002abc:	4622      	mov	r2, r4
 8002abe:	462b      	mov	r3, r5
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	f000 fff3 	bl	8003aac <SDMMC_CmdSelDesel>
 8002ac6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <SD_InitCard+0x176>
  {
    return errorstate;
 8002ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad0:	e00e      	b.n	8002af0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681d      	ldr	r5, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	466c      	mov	r4, sp
 8002ada:	f103 0210 	add.w	r2, r3, #16
 8002ade:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ae0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae8:	4628      	mov	r0, r5
 8002aea:	f000 fe37 	bl	800375c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3740      	adds	r7, #64	@ 0x40
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bdb0      	pop	{r4, r5, r7, pc}

08002af8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 ffee 	bl	8003af2 <SDMMC_CmdGoIdleState>
 8002b16:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	e072      	b.n	8002c08 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 f801 	bl	8003b2e <SDMMC_CmdOperCond>
 8002b2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00d      	beq.n	8002b50 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 ffd7 	bl	8003af2 <SDMMC_CmdGoIdleState>
 8002b44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <SD_PowerON+0x5e>
    {
      return errorstate;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	e05b      	b.n	8002c08 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d137      	bne.n	8002bce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 f801 	bl	8003b6c <SDMMC_CmdAppCommand>
 8002b6a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d02d      	beq.n	8002bce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002b72:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002b76:	e047      	b.n	8002c08 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fff4 	bl	8003b6c <SDMMC_CmdAppCommand>
 8002b84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <SD_PowerON+0x98>
    {
      return errorstate;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	e03b      	b.n	8002c08 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	491e      	ldr	r1, [pc, #120]	@ (8002c10 <SD_PowerON+0x118>)
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 f80a 	bl	8003bb0 <SDMMC_CmdAppOperCommand>
 8002b9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ba4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002ba8:	e02e      	b.n	8002c08 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fe6f 	bl	8003894 <SDIO_GetResponse>
 8002bb6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	0fdb      	lsrs	r3, r3, #31
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <SD_PowerON+0xcc>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <SD_PowerON+0xce>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]

    count++;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d802      	bhi.n	8002bde <SD_PowerON+0xe6>
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0cc      	beq.n	8002b78 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d902      	bls.n	8002bee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002be8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bec:	e00c      	b.n	8002c08 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	645a      	str	r2, [r3, #68]	@ 0x44
 8002bfe:	e002      	b.n	8002c06 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	c1100000 	.word	0xc1100000

08002c14 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002c24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002c28:	e018      	b.n	8002c5c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c32:	041b      	lsls	r3, r3, #16
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f001 f87e 	bl	8003d38 <SDMMC_CmdSendStatus>
 8002c3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	e009      	b.n	8002c5c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fe20 	bl	8003894 <SDIO_GetResponse>
 8002c54:	4602      	mov	r2, r0
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fe0a 	bl	8003894 <SDIO_GetResponse>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c8a:	d102      	bne.n	8002c92 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002c8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c90:	e02f      	b.n	8002cf2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002c92:	f107 030c 	add.w	r3, r7, #12
 8002c96:	4619      	mov	r1, r3
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f879 	bl	8002d90 <SD_FindSCR>
 8002c9e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	e023      	b.n	8002cf2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01c      	beq.n	8002cee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f000 ff53 	bl	8003b6c <SDMMC_CmdAppCommand>
 8002cc6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	e00f      	b.n	8002cf2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 ff8c 	bl	8003bf6 <SDMMC_CmdBusWidth>
 8002cde:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	e003      	b.n	8002cf2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e001      	b.n	8002cf2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002cee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fdbf 	bl	8003894 <SDIO_GetResponse>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d20:	d102      	bne.n	8002d28 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002d22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d26:	e02f      	b.n	8002d88 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002d28:	f107 030c 	add.w	r3, r7, #12
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f82e 	bl	8002d90 <SD_FindSCR>
 8002d34:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	e023      	b.n	8002d88 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d01c      	beq.n	8002d84 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	4619      	mov	r1, r3
 8002d56:	4610      	mov	r0, r2
 8002d58:	f000 ff08 	bl	8003b6c <SDMMC_CmdAppCommand>
 8002d5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	e00f      	b.n	8002d88 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 ff41 	bl	8003bf6 <SDMMC_CmdBusWidth>
 8002d74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	e003      	b.n	8002d88 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e001      	b.n	8002d88 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002d84:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b08f      	sub	sp, #60	@ 0x3c
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002d9a:	f7fd fffb 	bl	8000d94 <HAL_GetTick>
 8002d9e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2108      	movs	r1, #8
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fdab 	bl	8003912 <SDMMC_CmdBlockLength>
 8002dbc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8002dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc6:	e0b9      	b.n	8002f3c <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f000 fec9 	bl	8003b6c <SDMMC_CmdAppCommand>
 8002dda:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8002de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de4:	e0aa      	b.n	8002f3c <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8002dec:	2308      	movs	r3, #8
 8002dee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002df0:	2330      	movs	r3, #48	@ 0x30
 8002df2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002df4:	2302      	movs	r3, #2
 8002df6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f107 0210 	add.w	r2, r7, #16
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fd55 	bl	80038ba <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 ff10 	bl	8003c3a <SDMMC_CmdSendSCR>
 8002e1a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d02a      	beq.n	8002e78 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8002e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e24:	e08a      	b.n	8002f3c <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00f      	beq.n	8002e54 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6819      	ldr	r1, [r3, #0]
 8002e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	f107 0208 	add.w	r2, r7, #8
 8002e40:	18d4      	adds	r4, r2, r3
 8002e42:	4608      	mov	r0, r1
 8002e44:	f000 fcb5 	bl	80037b2 <SDIO_ReadFIFO>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	6023      	str	r3, [r4, #0]
      index++;
 8002e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4e:	3301      	adds	r3, #1
 8002e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e52:	e006      	b.n	8002e62 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d012      	beq.n	8002e88 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8002e62:	f7fd ff97 	bl	8000d94 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e70:	d102      	bne.n	8002e78 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8002e72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002e76:	e061      	b.n	8002f3c <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0cf      	beq.n	8002e26 <SD_FindSCR+0x96>
 8002e86:	e000      	b.n	8002e8a <SD_FindSCR+0xfa>
      break;
 8002e88:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d106      	bne.n	8002ea6 <SD_FindSCR+0x116>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2208      	movs	r2, #8
 8002eac:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002eae:	2308      	movs	r3, #8
 8002eb0:	e044      	b.n	8002f3c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e037      	b.n	8002f3c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	e02a      	b.n	8002f3c <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002eee:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	061a      	lsls	r2, r3, #24
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002efc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002f06:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	0e1b      	lsrs	r3, r3, #24
 8002f0c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f10:	601a      	str	r2, [r3, #0]
    scr++;
 8002f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f14:	3304      	adds	r3, #4
 8002f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	061a      	lsls	r2, r3, #24
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002f24:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002f2e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	0e1b      	lsrs	r3, r3, #24
 8002f34:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f38:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	373c      	adds	r7, #60	@ 0x3c
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd90      	pop	{r4, r7, pc}

08002f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e042      	b.n	8002fdc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd fd72 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2224      	movs	r2, #36	@ 0x24
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f973 	bl	8003274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	@ 0x28
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b20      	cmp	r3, #32
 8003002:	d175      	bne.n	80030f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_UART_Transmit+0x2c>
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e06e      	b.n	80030f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2221      	movs	r2, #33	@ 0x21
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003022:	f7fd feb7 	bl	8000d94 <HAL_GetTick>
 8003026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	88fa      	ldrh	r2, [r7, #6]
 8003032:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800303c:	d108      	bne.n	8003050 <HAL_UART_Transmit+0x6c>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d104      	bne.n	8003050 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	e003      	b.n	8003058 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003054:	2300      	movs	r3, #0
 8003056:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003058:	e02e      	b.n	80030b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	2180      	movs	r1, #128	@ 0x80
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f848 	bl	80030fa <UART_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e03a      	b.n	80030f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10b      	bne.n	800309a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003090:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	3302      	adds	r3, #2
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	e007      	b.n	80030aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	781a      	ldrb	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	3301      	adds	r3, #1
 80030a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1cb      	bne.n	800305a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2200      	movs	r2, #0
 80030ca:	2140      	movs	r1, #64	@ 0x40
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f814 	bl	80030fa <UART_WaitOnFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e006      	b.n	80030f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e000      	b.n	80030f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b086      	sub	sp, #24
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	4613      	mov	r3, r2
 8003108:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800310a:	e03b      	b.n	8003184 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003112:	d037      	beq.n	8003184 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003114:	f7fd fe3e 	bl	8000d94 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	6a3a      	ldr	r2, [r7, #32]
 8003120:	429a      	cmp	r2, r3
 8003122:	d302      	bcc.n	800312a <UART_WaitOnFlagUntilTimeout+0x30>
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e03a      	b.n	80031a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d023      	beq.n	8003184 <UART_WaitOnFlagUntilTimeout+0x8a>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b80      	cmp	r3, #128	@ 0x80
 8003140:	d020      	beq.n	8003184 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b40      	cmp	r3, #64	@ 0x40
 8003146:	d01d      	beq.n	8003184 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b08      	cmp	r3, #8
 8003154:	d116      	bne.n	8003184 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f81d 	bl	80031ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2208      	movs	r2, #8
 8003176:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e00f      	b.n	80031a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4013      	ands	r3, r2
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	429a      	cmp	r2, r3
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d0b4      	beq.n	800310c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b095      	sub	sp, #84	@ 0x54
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031be:	e853 3f00 	ldrex	r3, [r3]
 80031c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	330c      	adds	r3, #12
 80031d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80031d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031dc:	e841 2300 	strex	r3, r2, [r1]
 80031e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e5      	bne.n	80031b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3314      	adds	r3, #20
 80031ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	e853 3f00 	ldrex	r3, [r3]
 80031f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3314      	adds	r3, #20
 8003206:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003208:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800320a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800320e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003210:	e841 2300 	strex	r3, r2, [r1]
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e5      	bne.n	80031e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003220:	2b01      	cmp	r3, #1
 8003222:	d119      	bne.n	8003258 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	e853 3f00 	ldrex	r3, [r3]
 8003232:	60bb      	str	r3, [r7, #8]
   return(result);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f023 0310 	bic.w	r3, r3, #16
 800323a:	647b      	str	r3, [r7, #68]	@ 0x44
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	330c      	adds	r3, #12
 8003242:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003244:	61ba      	str	r2, [r7, #24]
 8003246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003248:	6979      	ldr	r1, [r7, #20]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	e841 2300 	strex	r3, r2, [r1]
 8003250:	613b      	str	r3, [r7, #16]
   return(result);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e5      	bne.n	8003224 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003266:	bf00      	nop
 8003268:	3754      	adds	r7, #84	@ 0x54
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003278:	b0c0      	sub	sp, #256	@ 0x100
 800327a:	af00      	add	r7, sp, #0
 800327c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003290:	68d9      	ldr	r1, [r3, #12]
 8003292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	ea40 0301 	orr.w	r3, r0, r1
 800329c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800329e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032cc:	f021 010c 	bic.w	r1, r1, #12
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032da:	430b      	orrs	r3, r1
 80032dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ee:	6999      	ldr	r1, [r3, #24]
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	ea40 0301 	orr.w	r3, r0, r1
 80032fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4b8f      	ldr	r3, [pc, #572]	@ (8003540 <UART_SetConfig+0x2cc>)
 8003304:	429a      	cmp	r2, r3
 8003306:	d005      	beq.n	8003314 <UART_SetConfig+0xa0>
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b8d      	ldr	r3, [pc, #564]	@ (8003544 <UART_SetConfig+0x2d0>)
 8003310:	429a      	cmp	r2, r3
 8003312:	d104      	bne.n	800331e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003314:	f7fe fc68 	bl	8001be8 <HAL_RCC_GetPCLK2Freq>
 8003318:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800331c:	e003      	b.n	8003326 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800331e:	f7fe fc4f 	bl	8001bc0 <HAL_RCC_GetPCLK1Freq>
 8003322:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003330:	f040 810c 	bne.w	800354c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003338:	2200      	movs	r2, #0
 800333a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800333e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003342:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003346:	4622      	mov	r2, r4
 8003348:	462b      	mov	r3, r5
 800334a:	1891      	adds	r1, r2, r2
 800334c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800334e:	415b      	adcs	r3, r3
 8003350:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003352:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003356:	4621      	mov	r1, r4
 8003358:	eb12 0801 	adds.w	r8, r2, r1
 800335c:	4629      	mov	r1, r5
 800335e:	eb43 0901 	adc.w	r9, r3, r1
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800336e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003376:	4690      	mov	r8, r2
 8003378:	4699      	mov	r9, r3
 800337a:	4623      	mov	r3, r4
 800337c:	eb18 0303 	adds.w	r3, r8, r3
 8003380:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003384:	462b      	mov	r3, r5
 8003386:	eb49 0303 	adc.w	r3, r9, r3
 800338a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800339a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800339e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033a2:	460b      	mov	r3, r1
 80033a4:	18db      	adds	r3, r3, r3
 80033a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80033a8:	4613      	mov	r3, r2
 80033aa:	eb42 0303 	adc.w	r3, r2, r3
 80033ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80033b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80033b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033b8:	f7fc ff5a 	bl	8000270 <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4b61      	ldr	r3, [pc, #388]	@ (8003548 <UART_SetConfig+0x2d4>)
 80033c2:	fba3 2302 	umull	r2, r3, r3, r2
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	011c      	lsls	r4, r3, #4
 80033ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033dc:	4642      	mov	r2, r8
 80033de:	464b      	mov	r3, r9
 80033e0:	1891      	adds	r1, r2, r2
 80033e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033e4:	415b      	adcs	r3, r3
 80033e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033ec:	4641      	mov	r1, r8
 80033ee:	eb12 0a01 	adds.w	sl, r2, r1
 80033f2:	4649      	mov	r1, r9
 80033f4:	eb43 0b01 	adc.w	fp, r3, r1
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003404:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800340c:	4692      	mov	sl, r2
 800340e:	469b      	mov	fp, r3
 8003410:	4643      	mov	r3, r8
 8003412:	eb1a 0303 	adds.w	r3, sl, r3
 8003416:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800341a:	464b      	mov	r3, r9
 800341c:	eb4b 0303 	adc.w	r3, fp, r3
 8003420:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003430:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003434:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003438:	460b      	mov	r3, r1
 800343a:	18db      	adds	r3, r3, r3
 800343c:	643b      	str	r3, [r7, #64]	@ 0x40
 800343e:	4613      	mov	r3, r2
 8003440:	eb42 0303 	adc.w	r3, r2, r3
 8003444:	647b      	str	r3, [r7, #68]	@ 0x44
 8003446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800344a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800344e:	f7fc ff0f 	bl	8000270 <__aeabi_uldivmod>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4611      	mov	r1, r2
 8003458:	4b3b      	ldr	r3, [pc, #236]	@ (8003548 <UART_SetConfig+0x2d4>)
 800345a:	fba3 2301 	umull	r2, r3, r3, r1
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2264      	movs	r2, #100	@ 0x64
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	1acb      	subs	r3, r1, r3
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800346e:	4b36      	ldr	r3, [pc, #216]	@ (8003548 <UART_SetConfig+0x2d4>)
 8003470:	fba3 2302 	umull	r2, r3, r3, r2
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800347c:	441c      	add	r4, r3
 800347e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003482:	2200      	movs	r2, #0
 8003484:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003488:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800348c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003490:	4642      	mov	r2, r8
 8003492:	464b      	mov	r3, r9
 8003494:	1891      	adds	r1, r2, r2
 8003496:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003498:	415b      	adcs	r3, r3
 800349a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800349c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80034a0:	4641      	mov	r1, r8
 80034a2:	1851      	adds	r1, r2, r1
 80034a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80034a6:	4649      	mov	r1, r9
 80034a8:	414b      	adcs	r3, r1
 80034aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80034b8:	4659      	mov	r1, fp
 80034ba:	00cb      	lsls	r3, r1, #3
 80034bc:	4651      	mov	r1, sl
 80034be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034c2:	4651      	mov	r1, sl
 80034c4:	00ca      	lsls	r2, r1, #3
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	4603      	mov	r3, r0
 80034cc:	4642      	mov	r2, r8
 80034ce:	189b      	adds	r3, r3, r2
 80034d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034d4:	464b      	mov	r3, r9
 80034d6:	460a      	mov	r2, r1
 80034d8:	eb42 0303 	adc.w	r3, r2, r3
 80034dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034f4:	460b      	mov	r3, r1
 80034f6:	18db      	adds	r3, r3, r3
 80034f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034fa:	4613      	mov	r3, r2
 80034fc:	eb42 0303 	adc.w	r3, r2, r3
 8003500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003506:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800350a:	f7fc feb1 	bl	8000270 <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4b0d      	ldr	r3, [pc, #52]	@ (8003548 <UART_SetConfig+0x2d4>)
 8003514:	fba3 1302 	umull	r1, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	2164      	movs	r1, #100	@ 0x64
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	3332      	adds	r3, #50	@ 0x32
 8003526:	4a08      	ldr	r2, [pc, #32]	@ (8003548 <UART_SetConfig+0x2d4>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	f003 0207 	and.w	r2, r3, #7
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4422      	add	r2, r4
 800353a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800353c:	e106      	b.n	800374c <UART_SetConfig+0x4d8>
 800353e:	bf00      	nop
 8003540:	40011000 	.word	0x40011000
 8003544:	40011400 	.word	0x40011400
 8003548:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800354c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003550:	2200      	movs	r2, #0
 8003552:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003556:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800355a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800355e:	4642      	mov	r2, r8
 8003560:	464b      	mov	r3, r9
 8003562:	1891      	adds	r1, r2, r2
 8003564:	6239      	str	r1, [r7, #32]
 8003566:	415b      	adcs	r3, r3
 8003568:	627b      	str	r3, [r7, #36]	@ 0x24
 800356a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800356e:	4641      	mov	r1, r8
 8003570:	1854      	adds	r4, r2, r1
 8003572:	4649      	mov	r1, r9
 8003574:	eb43 0501 	adc.w	r5, r3, r1
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	00eb      	lsls	r3, r5, #3
 8003582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003586:	00e2      	lsls	r2, r4, #3
 8003588:	4614      	mov	r4, r2
 800358a:	461d      	mov	r5, r3
 800358c:	4643      	mov	r3, r8
 800358e:	18e3      	adds	r3, r4, r3
 8003590:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003594:	464b      	mov	r3, r9
 8003596:	eb45 0303 	adc.w	r3, r5, r3
 800359a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800359e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035ba:	4629      	mov	r1, r5
 80035bc:	008b      	lsls	r3, r1, #2
 80035be:	4621      	mov	r1, r4
 80035c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c4:	4621      	mov	r1, r4
 80035c6:	008a      	lsls	r2, r1, #2
 80035c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035cc:	f7fc fe50 	bl	8000270 <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4b60      	ldr	r3, [pc, #384]	@ (8003758 <UART_SetConfig+0x4e4>)
 80035d6:	fba3 2302 	umull	r2, r3, r3, r2
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	011c      	lsls	r4, r3, #4
 80035de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035f0:	4642      	mov	r2, r8
 80035f2:	464b      	mov	r3, r9
 80035f4:	1891      	adds	r1, r2, r2
 80035f6:	61b9      	str	r1, [r7, #24]
 80035f8:	415b      	adcs	r3, r3
 80035fa:	61fb      	str	r3, [r7, #28]
 80035fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003600:	4641      	mov	r1, r8
 8003602:	1851      	adds	r1, r2, r1
 8003604:	6139      	str	r1, [r7, #16]
 8003606:	4649      	mov	r1, r9
 8003608:	414b      	adcs	r3, r1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003618:	4659      	mov	r1, fp
 800361a:	00cb      	lsls	r3, r1, #3
 800361c:	4651      	mov	r1, sl
 800361e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003622:	4651      	mov	r1, sl
 8003624:	00ca      	lsls	r2, r1, #3
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	4603      	mov	r3, r0
 800362c:	4642      	mov	r2, r8
 800362e:	189b      	adds	r3, r3, r2
 8003630:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003634:	464b      	mov	r3, r9
 8003636:	460a      	mov	r2, r1
 8003638:	eb42 0303 	adc.w	r3, r2, r3
 800363c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	67bb      	str	r3, [r7, #120]	@ 0x78
 800364a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003658:	4649      	mov	r1, r9
 800365a:	008b      	lsls	r3, r1, #2
 800365c:	4641      	mov	r1, r8
 800365e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003662:	4641      	mov	r1, r8
 8003664:	008a      	lsls	r2, r1, #2
 8003666:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800366a:	f7fc fe01 	bl	8000270 <__aeabi_uldivmod>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4611      	mov	r1, r2
 8003674:	4b38      	ldr	r3, [pc, #224]	@ (8003758 <UART_SetConfig+0x4e4>)
 8003676:	fba3 2301 	umull	r2, r3, r3, r1
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	2264      	movs	r2, #100	@ 0x64
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	1acb      	subs	r3, r1, r3
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	3332      	adds	r3, #50	@ 0x32
 8003688:	4a33      	ldr	r2, [pc, #204]	@ (8003758 <UART_SetConfig+0x4e4>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003694:	441c      	add	r4, r3
 8003696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800369a:	2200      	movs	r2, #0
 800369c:	673b      	str	r3, [r7, #112]	@ 0x70
 800369e:	677a      	str	r2, [r7, #116]	@ 0x74
 80036a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80036a4:	4642      	mov	r2, r8
 80036a6:	464b      	mov	r3, r9
 80036a8:	1891      	adds	r1, r2, r2
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	415b      	adcs	r3, r3
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036b4:	4641      	mov	r1, r8
 80036b6:	1851      	adds	r1, r2, r1
 80036b8:	6039      	str	r1, [r7, #0]
 80036ba:	4649      	mov	r1, r9
 80036bc:	414b      	adcs	r3, r1
 80036be:	607b      	str	r3, [r7, #4]
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036cc:	4659      	mov	r1, fp
 80036ce:	00cb      	lsls	r3, r1, #3
 80036d0:	4651      	mov	r1, sl
 80036d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036d6:	4651      	mov	r1, sl
 80036d8:	00ca      	lsls	r2, r1, #3
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	4642      	mov	r2, r8
 80036e2:	189b      	adds	r3, r3, r2
 80036e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036e6:	464b      	mov	r3, r9
 80036e8:	460a      	mov	r2, r1
 80036ea:	eb42 0303 	adc.w	r3, r2, r3
 80036ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80036fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003708:	4649      	mov	r1, r9
 800370a:	008b      	lsls	r3, r1, #2
 800370c:	4641      	mov	r1, r8
 800370e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003712:	4641      	mov	r1, r8
 8003714:	008a      	lsls	r2, r1, #2
 8003716:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800371a:	f7fc fda9 	bl	8000270 <__aeabi_uldivmod>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <UART_SetConfig+0x4e4>)
 8003724:	fba3 1302 	umull	r1, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	2164      	movs	r1, #100	@ 0x64
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	3332      	adds	r3, #50	@ 0x32
 8003736:	4a08      	ldr	r2, [pc, #32]	@ (8003758 <UART_SetConfig+0x4e4>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	f003 020f 	and.w	r2, r3, #15
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4422      	add	r2, r4
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003752:	46bd      	mov	sp, r7
 8003754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003758:	51eb851f 	.word	0x51eb851f

0800375c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800375c:	b084      	sub	sp, #16
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	f107 001c 	add.w	r0, r7, #28
 800376a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003772:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003774:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003776:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800377a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800377c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800377e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8003782:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8003786:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8003796:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	b004      	add	sp, #16
 80037b0:	4770      	bx	lr

080037b2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2203      	movs	r2, #3
 80037fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0303 	and.w	r3, r3, #3
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003844:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800384a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003850:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003860:	f023 030f 	bic.w	r3, r3, #15
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	b2db      	uxtb	r3, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3314      	adds	r3, #20
 80038a2:	461a      	mov	r2, r3
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	4413      	add	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
}  
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80038e0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80038e6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80038ec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8003904:	2300      	movs	r3, #0

}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b088      	sub	sp, #32
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003920:	2310      	movs	r3, #16
 8003922:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003924:	2340      	movs	r3, #64	@ 0x40
 8003926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800392c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003930:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003932:	f107 0308 	add.w	r3, r7, #8
 8003936:	4619      	mov	r1, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ff74 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800393e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003942:	2110      	movs	r1, #16
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fa19 	bl	8003d7c <SDMMC_GetCmdResp1>
 800394a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800394c:	69fb      	ldr	r3, [r7, #28]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b088      	sub	sp, #32
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003964:	2311      	movs	r3, #17
 8003966:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003968:	2340      	movs	r3, #64	@ 0x40
 800396a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003974:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003976:	f107 0308 	add.w	r3, r7, #8
 800397a:	4619      	mov	r1, r3
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff52 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003986:	2111      	movs	r1, #17
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f9f7 	bl	8003d7c <SDMMC_GetCmdResp1>
 800398e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003990:	69fb      	ldr	r3, [r7, #28]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b088      	sub	sp, #32
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80039a8:	2312      	movs	r3, #18
 80039aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039ac:	2340      	movs	r3, #64	@ 0x40
 80039ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039ba:	f107 0308 	add.w	r3, r7, #8
 80039be:	4619      	mov	r1, r3
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ff30 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80039c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ca:	2112      	movs	r1, #18
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f9d5 	bl	8003d7c <SDMMC_GetCmdResp1>
 80039d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039d4:	69fb      	ldr	r3, [r7, #28]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b088      	sub	sp, #32
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80039ec:	2318      	movs	r3, #24
 80039ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039f0:	2340      	movs	r3, #64	@ 0x40
 80039f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039fe:	f107 0308 	add.w	r3, r7, #8
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ff0e 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0e:	2118      	movs	r1, #24
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f9b3 	bl	8003d7c <SDMMC_GetCmdResp1>
 8003a16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a18:	69fb      	ldr	r3, [r7, #28]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b088      	sub	sp, #32
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003a30:	2319      	movs	r3, #25
 8003a32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a34:	2340      	movs	r3, #64	@ 0x40
 8003a36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a42:	f107 0308 	add.w	r3, r7, #8
 8003a46:	4619      	mov	r1, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff feec 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a52:	2119      	movs	r1, #25
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f991 	bl	8003d7c <SDMMC_GetCmdResp1>
 8003a5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003a74:	230c      	movs	r3, #12
 8003a76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a78:	2340      	movs	r3, #64	@ 0x40
 8003a7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a86:	f107 0308 	add.w	r3, r7, #8
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff feca 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003a92:	4a05      	ldr	r2, [pc, #20]	@ (8003aa8 <SDMMC_CmdStopTransfer+0x40>)
 8003a94:	210c      	movs	r1, #12
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f970 	bl	8003d7c <SDMMC_GetCmdResp1>
 8003a9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3720      	adds	r7, #32
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	05f5e100 	.word	0x05f5e100

08003aac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	@ 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003abc:	2307      	movs	r3, #7
 8003abe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ac0:	2340      	movs	r3, #64	@ 0x40
 8003ac2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ac8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003acc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ace:	f107 0310 	add.w	r3, r7, #16
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7ff fea6 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ade:	2107      	movs	r1, #7
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f94b 	bl	8003d7c <SDMMC_GetCmdResp1>
 8003ae6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3728      	adds	r7, #40	@ 0x28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b088      	sub	sp, #32
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003b02:	2300      	movs	r3, #0
 8003b04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b10:	f107 0308 	add.w	r3, r7, #8
 8003b14:	4619      	mov	r1, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fe85 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fb65 	bl	80041ec <SDMMC_GetCmdError>
 8003b22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b24:	69fb      	ldr	r3, [r7, #28]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b088      	sub	sp, #32
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003b36:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8003b3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003b3c:	2308      	movs	r3, #8
 8003b3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b40:	2340      	movs	r3, #64	@ 0x40
 8003b42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b4e:	f107 0308 	add.w	r3, r7, #8
 8003b52:	4619      	mov	r1, r3
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff fe66 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 faf8 	bl	8004150 <SDMMC_GetCmdResp7>
 8003b60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b62:	69fb      	ldr	r3, [r7, #28]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3720      	adds	r7, #32
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003b7a:	2337      	movs	r3, #55	@ 0x37
 8003b7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b7e:	2340      	movs	r3, #64	@ 0x40
 8003b80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b8c:	f107 0308 	add.w	r3, r7, #8
 8003b90:	4619      	mov	r1, r3
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff fe47 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9c:	2137      	movs	r1, #55	@ 0x37
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f8ec 	bl	8003d7c <SDMMC_GetCmdResp1>
 8003ba4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003bc6:	2329      	movs	r3, #41	@ 0x29
 8003bc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003bca:	2340      	movs	r3, #64	@ 0x40
 8003bcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bd8:	f107 0308 	add.w	r3, r7, #8
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff fe21 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f9ff 	bl	8003fe8 <SDMMC_GetCmdResp3>
 8003bea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bec:	69fb      	ldr	r3, [r7, #28]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b088      	sub	sp, #32
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003c04:	2306      	movs	r3, #6
 8003c06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c08:	2340      	movs	r3, #64	@ 0x40
 8003c0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c16:	f107 0308 	add.w	r3, r7, #8
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff fe02 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c26:	2106      	movs	r1, #6
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f8a7 	bl	8003d7c <SDMMC_GetCmdResp1>
 8003c2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c30:	69fb      	ldr	r3, [r7, #28]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3720      	adds	r7, #32
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b088      	sub	sp, #32
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003c46:	2333      	movs	r3, #51	@ 0x33
 8003c48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c4a:	2340      	movs	r3, #64	@ 0x40
 8003c4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c58:	f107 0308 	add.w	r3, r7, #8
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fde1 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c68:	2133      	movs	r1, #51	@ 0x33
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f886 	bl	8003d7c <SDMMC_GetCmdResp1>
 8003c70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c72:	69fb      	ldr	r3, [r7, #28]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003c8c:	23c0      	movs	r3, #192	@ 0xc0
 8003c8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c9a:	f107 0308 	add.w	r3, r7, #8
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff fdc0 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f956 	bl	8003f58 <SDMMC_GetCmdResp2>
 8003cac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cae:	69fb      	ldr	r3, [r7, #28]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3720      	adds	r7, #32
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003cc6:	2309      	movs	r3, #9
 8003cc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003cca:	23c0      	movs	r3, #192	@ 0xc0
 8003ccc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cd8:	f107 0308 	add.w	r3, r7, #8
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff fda1 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f937 	bl	8003f58 <SDMMC_GetCmdResp2>
 8003cea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cec:	69fb      	ldr	r3, [r7, #28]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b088      	sub	sp, #32
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003d04:	2303      	movs	r3, #3
 8003d06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d08:	2340      	movs	r3, #64	@ 0x40
 8003d0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d16:	f107 0308 	add.w	r3, r7, #8
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fd82 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	2103      	movs	r1, #3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f99c 	bl	8004064 <SDMMC_GetCmdResp6>
 8003d2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003d46:	230d      	movs	r3, #13
 8003d48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d4a:	2340      	movs	r3, #64	@ 0x40
 8003d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d58:	f107 0308 	add.w	r3, r7, #8
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff fd61 	bl	8003826 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d68:	210d      	movs	r1, #13
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f806 	bl	8003d7c <SDMMC_GetCmdResp1>
 8003d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d72:	69fb      	ldr	r3, [r7, #28]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	460b      	mov	r3, r1
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003d8a:	4b70      	ldr	r3, [pc, #448]	@ (8003f4c <SDMMC_GetCmdResp1+0x1d0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a70      	ldr	r2, [pc, #448]	@ (8003f50 <SDMMC_GetCmdResp1+0x1d4>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	0a5a      	lsrs	r2, r3, #9
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	1e5a      	subs	r2, r3, #1
 8003da2:	61fa      	str	r2, [r7, #28]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d102      	bne.n	8003dae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003da8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003dac:	e0c9      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ef      	beq.n	8003d9e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ea      	bne.n	8003d9e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d004      	beq.n	8003dde <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003dda:	2304      	movs	r3, #4
 8003ddc:	e0b1      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0a6      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	22c5      	movs	r2, #197	@ 0xc5
 8003df8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f7ff fd3d 	bl	800387a <SDIO_GetCommandResponse>
 8003e00:	4603      	mov	r3, r0
 8003e02:	461a      	mov	r2, r3
 8003e04:	7afb      	ldrb	r3, [r7, #11]
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d001      	beq.n	8003e0e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e099      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003e0e:	2100      	movs	r1, #0
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff fd3f 	bl	8003894 <SDIO_GetResponse>
 8003e16:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003f54 <SDMMC_GetCmdResp1+0x1d8>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e08d      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	da02      	bge.n	8003e32 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003e2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e30:	e087      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003e3c:	2340      	movs	r3, #64	@ 0x40
 8003e3e:	e080      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003e4a:	2380      	movs	r3, #128	@ 0x80
 8003e4c:	e079      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003e58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e5c:	e071      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003e68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e6c:	e069      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003e78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e7c:	e061      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003e88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e8c:	e059      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003e98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e9c:	e051      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003ea8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003eac:	e049      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003eb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ebc:	e041      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003ec8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ecc:	e039      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003ed8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003edc:	e031      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003ee8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003eec:	e029      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003ef8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003efc:	e021      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003f08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003f0c:	e019      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003f18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f1c:	e011      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003f28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003f2c:	e009      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003f38:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003f3c:	e001      	b.n	8003f42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003f3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000000 	.word	0x20000000
 8003f50:	10624dd3 	.word	0x10624dd3
 8003f54:	fdffe008 	.word	0xfdffe008

08003f58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f60:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe0 <SDMMC_GetCmdResp2+0x88>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe4 <SDMMC_GetCmdResp2+0x8c>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	0a5b      	lsrs	r3, r3, #9
 8003f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f70:	fb02 f303 	mul.w	r3, r2, r3
 8003f74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1e5a      	subs	r2, r3, #1
 8003f7a:	60fa      	str	r2, [r7, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003f80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003f84:	e026      	b.n	8003fd4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0ef      	beq.n	8003f76 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ea      	bne.n	8003f76 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2204      	movs	r2, #4
 8003fb0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	e00e      	b.n	8003fd4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e003      	b.n	8003fd4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	22c5      	movs	r2, #197	@ 0xc5
 8003fd0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	10624dd3 	.word	0x10624dd3

08003fe8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800405c <SDMMC_GetCmdResp3+0x74>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8004060 <SDMMC_GetCmdResp3+0x78>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	0a5b      	lsrs	r3, r3, #9
 8003ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1e5a      	subs	r2, r3, #1
 800400a:	60fa      	str	r2, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004010:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004014:	e01b      	b.n	800404e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0ef      	beq.n	8004006 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1ea      	bne.n	8004006 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d004      	beq.n	8004046 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2204      	movs	r2, #4
 8004040:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004042:	2304      	movs	r3, #4
 8004044:	e003      	b.n	800404e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	22c5      	movs	r2, #197	@ 0xc5
 800404a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	20000000 	.word	0x20000000
 8004060:	10624dd3 	.word	0x10624dd3

08004064 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	460b      	mov	r3, r1
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004072:	4b35      	ldr	r3, [pc, #212]	@ (8004148 <SDMMC_GetCmdResp6+0xe4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a35      	ldr	r2, [pc, #212]	@ (800414c <SDMMC_GetCmdResp6+0xe8>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	0a5b      	lsrs	r3, r3, #9
 800407e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	1e5a      	subs	r2, r3, #1
 800408c:	61fa      	str	r2, [r7, #28]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d102      	bne.n	8004098 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004092:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004096:	e052      	b.n	800413e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0ef      	beq.n	8004088 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1ea      	bne.n	8004088 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2204      	movs	r2, #4
 80040c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040c4:	2304      	movs	r3, #4
 80040c6:	e03a      	b.n	800413e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d004      	beq.n	80040de <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040da:	2301      	movs	r3, #1
 80040dc:	e02f      	b.n	800413e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f7ff fbcb 	bl	800387a <SDIO_GetCommandResponse>
 80040e4:	4603      	mov	r3, r0
 80040e6:	461a      	mov	r2, r3
 80040e8:	7afb      	ldrb	r3, [r7, #11]
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d001      	beq.n	80040f2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e025      	b.n	800413e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	22c5      	movs	r2, #197	@ 0xc5
 80040f6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80040f8:	2100      	movs	r1, #0
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f7ff fbca 	bl	8003894 <SDIO_GetResponse>
 8004100:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d106      	bne.n	800411a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004116:	2300      	movs	r3, #0
 8004118:	e011      	b.n	800413e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004124:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004128:	e009      	b.n	800413e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004138:	e001      	b.n	800413e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800413a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800413e:	4618      	mov	r0, r3
 8004140:	3720      	adds	r7, #32
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000000 	.word	0x20000000
 800414c:	10624dd3 	.word	0x10624dd3

08004150 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004158:	4b22      	ldr	r3, [pc, #136]	@ (80041e4 <SDMMC_GetCmdResp7+0x94>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a22      	ldr	r2, [pc, #136]	@ (80041e8 <SDMMC_GetCmdResp7+0x98>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	0a5b      	lsrs	r3, r3, #9
 8004164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004168:	fb02 f303 	mul.w	r3, r2, r3
 800416c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1e5a      	subs	r2, r3, #1
 8004172:	60fa      	str	r2, [r7, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d102      	bne.n	800417e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004178:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800417c:	e02c      	b.n	80041d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004182:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0ef      	beq.n	800416e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1ea      	bne.n	800416e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2204      	movs	r2, #4
 80041a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041aa:	2304      	movs	r3, #4
 80041ac:	e014      	b.n	80041d8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d004      	beq.n	80041c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e009      	b.n	80041d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2240      	movs	r2, #64	@ 0x40
 80041d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80041d6:	2300      	movs	r3, #0
  
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	20000000 	.word	0x20000000
 80041e8:	10624dd3 	.word	0x10624dd3

080041ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80041f4:	4b11      	ldr	r3, [pc, #68]	@ (800423c <SDMMC_GetCmdError+0x50>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a11      	ldr	r2, [pc, #68]	@ (8004240 <SDMMC_GetCmdError+0x54>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	0a5b      	lsrs	r3, r3, #9
 8004200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004204:	fb02 f303 	mul.w	r3, r2, r3
 8004208:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1e5a      	subs	r2, r3, #1
 800420e:	60fa      	str	r2, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004214:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004218:	e009      	b.n	800422e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f1      	beq.n	800420a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	22c5      	movs	r2, #197	@ 0xc5
 800422a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000000 	.word	0x20000000
 8004240:	10624dd3 	.word	0x10624dd3

08004244 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004248:	4904      	ldr	r1, [pc, #16]	@ (800425c <MX_FATFS_Init+0x18>)
 800424a:	4805      	ldr	r0, [pc, #20]	@ (8004260 <MX_FATFS_Init+0x1c>)
 800424c:	f004 fbc8 	bl	80089e0 <FATFS_LinkDriver>
 8004250:	4603      	mov	r3, r0
 8004252:	461a      	mov	r2, r3
 8004254:	4b03      	ldr	r3, [pc, #12]	@ (8004264 <MX_FATFS_Init+0x20>)
 8004256:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004258:	bf00      	nop
 800425a:	bd80      	pop	{r7, pc}
 800425c:	2000015c 	.word	0x2000015c
 8004260:	08009b00 	.word	0x08009b00
 8004264:	20000158 	.word	0x20000158

08004268 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800426c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800426e:	4618      	mov	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004282:	f7fc f98b 	bl	800059c <BSP_SD_IsDetected>
 8004286:	4603      	mov	r3, r0
 8004288:	2b01      	cmp	r3, #1
 800428a:	d001      	beq.n	8004290 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e005      	b.n	800429c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004290:	4804      	ldr	r0, [pc, #16]	@ (80042a4 <BSP_SD_Init+0x2c>)
 8004292:	f7fd fcbd 	bl	8001c10 <HAL_SD_Init>
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800429a:	79fb      	ldrb	r3, [r7, #7]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000084 	.word	0x20000084

080042a8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	4806      	ldr	r0, [pc, #24]	@ (80042e0 <BSP_SD_ReadBlocks+0x38>)
 80042c6:	f7fd fd4b 	bl	8001d60 <HAL_SD_ReadBlocks>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000084 	.word	0x20000084

080042e4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	68f9      	ldr	r1, [r7, #12]
 8004300:	4806      	ldr	r0, [pc, #24]	@ (800431c <BSP_SD_WriteBlocks+0x38>)
 8004302:	f7fd ff13 	bl	800212c <HAL_SD_WriteBlocks>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004310:	7dfb      	ldrb	r3, [r7, #23]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000084 	.word	0x20000084

08004320 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004324:	4805      	ldr	r0, [pc, #20]	@ (800433c <BSP_SD_GetCardState+0x1c>)
 8004326:	f7fe faf9 	bl	800291c <HAL_SD_GetCardState>
 800432a:	4603      	mov	r3, r0
 800432c:	2b04      	cmp	r3, #4
 800432e:	bf14      	ite	ne
 8004330:	2301      	movne	r3, #1
 8004332:	2300      	moveq	r3, #0
 8004334:	b2db      	uxtb	r3, r3
}
 8004336:	4618      	mov	r0, r3
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000084 	.word	0x20000084

08004340 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4803      	ldr	r0, [pc, #12]	@ (8004358 <BSP_SD_GetCardInfo+0x18>)
 800434c:	f7fe fa20 	bl	8002790 <HAL_SD_GetCardInfo>
}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20000084 	.word	0x20000084

0800435c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004366:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <SD_CheckStatus+0x38>)
 8004368:	2201      	movs	r2, #1
 800436a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800436c:	f7ff ffd8 	bl	8004320 <BSP_SD_GetCardState>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d107      	bne.n	8004386 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004376:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <SD_CheckStatus+0x38>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	b2da      	uxtb	r2, r3
 8004382:	4b04      	ldr	r3, [pc, #16]	@ (8004394 <SD_CheckStatus+0x38>)
 8004384:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004386:	4b03      	ldr	r3, [pc, #12]	@ (8004394 <SD_CheckStatus+0x38>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	b2db      	uxtb	r3, r3
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20000009 	.word	0x20000009

08004398 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80043a2:	4b0b      	ldr	r3, [pc, #44]	@ (80043d0 <SD_initialize+0x38>)
 80043a4:	2201      	movs	r2, #1
 80043a6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80043a8:	f7ff ff66 	bl	8004278 <BSP_SD_Init>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d107      	bne.n	80043c2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff ffd1 	bl	800435c <SD_CheckStatus>
 80043ba:	4603      	mov	r3, r0
 80043bc:	461a      	mov	r2, r3
 80043be:	4b04      	ldr	r3, [pc, #16]	@ (80043d0 <SD_initialize+0x38>)
 80043c0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80043c2:	4b03      	ldr	r3, [pc, #12]	@ (80043d0 <SD_initialize+0x38>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	b2db      	uxtb	r3, r3
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20000009 	.word	0x20000009

080043d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ffbb 	bl	800435c <SD_CheckStatus>
 80043e6:	4603      	mov	r3, r0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	607a      	str	r2, [r7, #4]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4603      	mov	r3, r0
 80043fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004404:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	68b8      	ldr	r0, [r7, #8]
 800440e:	f7ff ff4b 	bl	80042a8 <BSP_SD_ReadBlocks>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d107      	bne.n	8004428 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004418:	bf00      	nop
 800441a:	f7ff ff81 	bl	8004320 <BSP_SD_GetCardState>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1fa      	bne.n	800441a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004428:	7dfb      	ldrb	r3, [r7, #23]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b086      	sub	sp, #24
 8004436:	af00      	add	r7, sp, #0
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
 800443e:	4603      	mov	r3, r0
 8004440:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004446:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	68b8      	ldr	r0, [r7, #8]
 8004450:	f7ff ff48 	bl	80042e4 <BSP_SD_WriteBlocks>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d107      	bne.n	800446a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800445a:	bf00      	nop
 800445c:	f7ff ff60 	bl	8004320 <BSP_SD_GetCardState>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1fa      	bne.n	800445c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800446a:	7dfb      	ldrb	r3, [r7, #23]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08c      	sub	sp, #48	@ 0x30
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	603a      	str	r2, [r7, #0]
 800447e:	71fb      	strb	r3, [r7, #7]
 8004480:	460b      	mov	r3, r1
 8004482:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800448a:	4b25      	ldr	r3, [pc, #148]	@ (8004520 <SD_ioctl+0xac>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <SD_ioctl+0x28>
 8004498:	2303      	movs	r3, #3
 800449a:	e03c      	b.n	8004516 <SD_ioctl+0xa2>

  switch (cmd)
 800449c:	79bb      	ldrb	r3, [r7, #6]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d834      	bhi.n	800450c <SD_ioctl+0x98>
 80044a2:	a201      	add	r2, pc, #4	@ (adr r2, 80044a8 <SD_ioctl+0x34>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044c1 	.word	0x080044c1
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044f3 	.word	0x080044f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80044be:	e028      	b.n	8004512 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80044c0:	f107 030c 	add.w	r3, r7, #12
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ff3b 	bl	8004340 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80044ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80044d6:	e01c      	b.n	8004512 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80044d8:	f107 030c 	add.w	r3, r7, #12
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff ff2f 	bl	8004340 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80044e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80044f0:	e00f      	b.n	8004512 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80044f2:	f107 030c 	add.w	r3, r7, #12
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff ff22 	bl	8004340 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80044fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fe:	0a5a      	lsrs	r2, r3, #9
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800450a:	e002      	b.n	8004512 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800450c:	2304      	movs	r3, #4
 800450e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8004512:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004516:	4618      	mov	r0, r3
 8004518:	3730      	adds	r7, #48	@ 0x30
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000009 	.word	0x20000009

08004524 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	4a08      	ldr	r2, [pc, #32]	@ (8004554 <disk_status+0x30>)
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	79fa      	ldrb	r2, [r7, #7]
 800453c:	4905      	ldr	r1, [pc, #20]	@ (8004554 <disk_status+0x30>)
 800453e:	440a      	add	r2, r1
 8004540:	7a12      	ldrb	r2, [r2, #8]
 8004542:	4610      	mov	r0, r2
 8004544:	4798      	blx	r3
 8004546:	4603      	mov	r3, r0
 8004548:	73fb      	strb	r3, [r7, #15]
  return stat;
 800454a:	7bfb      	ldrb	r3, [r7, #15]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20002680 	.word	0x20002680

08004558 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	4a0e      	ldr	r2, [pc, #56]	@ (80045a4 <disk_initialize+0x4c>)
 800456a:	5cd3      	ldrb	r3, [r2, r3]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d114      	bne.n	800459a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	4a0c      	ldr	r2, [pc, #48]	@ (80045a4 <disk_initialize+0x4c>)
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	79fa      	ldrb	r2, [r7, #7]
 800457e:	4909      	ldr	r1, [pc, #36]	@ (80045a4 <disk_initialize+0x4c>)
 8004580:	440a      	add	r2, r1
 8004582:	7a12      	ldrb	r2, [r2, #8]
 8004584:	4610      	mov	r0, r2
 8004586:	4798      	blx	r3
 8004588:	4603      	mov	r3, r0
 800458a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d103      	bne.n	800459a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	4a03      	ldr	r2, [pc, #12]	@ (80045a4 <disk_initialize+0x4c>)
 8004596:	2101      	movs	r1, #1
 8004598:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800459a:	7bfb      	ldrb	r3, [r7, #15]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20002680 	.word	0x20002680

080045a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80045a8:	b590      	push	{r4, r7, lr}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	4603      	mov	r3, r0
 80045b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	4a0a      	ldr	r2, [pc, #40]	@ (80045e4 <disk_read+0x3c>)
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	689c      	ldr	r4, [r3, #8]
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	4a07      	ldr	r2, [pc, #28]	@ (80045e4 <disk_read+0x3c>)
 80045c8:	4413      	add	r3, r2
 80045ca:	7a18      	ldrb	r0, [r3, #8]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	47a0      	blx	r4
 80045d4:	4603      	mov	r3, r0
 80045d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd90      	pop	{r4, r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20002680 	.word	0x20002680

080045e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4603      	mov	r3, r0
 80045f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004624 <disk_write+0x3c>)
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	68dc      	ldr	r4, [r3, #12]
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	4a07      	ldr	r2, [pc, #28]	@ (8004624 <disk_write+0x3c>)
 8004608:	4413      	add	r3, r2
 800460a:	7a18      	ldrb	r0, [r3, #8]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	47a0      	blx	r4
 8004614:	4603      	mov	r3, r0
 8004616:	75fb      	strb	r3, [r7, #23]
  return res;
 8004618:	7dfb      	ldrb	r3, [r7, #23]
}
 800461a:	4618      	mov	r0, r3
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	bd90      	pop	{r4, r7, pc}
 8004622:	bf00      	nop
 8004624:	20002680 	.word	0x20002680

08004628 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	603a      	str	r2, [r7, #0]
 8004632:	71fb      	strb	r3, [r7, #7]
 8004634:	460b      	mov	r3, r1
 8004636:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	4a09      	ldr	r2, [pc, #36]	@ (8004660 <disk_ioctl+0x38>)
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	79fa      	ldrb	r2, [r7, #7]
 8004646:	4906      	ldr	r1, [pc, #24]	@ (8004660 <disk_ioctl+0x38>)
 8004648:	440a      	add	r2, r1
 800464a:	7a10      	ldrb	r0, [r2, #8]
 800464c:	79b9      	ldrb	r1, [r7, #6]
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	4798      	blx	r3
 8004652:	4603      	mov	r3, r0
 8004654:	73fb      	strb	r3, [r7, #15]
  return res;
 8004656:	7bfb      	ldrb	r3, [r7, #15]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20002680 	.word	0x20002680

08004664 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3301      	adds	r3, #1
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004674:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	b21a      	sxth	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	b21b      	sxth	r3, r3
 8004682:	4313      	orrs	r3, r2
 8004684:	b21b      	sxth	r3, r3
 8004686:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004688:	89fb      	ldrh	r3, [r7, #14]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004696:	b480      	push	{r7}
 8004698:	b085      	sub	sp, #20
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3303      	adds	r3, #3
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	021b      	lsls	r3, r3, #8
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	3202      	adds	r2, #2
 80046ae:	7812      	ldrb	r2, [r2, #0]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	3201      	adds	r2, #1
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	7812      	ldrb	r2, [r2, #0]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
	return rv;
 80046ce:	68fb      	ldr	r3, [r7, #12]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80046dc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80046e0:	b09d      	sub	sp, #116	@ 0x74
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 80046e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046e8:	3307      	adds	r3, #7
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2200      	movs	r2, #0
 80046f0:	469a      	mov	sl, r3
 80046f2:	4693      	mov	fp, r2
 80046f4:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 80046f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80046fc:	f04f 0000 	mov.w	r0, #0
 8004700:	f04f 0100 	mov.w	r1, #0
 8004704:	0219      	lsls	r1, r3, #8
 8004706:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800470a:	0210      	lsls	r0, r2, #8
 800470c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800470e:	3306      	adds	r3, #6
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2200      	movs	r2, #0
 8004716:	461c      	mov	r4, r3
 8004718:	4615      	mov	r5, r2
 800471a:	ea40 0804 	orr.w	r8, r0, r4
 800471e:	ea41 0905 	orr.w	r9, r1, r5
 8004722:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8004726:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800472a:	f04f 0000 	mov.w	r0, #0
 800472e:	f04f 0100 	mov.w	r1, #0
 8004732:	0219      	lsls	r1, r3, #8
 8004734:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004738:	0210      	lsls	r0, r2, #8
 800473a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800473c:	3305      	adds	r3, #5
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2200      	movs	r2, #0
 8004744:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004746:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004748:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800474c:	4623      	mov	r3, r4
 800474e:	4303      	orrs	r3, r0
 8004750:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004752:	462b      	mov	r3, r5
 8004754:	430b      	orrs	r3, r1
 8004756:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004758:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800475c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8004760:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004764:	f04f 0000 	mov.w	r0, #0
 8004768:	f04f 0100 	mov.w	r1, #0
 800476c:	0219      	lsls	r1, r3, #8
 800476e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004772:	0210      	lsls	r0, r2, #8
 8004774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004776:	3304      	adds	r3, #4
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2200      	movs	r2, #0
 800477e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004780:	657a      	str	r2, [r7, #84]	@ 0x54
 8004782:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004786:	4623      	mov	r3, r4
 8004788:	4303      	orrs	r3, r0
 800478a:	623b      	str	r3, [r7, #32]
 800478c:	462b      	mov	r3, r5
 800478e:	430b      	orrs	r3, r1
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
 8004792:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004796:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800479a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800479e:	f04f 0000 	mov.w	r0, #0
 80047a2:	f04f 0100 	mov.w	r1, #0
 80047a6:	0219      	lsls	r1, r3, #8
 80047a8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80047ac:	0210      	lsls	r0, r2, #8
 80047ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047b0:	3303      	adds	r3, #3
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2200      	movs	r2, #0
 80047b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80047bc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80047c0:	4623      	mov	r3, r4
 80047c2:	4303      	orrs	r3, r0
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	462b      	mov	r3, r5
 80047c8:	430b      	orrs	r3, r1
 80047ca:	61fb      	str	r3, [r7, #28]
 80047cc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80047d0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 80047d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80047d8:	f04f 0000 	mov.w	r0, #0
 80047dc:	f04f 0100 	mov.w	r1, #0
 80047e0:	0219      	lsls	r1, r3, #8
 80047e2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80047e6:	0210      	lsls	r0, r2, #8
 80047e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047ea:	3302      	adds	r3, #2
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2200      	movs	r2, #0
 80047f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80047f4:	647a      	str	r2, [r7, #68]	@ 0x44
 80047f6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80047fa:	4623      	mov	r3, r4
 80047fc:	4303      	orrs	r3, r0
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	462b      	mov	r3, r5
 8004802:	430b      	orrs	r3, r1
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800480a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800480e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	020b      	lsls	r3, r1, #8
 800481c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004820:	0202      	lsls	r2, r0, #8
 8004822:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004824:	3101      	adds	r1, #1
 8004826:	7809      	ldrb	r1, [r1, #0]
 8004828:	b2c9      	uxtb	r1, r1
 800482a:	2000      	movs	r0, #0
 800482c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800482e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8004830:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8004834:	4621      	mov	r1, r4
 8004836:	4311      	orrs	r1, r2
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	4629      	mov	r1, r5
 800483c:	4319      	orrs	r1, r3
 800483e:	60f9      	str	r1, [r7, #12]
 8004840:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004844:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8004848:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	020b      	lsls	r3, r1, #8
 8004856:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800485a:	0202      	lsls	r2, r0, #8
 800485c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800485e:	7809      	ldrb	r1, [r1, #0]
 8004860:	b2c9      	uxtb	r1, r1
 8004862:	2000      	movs	r0, #0
 8004864:	6339      	str	r1, [r7, #48]	@ 0x30
 8004866:	6378      	str	r0, [r7, #52]	@ 0x34
 8004868:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800486c:	4621      	mov	r1, r4
 800486e:	4311      	orrs	r1, r2
 8004870:	6039      	str	r1, [r7, #0]
 8004872:	4629      	mov	r1, r5
 8004874:	4319      	orrs	r1, r3
 8004876:	6079      	str	r1, [r7, #4]
 8004878:	e9d7 3400 	ldrd	r3, r4, [r7]
 800487c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8004880:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8004884:	4610      	mov	r0, r2
 8004886:	4619      	mov	r1, r3
 8004888:	3774      	adds	r7, #116	@ 0x74
 800488a:	46bd      	mov	sp, r7
 800488c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004890:	4770      	bx	lr

08004892 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	887a      	ldrh	r2, [r7, #2]
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	607a      	str	r2, [r7, #4]
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	0a1b      	lsrs	r3, r3, #8
 80048e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	60fa      	str	r2, [r7, #12]
 8004932:	783a      	ldrb	r2, [r7, #0]
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e9d7 0100 	ldrd	r0, r1, [r7]
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	0a02      	lsrs	r2, r0, #8
 8004944:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004948:	0a0b      	lsrs	r3, r1, #8
 800494a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	60fa      	str	r2, [r7, #12]
 8004954:	783a      	ldrb	r2, [r7, #0]
 8004956:	701a      	strb	r2, [r3, #0]
 8004958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	0a02      	lsrs	r2, r0, #8
 8004966:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800496a:	0a0b      	lsrs	r3, r1, #8
 800496c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	60fa      	str	r2, [r7, #12]
 8004976:	783a      	ldrb	r2, [r7, #0]
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	0a02      	lsrs	r2, r0, #8
 8004988:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800498c:	0a0b      	lsrs	r3, r1, #8
 800498e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	60fa      	str	r2, [r7, #12]
 8004998:	783a      	ldrb	r2, [r7, #0]
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	0a02      	lsrs	r2, r0, #8
 80049aa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80049ae:	0a0b      	lsrs	r3, r1, #8
 80049b0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	60fa      	str	r2, [r7, #12]
 80049ba:	783a      	ldrb	r2, [r7, #0]
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	0a02      	lsrs	r2, r0, #8
 80049cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80049d0:	0a0b      	lsrs	r3, r1, #8
 80049d2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	60fa      	str	r2, [r7, #12]
 80049dc:	783a      	ldrb	r2, [r7, #0]
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	0a02      	lsrs	r2, r0, #8
 80049ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80049f2:	0a0b      	lsrs	r3, r1, #8
 80049f4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	60fa      	str	r2, [r7, #12]
 80049fe:	783a      	ldrb	r2, [r7, #0]
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	0a02      	lsrs	r2, r0, #8
 8004a10:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004a14:	0a0b      	lsrs	r3, r1, #8
 8004a16:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	60fa      	str	r2, [r7, #12]
 8004a20:	783a      	ldrb	r2, [r7, #0]
 8004a22:	701a      	strb	r2, [r3, #0]
}
 8004a24:	bf00      	nop
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00d      	beq.n	8004a66 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	1c53      	adds	r3, r2, #1
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	1c59      	adds	r1, r3, #1
 8004a54:	6179      	str	r1, [r7, #20]
 8004a56:	7812      	ldrb	r2, [r2, #0]
 8004a58:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	607b      	str	r3, [r7, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f1      	bne.n	8004a4a <mem_cpy+0x1a>
	}
}
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004a72:	b480      	push	{r7}
 8004a74:	b087      	sub	sp, #28
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	617a      	str	r2, [r7, #20]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f3      	bne.n	8004a82 <mem_set+0x10>
}
 8004a9a:	bf00      	nop
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004aa8:	b480      	push	{r7}
 8004aaa:	b089      	sub	sp, #36	@ 0x24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	61fa      	str	r2, [r7, #28]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	61ba      	str	r2, [r7, #24]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	1acb      	subs	r3, r1, r3
 8004ad4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	607b      	str	r3, [r7, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <mem_cmp+0x40>
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0eb      	beq.n	8004ac0 <mem_cmp+0x18>

	return r;
 8004ae8:	697b      	ldr	r3, [r7, #20]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3724      	adds	r7, #36	@ 0x24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004b00:	e002      	b.n	8004b08 <chk_chr+0x12>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3301      	adds	r3, #1
 8004b06:	607b      	str	r3, [r7, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <chk_chr+0x26>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d1f2      	bne.n	8004b02 <chk_chr+0xc>
	return *str;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004b36:	2300      	movs	r3, #0
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	e029      	b.n	8004b94 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004b40:	4a27      	ldr	r2, [pc, #156]	@ (8004be0 <chk_lock+0xb4>)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	4413      	add	r3, r2
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01d      	beq.n	8004b8a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004b4e:	4a24      	ldr	r2, [pc, #144]	@ (8004be0 <chk_lock+0xb4>)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	4413      	add	r3, r2
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d116      	bne.n	8004b8e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004b60:	4a1f      	ldr	r2, [pc, #124]	@ (8004be0 <chk_lock+0xb4>)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	4413      	add	r3, r2
 8004b68:	3304      	adds	r3, #4
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d10c      	bne.n	8004b8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004b74:	4a1a      	ldr	r2, [pc, #104]	@ (8004be0 <chk_lock+0xb4>)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d102      	bne.n	8004b8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004b88:	e007      	b.n	8004b9a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3301      	adds	r3, #1
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d9d2      	bls.n	8004b40 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d109      	bne.n	8004bb4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d102      	bne.n	8004bac <chk_lock+0x80>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d101      	bne.n	8004bb0 <chk_lock+0x84>
 8004bac:	2300      	movs	r3, #0
 8004bae:	e010      	b.n	8004bd2 <chk_lock+0xa6>
 8004bb0:	2312      	movs	r3, #18
 8004bb2:	e00e      	b.n	8004bd2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d108      	bne.n	8004bcc <chk_lock+0xa0>
 8004bba:	4a09      	ldr	r2, [pc, #36]	@ (8004be0 <chk_lock+0xb4>)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	4413      	add	r3, r2
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bca:	d101      	bne.n	8004bd0 <chk_lock+0xa4>
 8004bcc:	2310      	movs	r3, #16
 8004bce:	e000      	b.n	8004bd2 <chk_lock+0xa6>
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	20002200 	.word	0x20002200

08004be4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004bea:	2300      	movs	r3, #0
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	e002      	b.n	8004bf6 <enq_lock+0x12>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d806      	bhi.n	8004c0a <enq_lock+0x26>
 8004bfc:	4a09      	ldr	r2, [pc, #36]	@ (8004c24 <enq_lock+0x40>)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	4413      	add	r3, r2
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f2      	bne.n	8004bf0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	20002200 	.word	0x20002200

08004c28 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	e01f      	b.n	8004c78 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004c38:	4a41      	ldr	r2, [pc, #260]	@ (8004d40 <inc_lock+0x118>)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	4413      	add	r3, r2
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d113      	bne.n	8004c72 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004c4a:	4a3d      	ldr	r2, [pc, #244]	@ (8004d40 <inc_lock+0x118>)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	4413      	add	r3, r2
 8004c52:	3304      	adds	r3, #4
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d109      	bne.n	8004c72 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004c5e:	4a38      	ldr	r2, [pc, #224]	@ (8004d40 <inc_lock+0x118>)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	4413      	add	r3, r2
 8004c66:	3308      	adds	r3, #8
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d006      	beq.n	8004c80 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3301      	adds	r3, #1
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d9dc      	bls.n	8004c38 <inc_lock+0x10>
 8004c7e:	e000      	b.n	8004c82 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004c80:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d132      	bne.n	8004cee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e002      	b.n	8004c94 <inc_lock+0x6c>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3301      	adds	r3, #1
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d806      	bhi.n	8004ca8 <inc_lock+0x80>
 8004c9a:	4a29      	ldr	r2, [pc, #164]	@ (8004d40 <inc_lock+0x118>)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	4413      	add	r3, r2
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f2      	bne.n	8004c8e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d101      	bne.n	8004cb2 <inc_lock+0x8a>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e040      	b.n	8004d34 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	4922      	ldr	r1, [pc, #136]	@ (8004d40 <inc_lock+0x118>)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	440b      	add	r3, r1
 8004cbe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	491e      	ldr	r1, [pc, #120]	@ (8004d40 <inc_lock+0x118>)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	440b      	add	r3, r1
 8004ccc:	3304      	adds	r3, #4
 8004cce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cd4:	491a      	ldr	r1, [pc, #104]	@ (8004d40 <inc_lock+0x118>)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	440b      	add	r3, r1
 8004cdc:	3308      	adds	r3, #8
 8004cde:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004ce0:	4a17      	ldr	r2, [pc, #92]	@ (8004d40 <inc_lock+0x118>)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	4413      	add	r3, r2
 8004ce8:	330c      	adds	r3, #12
 8004cea:	2200      	movs	r2, #0
 8004cec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d009      	beq.n	8004d08 <inc_lock+0xe0>
 8004cf4:	4a12      	ldr	r2, [pc, #72]	@ (8004d40 <inc_lock+0x118>)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	4413      	add	r3, r2
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <inc_lock+0xe0>
 8004d04:	2300      	movs	r3, #0
 8004d06:	e015      	b.n	8004d34 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d108      	bne.n	8004d20 <inc_lock+0xf8>
 8004d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004d40 <inc_lock+0x118>)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	4413      	add	r3, r2
 8004d16:	330c      	adds	r3, #12
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	e001      	b.n	8004d24 <inc_lock+0xfc>
 8004d20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d24:	4906      	ldr	r1, [pc, #24]	@ (8004d40 <inc_lock+0x118>)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	440b      	add	r3, r1
 8004d2c:	330c      	adds	r3, #12
 8004d2e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3301      	adds	r3, #1
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	20002200 	.word	0x20002200

08004d44 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	607b      	str	r3, [r7, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d825      	bhi.n	8004da4 <dec_lock+0x60>
		n = Files[i].ctr;
 8004d58:	4a17      	ldr	r2, [pc, #92]	@ (8004db8 <dec_lock+0x74>)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	4413      	add	r3, r2
 8004d60:	330c      	adds	r3, #12
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004d66:	89fb      	ldrh	r3, [r7, #14]
 8004d68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d6c:	d101      	bne.n	8004d72 <dec_lock+0x2e>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004d72:	89fb      	ldrh	r3, [r7, #14]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <dec_lock+0x3a>
 8004d78:	89fb      	ldrh	r3, [r7, #14]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8004db8 <dec_lock+0x74>)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	4413      	add	r3, r2
 8004d86:	330c      	adds	r3, #12
 8004d88:	89fa      	ldrh	r2, [r7, #14]
 8004d8a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004d8c:	89fb      	ldrh	r3, [r7, #14]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d105      	bne.n	8004d9e <dec_lock+0x5a>
 8004d92:	4a09      	ldr	r2, [pc, #36]	@ (8004db8 <dec_lock+0x74>)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	4413      	add	r3, r2
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	737b      	strb	r3, [r7, #13]
 8004da2:	e001      	b.n	8004da8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004da4:	2302      	movs	r3, #2
 8004da6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004da8:	7b7b      	ldrb	r3, [r7, #13]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20002200 	.word	0x20002200

08004dbc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e010      	b.n	8004dec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004dca:	4a0d      	ldr	r2, [pc, #52]	@ (8004e00 <clear_lock+0x44>)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	4413      	add	r3, r2
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d105      	bne.n	8004de6 <clear_lock+0x2a>
 8004dda:	4a09      	ldr	r2, [pc, #36]	@ (8004e00 <clear_lock+0x44>)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	4413      	add	r3, r2
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3301      	adds	r3, #1
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d9eb      	bls.n	8004dca <clear_lock+0xe>
	}
}
 8004df2:	bf00      	nop
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	20002200 	.word	0x20002200

08004e04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	78db      	ldrb	r3, [r3, #3]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d034      	beq.n	8004e82 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	7858      	ldrb	r0, [r3, #1]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8004e28:	2301      	movs	r3, #1
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	f7ff fbdc 	bl	80045e8 <disk_write>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
 8004e3a:	e022      	b.n	8004e82 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	1ad2      	subs	r2, r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d217      	bcs.n	8004e82 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	789b      	ldrb	r3, [r3, #2]
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	e010      	b.n	8004e7c <sync_window+0x78>
					wsect += fs->fsize;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4413      	add	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	7858      	ldrb	r0, [r3, #1]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8004e6e:	2301      	movs	r3, #1
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	f7ff fbb9 	bl	80045e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d8eb      	bhi.n	8004e5a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d01b      	beq.n	8004edc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff ffad 	bl	8004e04 <sync_window>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d113      	bne.n	8004edc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	7858      	ldrb	r0, [r3, #1]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	f7ff fb71 	bl	80045a8 <disk_read>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d004      	beq.n	8004ed6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004ecc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ed0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff ff87 	bl	8004e04 <sync_window>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d159      	bne.n	8004fb4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d149      	bne.n	8004f9c <sync_fs+0xb4>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	791b      	ldrb	r3, [r3, #4]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d145      	bne.n	8004f9c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	899b      	ldrh	r3, [r3, #12]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	f7ff fda8 	bl	8004a72 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	333c      	adds	r3, #60	@ 0x3c
 8004f26:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004f2a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fcaf 	bl	8004892 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	333c      	adds	r3, #60	@ 0x3c
 8004f38:	4921      	ldr	r1, [pc, #132]	@ (8004fc0 <sync_fs+0xd8>)
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fcc4 	bl	80048c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	333c      	adds	r3, #60	@ 0x3c
 8004f44:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004f48:	491e      	ldr	r1, [pc, #120]	@ (8004fc4 <sync_fs+0xdc>)
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fcbc 	bl	80048c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	333c      	adds	r3, #60	@ 0x3c
 8004f54:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f7ff fcb2 	bl	80048c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	333c      	adds	r3, #60	@ 0x3c
 8004f68:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f7ff fca8 	bl	80048c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	7858      	ldrb	r0, [r3, #1]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f90:	2301      	movs	r3, #1
 8004f92:	f7ff fb29 	bl	80045e8 <disk_write>
			fs->fsi_flag = 0;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff fb3f 	bl	8004628 <disk_ioctl>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <sync_fs+0xcc>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	41615252 	.word	0x41615252
 8004fc4:	61417272 	.word	0x61417272

08004fc8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	3b02      	subs	r3, #2
 8004fd6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	3b02      	subs	r3, #2
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d301      	bcc.n	8004fe8 <clust2sect+0x20>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e008      	b.n	8004ffa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	895b      	ldrh	r3, [r3, #10]
 8004fec:	461a      	mov	r2, r3
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	fb03 f202 	mul.w	r2, r3, r2
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff8:	4413      	add	r3, r2
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
	...

08005008 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005008:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800500c:	b088      	sub	sp, #32
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d904      	bls.n	800502a <get_fat+0x22>
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d302      	bcc.n	8005030 <get_fat+0x28>
		val = 1;	/* Internal error */
 800502a:	2301      	movs	r3, #1
 800502c:	61fb      	str	r3, [r7, #28]
 800502e:	e139      	b.n	80052a4 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005030:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005034:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	3b01      	subs	r3, #1
 800503c:	2b03      	cmp	r3, #3
 800503e:	f200 8125 	bhi.w	800528c <get_fat+0x284>
 8005042:	a201      	add	r2, pc, #4	@ (adr r2, 8005048 <get_fat+0x40>)
 8005044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005048:	08005059 	.word	0x08005059
 800504c:	08005105 	.word	0x08005105
 8005050:	08005151 	.word	0x08005151
 8005054:	080051a1 	.word	0x080051a1
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	899b      	ldrh	r3, [r3, #12]
 800506e:	4619      	mov	r1, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	fbb3 f3f1 	udiv	r3, r3, r1
 8005076:	4413      	add	r3, r2
 8005078:	4619      	mov	r1, r3
 800507a:	69b8      	ldr	r0, [r7, #24]
 800507c:	f7ff ff06 	bl	8004e8c <move_window>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	f040 8105 	bne.w	8005292 <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	60fa      	str	r2, [r7, #12]
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	8992      	ldrh	r2, [r2, #12]
 8005092:	fbb3 f1f2 	udiv	r1, r3, r2
 8005096:	fb01 f202 	mul.w	r2, r1, r2
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4413      	add	r3, r2
 80050a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	899b      	ldrh	r3, [r3, #12]
 80050ae:	4619      	mov	r1, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80050b6:	4413      	add	r3, r2
 80050b8:	4619      	mov	r1, r3
 80050ba:	69b8      	ldr	r0, [r7, #24]
 80050bc:	f7ff fee6 	bl	8004e8c <move_window>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f040 80e7 	bne.w	8005296 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	899b      	ldrh	r3, [r3, #12]
 80050cc:	461a      	mov	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80050d4:	fb01 f202 	mul.w	r2, r1, r2
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4413      	add	r3, r2
 80050de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <get_fat+0xf2>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	091b      	lsrs	r3, r3, #4
 80050f8:	e002      	b.n	8005100 <get_fat+0xf8>
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005100:	61fb      	str	r3, [r7, #28]
			break;
 8005102:	e0cf      	b.n	80052a4 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	899b      	ldrh	r3, [r3, #12]
 800510c:	085b      	lsrs	r3, r3, #1
 800510e:	b29b      	uxth	r3, r3
 8005110:	4619      	mov	r1, r3
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	fbb3 f3f1 	udiv	r3, r3, r1
 8005118:	4413      	add	r3, r2
 800511a:	4619      	mov	r1, r3
 800511c:	69b8      	ldr	r0, [r7, #24]
 800511e:	f7ff feb5 	bl	8004e8c <move_window>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	f040 80b8 	bne.w	800529a <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	8992      	ldrh	r2, [r2, #12]
 8005138:	fbb3 f0f2 	udiv	r0, r3, r2
 800513c:	fb00 f202 	mul.w	r2, r0, r2
 8005140:	1a9b      	subs	r3, r3, r2
 8005142:	440b      	add	r3, r1
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fa8d 	bl	8004664 <ld_word>
 800514a:	4603      	mov	r3, r0
 800514c:	61fb      	str	r3, [r7, #28]
			break;
 800514e:	e0a9      	b.n	80052a4 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	899b      	ldrh	r3, [r3, #12]
 8005158:	089b      	lsrs	r3, r3, #2
 800515a:	b29b      	uxth	r3, r3
 800515c:	4619      	mov	r1, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	fbb3 f3f1 	udiv	r3, r3, r1
 8005164:	4413      	add	r3, r2
 8005166:	4619      	mov	r1, r3
 8005168:	69b8      	ldr	r0, [r7, #24]
 800516a:	f7ff fe8f 	bl	8004e8c <move_window>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	f040 8094 	bne.w	800529e <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	8992      	ldrh	r2, [r2, #12]
 8005184:	fbb3 f0f2 	udiv	r0, r3, r2
 8005188:	fb00 f202 	mul.w	r2, r0, r2
 800518c:	1a9b      	subs	r3, r3, r2
 800518e:	440b      	add	r3, r1
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fa80 	bl	8004696 <ld_dword>
 8005196:	4603      	mov	r3, r0
 8005198:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800519c:	61fb      	str	r3, [r7, #28]
			break;
 800519e:	e081      	b.n	80052a4 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	d070      	beq.n	800528c <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80051ba:	1e54      	subs	r4, r2, #1
 80051bc:	f143 35ff 	adc.w	r5, r3, #4294967295	@ 0xffffffff
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	899b      	ldrh	r3, [r3, #12]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2200      	movs	r2, #0
 80051c8:	4698      	mov	r8, r3
 80051ca:	4691      	mov	r9, r2
 80051cc:	4642      	mov	r2, r8
 80051ce:	464b      	mov	r3, r9
 80051d0:	4620      	mov	r0, r4
 80051d2:	4629      	mov	r1, r5
 80051d4:	f7fb f84c 	bl	8000270 <__aeabi_uldivmod>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	895b      	ldrh	r3, [r3, #10]
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	79db      	ldrb	r3, [r3, #7]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d10e      	bne.n	800520c <get_fat+0x204>
					if (cofs <= clen) {
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d80a      	bhi.n	800520c <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d002      	beq.n	8005204 <get_fat+0x1fc>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	e001      	b.n	8005208 <get_fat+0x200>
 8005204:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8005208:	61fb      	str	r3, [r7, #28]
						break;
 800520a:	e04b      	b.n	80052a4 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	79db      	ldrb	r3, [r3, #7]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d108      	bne.n	8005226 <get_fat+0x21e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	429a      	cmp	r2, r3
 800521c:	d203      	bcs.n	8005226 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	3301      	adds	r3, #1
 8005222:	61fb      	str	r3, [r7, #28]
					break;
 8005224:	e03e      	b.n	80052a4 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	79db      	ldrb	r3, [r3, #7]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d02e      	beq.n	800528c <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8005236:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800523a:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800523c:	e032      	b.n	80052a4 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	899b      	ldrh	r3, [r3, #12]
 8005246:	089b      	lsrs	r3, r3, #2
 8005248:	b29b      	uxth	r3, r3
 800524a:	4619      	mov	r1, r3
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005252:	4413      	add	r3, r2
 8005254:	4619      	mov	r1, r3
 8005256:	69b8      	ldr	r0, [r7, #24]
 8005258:	f7ff fe18 	bl	8004e8c <move_window>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d11f      	bne.n	80052a2 <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	8992      	ldrh	r2, [r2, #12]
 8005270:	fbb3 f0f2 	udiv	r0, r3, r2
 8005274:	fb00 f202 	mul.w	r2, r0, r2
 8005278:	1a9b      	subs	r3, r3, r2
 800527a:	440b      	add	r3, r1
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff fa0a 	bl	8004696 <ld_dword>
 8005282:	4603      	mov	r3, r0
 8005284:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005288:	61fb      	str	r3, [r7, #28]
					break;
 800528a:	e00b      	b.n	80052a4 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800528c:	2301      	movs	r3, #1
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	e008      	b.n	80052a4 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005292:	bf00      	nop
 8005294:	e006      	b.n	80052a4 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005296:	bf00      	nop
 8005298:	e004      	b.n	80052a4 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800529a:	bf00      	nop
 800529c:	e002      	b.n	80052a4 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80052a2:	bf00      	nop
		}
	}

	return val;
 80052a4:	69fb      	ldr	r3, [r7, #28]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080052b0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80052b0:	b590      	push	{r4, r7, lr}
 80052b2:	b089      	sub	sp, #36	@ 0x24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80052bc:	2302      	movs	r3, #2
 80052be:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	f240 810d 	bls.w	80054e2 <put_fat+0x232>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	f080 8107 	bcs.w	80054e2 <put_fat+0x232>
		switch (fs->fs_type) {
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b04      	cmp	r3, #4
 80052da:	f300 8102 	bgt.w	80054e2 <put_fat+0x232>
 80052de:	2b03      	cmp	r3, #3
 80052e0:	f280 80b3 	bge.w	800544a <put_fat+0x19a>
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d003      	beq.n	80052f0 <put_fat+0x40>
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	f000 8083 	beq.w	80053f4 <put_fat+0x144>
 80052ee:	e0f8      	b.n	80054e2 <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	085b      	lsrs	r3, r3, #1
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4413      	add	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	899b      	ldrh	r3, [r3, #12]
 8005306:	4619      	mov	r1, r3
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	fbb3 f3f1 	udiv	r3, r3, r1
 800530e:	4413      	add	r3, r2
 8005310:	4619      	mov	r1, r3
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f7ff fdba 	bl	8004e8c <move_window>
 8005318:	4603      	mov	r3, r0
 800531a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800531c:	7ffb      	ldrb	r3, [r7, #31]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 80d8 	bne.w	80054d4 <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	61ba      	str	r2, [r7, #24]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	8992      	ldrh	r2, [r2, #12]
 8005334:	fbb3 f0f2 	udiv	r0, r3, r2
 8005338:	fb00 f202 	mul.w	r2, r0, r2
 800533c:	1a9b      	subs	r3, r3, r2
 800533e:	440b      	add	r3, r1
 8005340:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00d      	beq.n	8005368 <put_fat+0xb8>
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	b25b      	sxtb	r3, r3
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	b25a      	sxtb	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	b25b      	sxtb	r3, r3
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	b25b      	sxtb	r3, r3
 8005360:	4313      	orrs	r3, r2
 8005362:	b25b      	sxtb	r3, r3
 8005364:	b2db      	uxtb	r3, r3
 8005366:	e001      	b.n	800536c <put_fat+0xbc>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	899b      	ldrh	r3, [r3, #12]
 800537e:	4619      	mov	r1, r3
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	fbb3 f3f1 	udiv	r3, r3, r1
 8005386:	4413      	add	r3, r2
 8005388:	4619      	mov	r1, r3
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f7ff fd7e 	bl	8004e8c <move_window>
 8005390:	4603      	mov	r3, r0
 8005392:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005394:	7ffb      	ldrb	r3, [r7, #31]
 8005396:	2b00      	cmp	r3, #0
 8005398:	f040 809e 	bne.w	80054d8 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	899b      	ldrh	r3, [r3, #12]
 80053a6:	461a      	mov	r2, r3
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80053ae:	fb00 f202 	mul.w	r2, r0, r2
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	440b      	add	r3, r1
 80053b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <put_fat+0x11a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	e00e      	b.n	80053e8 <put_fat+0x138>
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	b25b      	sxtb	r3, r3
 80053d0:	f023 030f 	bic.w	r3, r3, #15
 80053d4:	b25a      	sxtb	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	0a1b      	lsrs	r3, r3, #8
 80053da:	b25b      	sxtb	r3, r3
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	b25b      	sxtb	r3, r3
 80053e2:	4313      	orrs	r3, r2
 80053e4:	b25b      	sxtb	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	70da      	strb	r2, [r3, #3]
			break;
 80053f2:	e076      	b.n	80054e2 <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	899b      	ldrh	r3, [r3, #12]
 80053fc:	085b      	lsrs	r3, r3, #1
 80053fe:	b29b      	uxth	r3, r3
 8005400:	4619      	mov	r1, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	fbb3 f3f1 	udiv	r3, r3, r1
 8005408:	4413      	add	r3, r2
 800540a:	4619      	mov	r1, r3
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff fd3d 	bl	8004e8c <move_window>
 8005412:	4603      	mov	r3, r0
 8005414:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005416:	7ffb      	ldrb	r3, [r7, #31]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d15f      	bne.n	80054dc <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	8992      	ldrh	r2, [r2, #12]
 800542a:	fbb3 f0f2 	udiv	r0, r3, r2
 800542e:	fb00 f202 	mul.w	r2, r0, r2
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	440b      	add	r3, r1
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	b292      	uxth	r2, r2
 800543a:	4611      	mov	r1, r2
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff fa28 	bl	8004892 <st_word>
			fs->wflag = 1;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	70da      	strb	r2, [r3, #3]
			break;
 8005448:	e04b      	b.n	80054e2 <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	899b      	ldrh	r3, [r3, #12]
 8005452:	089b      	lsrs	r3, r3, #2
 8005454:	b29b      	uxth	r3, r3
 8005456:	4619      	mov	r1, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	fbb3 f3f1 	udiv	r3, r3, r1
 800545e:	4413      	add	r3, r2
 8005460:	4619      	mov	r1, r3
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff fd12 	bl	8004e8c <move_window>
 8005468:	4603      	mov	r3, r0
 800546a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800546c:	7ffb      	ldrb	r3, [r7, #31]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d136      	bne.n	80054e0 <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b04      	cmp	r3, #4
 8005478:	d017      	beq.n	80054aa <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	8992      	ldrh	r2, [r2, #12]
 800548e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005492:	fb00 f202 	mul.w	r2, r0, r2
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	440b      	add	r3, r1
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff f8fb 	bl	8004696 <ld_dword>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80054a6:	4323      	orrs	r3, r4
 80054a8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	8992      	ldrh	r2, [r2, #12]
 80054b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80054bc:	fb00 f202 	mul.w	r2, r0, r2
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	440b      	add	r3, r1
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff f9fe 	bl	80048c8 <st_dword>
			fs->wflag = 1;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2201      	movs	r2, #1
 80054d0:	70da      	strb	r2, [r3, #3]
			break;
 80054d2:	e006      	b.n	80054e2 <put_fat+0x232>
			if (res != FR_OK) break;
 80054d4:	bf00      	nop
 80054d6:	e004      	b.n	80054e2 <put_fat+0x232>
			if (res != FR_OK) break;
 80054d8:	bf00      	nop
 80054da:	e002      	b.n	80054e2 <put_fat+0x232>
			if (res != FR_OK) break;
 80054dc:	bf00      	nop
 80054de:	e000      	b.n	80054e2 <put_fat+0x232>
			if (res != FR_OK) break;
 80054e0:	bf00      	nop
		}
	}
	return res;
 80054e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3724      	adds	r7, #36	@ 0x24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd90      	pop	{r4, r7, pc}

080054ec <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	@ 0x28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	3b02      	subs	r3, #2
 80054fc:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	3b02      	subs	r3, #2
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	429a      	cmp	r2, r3
 8005508:	d301      	bcc.n	800550e <find_bitmap+0x22>
 800550a:	2300      	movs	r3, #0
 800550c:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	08db      	lsrs	r3, r3, #3
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	8989      	ldrh	r1, [r1, #12]
 8005526:	fbb3 f3f1 	udiv	r3, r3, r1
 800552a:	4413      	add	r3, r2
 800552c:	4619      	mov	r1, r3
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f7ff fcac 	bl	8004e8c <move_window>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <find_bitmap+0x54>
 800553a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800553e:	e058      	b.n	80055f2 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	08db      	lsrs	r3, r3, #3
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	8992      	ldrh	r2, [r2, #12]
 8005548:	fbb3 f1f2 	udiv	r1, r3, r2
 800554c:	fb01 f202 	mul.w	r2, r1, r2
 8005550:	1a9b      	subs	r3, r3, r2
 8005552:	623b      	str	r3, [r7, #32]
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	2201      	movs	r2, #1
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	4413      	add	r3, r2
 800556a:	333c      	adds	r3, #60	@ 0x3c
 800556c:	781a      	ldrb	r2, [r3, #0]
 800556e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005572:	4013      	ands	r3, r2
 8005574:	74fb      	strb	r3, [r7, #19]
 8005576:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	3301      	adds	r3, #1
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	3b02      	subs	r3, #2
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	429a      	cmp	r2, r3
 8005590:	d307      	bcc.n	80055a2 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	2300      	movs	r3, #0
 8005598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	899b      	ldrh	r3, [r3, #12]
 80055a0:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80055a2:	7cfb      	ldrb	r3, [r7, #19]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	3301      	adds	r3, #1
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d106      	bne.n	80055c4 <find_bitmap+0xd8>
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	3302      	adds	r3, #2
 80055ba:	e01a      	b.n	80055f2 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	2300      	movs	r3, #0
 80055c2:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d101      	bne.n	80055d0 <find_bitmap+0xe4>
 80055cc:	2300      	movs	r3, #0
 80055ce:	e010      	b.n	80055f2 <find_bitmap+0x106>
			} while (bm);
 80055d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1c5      	bne.n	8005564 <find_bitmap+0x78>
			bm = 1;
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	3301      	adds	r3, #1
 80055e2:	623b      	str	r3, [r7, #32]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	899b      	ldrh	r3, [r3, #12]
 80055e8:	461a      	mov	r2, r3
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d3b9      	bcc.n	8005564 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80055f0:	e793      	b.n	800551a <find_bitmap+0x2e>
	}
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3728      	adds	r7, #40	@ 0x28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b088      	sub	sp, #32
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
 8005606:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	3b02      	subs	r3, #2
 800560c:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	08db      	lsrs	r3, r3, #3
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	8989      	ldrh	r1, [r1, #12]
 800561a:	fbb3 f3f1 	udiv	r3, r3, r1
 800561e:	4413      	add	r3, r2
 8005620:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	08db      	lsrs	r3, r3, #3
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	8992      	ldrh	r2, [r2, #12]
 800562a:	fbb3 f1f2 	udiv	r1, r3, r2
 800562e:	fb01 f202 	mul.w	r2, r1, r2
 8005632:	1a9b      	subs	r3, r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	2201      	movs	r2, #1
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	617a      	str	r2, [r7, #20]
 800564a:	4619      	mov	r1, r3
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f7ff fc1d 	bl	8004e8c <move_window>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <change_bitmap+0x62>
 8005658:	2301      	movs	r3, #1
 800565a:	e03f      	b.n	80056dc <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	4413      	add	r3, r2
 8005662:	333c      	adds	r3, #60	@ 0x3c
 8005664:	781a      	ldrb	r2, [r3, #0]
 8005666:	7ffb      	ldrb	r3, [r7, #31]
 8005668:	4013      	ands	r3, r2
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	bf14      	ite	ne
 8005670:	2301      	movne	r3, #1
 8005672:	2300      	moveq	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	4293      	cmp	r3, r2
 800567c:	d101      	bne.n	8005682 <change_bitmap+0x88>
 800567e:	2302      	movs	r3, #2
 8005680:	e02c      	b.n	80056dc <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	4413      	add	r3, r2
 8005688:	333c      	adds	r3, #60	@ 0x3c
 800568a:	781a      	ldrb	r2, [r3, #0]
 800568c:	7ffb      	ldrb	r3, [r7, #31]
 800568e:	4053      	eors	r3, r2
 8005690:	b2d9      	uxtb	r1, r3
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	4413      	add	r3, r2
 8005698:	333c      	adds	r3, #60	@ 0x3c
 800569a:	460a      	mov	r2, r1
 800569c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	607b      	str	r3, [r7, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <change_bitmap+0xba>
 80056b0:	2300      	movs	r3, #0
 80056b2:	e013      	b.n	80056dc <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 80056b4:	7ffb      	ldrb	r3, [r7, #31]
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	77fb      	strb	r3, [r7, #31]
 80056ba:	7ffb      	ldrb	r3, [r7, #31]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1cd      	bne.n	800565c <change_bitmap+0x62>
			bm = 1;
 80056c0:	2301      	movs	r3, #1
 80056c2:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	3301      	adds	r3, #1
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	899b      	ldrh	r3, [r3, #12]
 80056ce:	461a      	mov	r2, r3
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d3c2      	bcc.n	800565c <change_bitmap+0x62>
		i = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80056da:	e7b3      	b.n	8005644 <change_bitmap+0x4a>
	}
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3720      	adds	r7, #32
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	79db      	ldrb	r3, [r3, #7]
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d121      	bne.n	8005738 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	e014      	b.n	800572c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	3301      	adds	r3, #1
 800570a:	461a      	mov	r2, r3
 800570c:	6979      	ldr	r1, [r7, #20]
 800570e:	f7ff fdcf 	bl	80052b0 <put_fat>
 8005712:	4603      	mov	r3, r0
 8005714:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <fill_first_frag+0x3c>
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	e00c      	b.n	800573a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	3301      	adds	r3, #1
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	3b01      	subs	r3, #1
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e7      	bne.n	8005702 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b086      	sub	sp, #24
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800574e:	e020      	b.n	8005792 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	1c59      	adds	r1, r3, #1
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d905      	bls.n	8005772 <fill_last_frag+0x30>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	3302      	adds	r3, #2
 8005770:	e000      	b.n	8005774 <fill_last_frag+0x32>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	461a      	mov	r2, r3
 8005776:	f7ff fd9b 	bl	80052b0 <put_fat>
 800577a:	4603      	mov	r3, r0
 800577c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800577e:	7dfb      	ldrb	r3, [r7, #23]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <fill_last_frag+0x46>
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	e009      	b.n	800579c <fill_last_frag+0x5a>
		obj->n_frag--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	1e5a      	subs	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1da      	bne.n	8005750 <fill_last_frag+0xe>
	}
	return FR_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08a      	sub	sp, #40	@ 0x28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d904      	bls.n	80057d2 <remove_chain+0x2e>
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d301      	bcc.n	80057d6 <remove_chain+0x32>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e096      	b.n	8005904 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d014      	beq.n	8005806 <remove_chain+0x62>
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	d103      	bne.n	80057ec <remove_chain+0x48>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	79db      	ldrb	r3, [r3, #7]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d00c      	beq.n	8005806 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80057ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	69b8      	ldr	r0, [r7, #24]
 80057f4:	f7ff fd5c 	bl	80052b0 <put_fat>
 80057f8:	4603      	mov	r3, r0
 80057fa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80057fc:	7ffb      	ldrb	r3, [r7, #31]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <remove_chain+0x62>
 8005802:	7ffb      	ldrb	r3, [r7, #31]
 8005804:	e07e      	b.n	8005904 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005806:	68b9      	ldr	r1, [r7, #8]
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f7ff fbfd 	bl	8005008 <get_fat>
 800580e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d055      	beq.n	80058c2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <remove_chain+0x7c>
 800581c:	2302      	movs	r3, #2
 800581e:	e071      	b.n	8005904 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005826:	d101      	bne.n	800582c <remove_chain+0x88>
 8005828:	2301      	movs	r3, #1
 800582a:	e06b      	b.n	8005904 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b04      	cmp	r3, #4
 8005832:	d00b      	beq.n	800584c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005834:	2200      	movs	r2, #0
 8005836:	68b9      	ldr	r1, [r7, #8]
 8005838:	69b8      	ldr	r0, [r7, #24]
 800583a:	f7ff fd39 	bl	80052b0 <put_fat>
 800583e:	4603      	mov	r3, r0
 8005840:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005842:	7ffb      	ldrb	r3, [r7, #31]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <remove_chain+0xa8>
 8005848:	7ffb      	ldrb	r3, [r7, #31]
 800584a:	e05b      	b.n	8005904 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	69da      	ldr	r2, [r3, #28]
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	3b02      	subs	r3, #2
 8005856:	429a      	cmp	r2, r3
 8005858:	d20b      	bcs.n	8005872 <remove_chain+0xce>
			fs->free_clst++;
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	791b      	ldrb	r3, [r3, #4]
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	b2da      	uxtb	r2, r3
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	3301      	adds	r3, #1
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	429a      	cmp	r2, r3
 800587a:	d102      	bne.n	8005882 <remove_chain+0xde>
			ecl = nxt;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	623b      	str	r3, [r7, #32]
 8005880:	e017      	b.n	80058b2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b04      	cmp	r3, #4
 8005888:	d10f      	bne.n	80058aa <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	2300      	movs	r3, #0
 8005894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005896:	69b8      	ldr	r0, [r7, #24]
 8005898:	f7ff feaf 	bl	80055fa <change_bitmap>
 800589c:	4603      	mov	r3, r0
 800589e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80058a0:	7ffb      	ldrb	r3, [r7, #31]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <remove_chain+0x106>
 80058a6:	7ffb      	ldrb	r3, [r7, #31]
 80058a8:	e02c      	b.n	8005904 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	623b      	str	r3, [r7, #32]
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d3a2      	bcc.n	8005806 <remove_chain+0x62>
 80058c0:	e000      	b.n	80058c4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80058c2:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d11a      	bne.n	8005902 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d103      	bne.n	80058da <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	71da      	strb	r2, [r3, #7]
 80058d8:	e013      	b.n	8005902 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	79db      	ldrb	r3, [r3, #7]
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d10f      	bne.n	8005902 <remove_chain+0x15e>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d30a      	bcc.n	8005902 <remove_chain+0x15e>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	4413      	add	r3, r2
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d802      	bhi.n	8005902 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2202      	movs	r2, #2
 8005900:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3728      	adds	r7, #40	@ 0x28
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10d      	bne.n	800593e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <create_chain+0x2c>
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	429a      	cmp	r2, r3
 8005936:	d31b      	bcc.n	8005970 <create_chain+0x64>
 8005938:	2301      	movs	r3, #1
 800593a:	61bb      	str	r3, [r7, #24]
 800593c:	e018      	b.n	8005970 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fb61 	bl	8005008 <get_fat>
 8005946:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d801      	bhi.n	8005952 <create_chain+0x46>
 800594e:	2301      	movs	r3, #1
 8005950:	e0d9      	b.n	8005b06 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005958:	d101      	bne.n	800595e <create_chain+0x52>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	e0d3      	b.n	8005b06 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	429a      	cmp	r2, r3
 8005966:	d201      	bcs.n	800596c <create_chain+0x60>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	e0cc      	b.n	8005b06 <create_chain+0x1fa>
		scl = clst;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b04      	cmp	r3, #4
 8005976:	d164      	bne.n	8005a42 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8005978:	2201      	movs	r2, #1
 800597a:	69b9      	ldr	r1, [r7, #24]
 800597c:	6938      	ldr	r0, [r7, #16]
 800597e:	f7ff fdb5 	bl	80054ec <find_bitmap>
 8005982:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <create_chain+0x86>
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005990:	d101      	bne.n	8005996 <create_chain+0x8a>
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	e0b7      	b.n	8005b06 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8005996:	2301      	movs	r3, #1
 8005998:	2201      	movs	r2, #1
 800599a:	69f9      	ldr	r1, [r7, #28]
 800599c:	6938      	ldr	r0, [r7, #16]
 800599e:	f7ff fe2c 	bl	80055fa <change_bitmap>
 80059a2:	4603      	mov	r3, r0
 80059a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d101      	bne.n	80059b0 <create_chain+0xa4>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0aa      	b.n	8005b06 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d102      	bne.n	80059bc <create_chain+0xb0>
 80059b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059ba:	e0a4      	b.n	8005b06 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d103      	bne.n	80059ca <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2202      	movs	r2, #2
 80059c6:	71da      	strb	r2, [r3, #7]
 80059c8:	e011      	b.n	80059ee <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	79db      	ldrb	r3, [r3, #7]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d10d      	bne.n	80059ee <create_chain+0xe2>
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	3301      	adds	r3, #1
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d008      	beq.n	80059ee <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	1ad2      	subs	r2, r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2203      	movs	r2, #3
 80059ec:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	79db      	ldrb	r3, [r3, #7]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d064      	beq.n	8005ac0 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	3301      	adds	r3, #1
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d10b      	bne.n	8005a18 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <create_chain+0x104>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	e000      	b.n	8005a12 <create_chain+0x106>
 8005a10:	2302      	movs	r3, #2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	61d3      	str	r3, [r2, #28]
 8005a16:	e053      	b.n	8005ac0 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <create_chain+0x11a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff fe89 	bl	8005742 <fill_last_frag>
 8005a30:	4603      	mov	r3, r0
 8005a32:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d142      	bne.n	8005ac0 <create_chain+0x1b4>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	61da      	str	r2, [r3, #28]
 8005a40:	e03e      	b.n	8005ac0 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	69fa      	ldr	r2, [r7, #28]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d307      	bcc.n	8005a66 <create_chain+0x15a>
				ncl = 2;
 8005a56:	2302      	movs	r3, #2
 8005a58:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d901      	bls.n	8005a66 <create_chain+0x15a>
 8005a62:	2300      	movs	r3, #0
 8005a64:	e04f      	b.n	8005b06 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005a66:	69f9      	ldr	r1, [r7, #28]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff facd 	bl	8005008 <get_fat>
 8005a6e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00e      	beq.n	8005a94 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d003      	beq.n	8005a84 <create_chain+0x178>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a82:	d101      	bne.n	8005a88 <create_chain+0x17c>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	e03e      	b.n	8005b06 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d1da      	bne.n	8005a46 <create_chain+0x13a>
 8005a90:	2300      	movs	r3, #0
 8005a92:	e038      	b.n	8005b06 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8005a94:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005a96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a9a:	69f9      	ldr	r1, [r7, #28]
 8005a9c:	6938      	ldr	r0, [r7, #16]
 8005a9e:	f7ff fc07 	bl	80052b0 <put_fat>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d109      	bne.n	8005ac0 <create_chain+0x1b4>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d006      	beq.n	8005ac0 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6938      	ldr	r0, [r7, #16]
 8005ab8:	f7ff fbfa 	bl	80052b0 <put_fat>
 8005abc:	4603      	mov	r3, r0
 8005abe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d116      	bne.n	8005af4 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	3b02      	subs	r3, #2
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d804      	bhi.n	8005ae4 <create_chain+0x1d8>
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	1e5a      	subs	r2, r3, #1
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	791b      	ldrb	r3, [r3, #4]
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	711a      	strb	r2, [r3, #4]
 8005af2:	e007      	b.n	8005b04 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d102      	bne.n	8005b00 <create_chain+0x1f4>
 8005afa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005afe:	e000      	b.n	8005b02 <create_chain+0x1f6>
 8005b00:	2301      	movs	r3, #1
 8005b02:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005b04:	69fb      	ldr	r3, [r7, #28]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3720      	adds	r7, #32
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005b0e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b26:	3304      	adds	r3, #4
 8005b28:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	899b      	ldrh	r3, [r3, #12]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2200      	movs	r2, #0
 8005b32:	4698      	mov	r8, r3
 8005b34:	4691      	mov	r9, r2
 8005b36:	4642      	mov	r2, r8
 8005b38:	464b      	mov	r3, r9
 8005b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b3e:	f7fa fb97 	bl	8000270 <__aeabi_uldivmod>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4610      	mov	r0, r2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	895b      	ldrh	r3, [r3, #10]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2200      	movs	r2, #0
 8005b52:	461c      	mov	r4, r3
 8005b54:	4615      	mov	r5, r2
 8005b56:	4622      	mov	r2, r4
 8005b58:	462b      	mov	r3, r5
 8005b5a:	f7fa fb89 	bl	8000270 <__aeabi_uldivmod>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4613      	mov	r3, r2
 8005b64:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	1d1a      	adds	r2, r3, #4
 8005b6a:	61ba      	str	r2, [r7, #24]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <clmt_clust+0x6c>
 8005b76:	2300      	movs	r3, #0
 8005b78:	e010      	b.n	8005b9c <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d307      	bcc.n	8005b92 <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b90:	e7e9      	b.n	8005b66 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 8005b92:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	4413      	add	r3, r2
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3720      	adds	r7, #32
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005ba6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b086      	sub	sp, #24
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d102      	bne.n	8005bc4 <dir_sdi+0x1e>
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bc2:	e001      	b.n	8005bc8 <dir_sdi+0x22>
 8005bc4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d904      	bls.n	8005bd8 <dir_sdi+0x32>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <dir_sdi+0x36>
		return FR_INT_ERR;
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e074      	b.n	8005cc6 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <dir_sdi+0x5c>
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d905      	bls.n	8005c02 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10c      	bne.n	8005c22 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	8912      	ldrh	r2, [r2, #8]
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d301      	bcc.n	8005c18 <dir_sdi+0x72>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e056      	b.n	8005cc6 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c20:	e02d      	b.n	8005c7e <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	895b      	ldrh	r3, [r3, #10]
 8005c26:	461a      	mov	r2, r3
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	899b      	ldrh	r3, [r3, #12]
 8005c2c:	fb02 f303 	mul.w	r3, r2, r3
 8005c30:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005c32:	e019      	b.n	8005c68 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6979      	ldr	r1, [r7, #20]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff f9e5 	bl	8005008 <get_fat>
 8005c3e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c46:	d101      	bne.n	8005c4c <dir_sdi+0xa6>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e03c      	b.n	8005cc6 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d904      	bls.n	8005c5c <dir_sdi+0xb6>
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d301      	bcc.n	8005c60 <dir_sdi+0xba>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e032      	b.n	8005cc6 <dir_sdi+0x120>
			ofs -= csz;
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d2e1      	bcs.n	8005c34 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 8005c70:	6979      	ldr	r1, [r7, #20]
 8005c72:	6938      	ldr	r0, [r7, #16]
 8005c74:	f7ff f9a8 	bl	8004fc8 <clust2sect>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <dir_sdi+0xea>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e01a      	b.n	8005cc6 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	899b      	ldrh	r3, [r3, #12]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ca0:	441a      	add	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	899b      	ldrh	r3, [r3, #12]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cb8:	fb00 f202 	mul.w	r2, r0, r2
 8005cbc:	1a9b      	subs	r3, r3, r2
 8005cbe:	18ca      	adds	r2, r1, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b086      	sub	sp, #24
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce2:	3320      	adds	r3, #32
 8005ce4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00b      	beq.n	8005d06 <dir_next+0x38>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d102      	bne.n	8005cfc <dir_next+0x2e>
 8005cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cfa:	e001      	b.n	8005d00 <dir_next+0x32>
 8005cfc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d801      	bhi.n	8005d0a <dir_next+0x3c>
 8005d06:	2304      	movs	r3, #4
 8005d08:	e0c3      	b.n	8005e92 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	899b      	ldrh	r3, [r3, #12]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d16:	fb01 f202 	mul.w	r2, r1, r2
 8005d1a:	1a9b      	subs	r3, r3, r2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f040 80a5 	bne.w	8005e6c <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10b      	bne.n	8005d4c <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	8912      	ldrh	r2, [r2, #8]
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	f0c0 8095 	bcc.w	8005e6c <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d48:	2304      	movs	r3, #4
 8005d4a:	e0a2      	b.n	8005e92 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	899b      	ldrh	r3, [r3, #12]
 8005d50:	461a      	mov	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	8952      	ldrh	r2, [r2, #10]
 8005d5c:	3a01      	subs	r2, #1
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f040 8083 	bne.w	8005e6c <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f7ff f94a 	bl	8005008 <get_fat>
 8005d74:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d801      	bhi.n	8005d80 <dir_next+0xb2>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e088      	b.n	8005e92 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d86:	d101      	bne.n	8005d8c <dir_next+0xbe>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e082      	b.n	8005e92 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d360      	bcc.n	8005e58 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	639a      	str	r2, [r3, #56]	@ 0x38
 8005da2:	2304      	movs	r3, #4
 8005da4:	e075      	b.n	8005e92 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dac:	4619      	mov	r1, r3
 8005dae:	4610      	mov	r0, r2
 8005db0:	f7ff fdac 	bl	800590c <create_chain>
 8005db4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <dir_next+0xf2>
 8005dbc:	2307      	movs	r3, #7
 8005dbe:	e068      	b.n	8005e92 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <dir_next+0xfc>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e063      	b.n	8005e92 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dd0:	d101      	bne.n	8005dd6 <dir_next+0x108>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e05d      	b.n	8005e92 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	79db      	ldrb	r3, [r3, #7]
 8005dda:	f043 0304 	orr.w	r3, r3, #4
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff f80d 	bl	8004e04 <sync_window>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <dir_next+0x126>
 8005df0:	2301      	movs	r3, #1
 8005df2:	e04e      	b.n	8005e92 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	899b      	ldrh	r3, [r3, #12]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	2100      	movs	r1, #0
 8005e02:	f7fe fe36 	bl	8004a72 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	6979      	ldr	r1, [r7, #20]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff f8db 	bl	8004fc8 <clust2sect>
 8005e12:	4602      	mov	r2, r0
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e18:	e012      	b.n	8005e40 <dir_next+0x172>
						fs->wflag = 1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f7fe ffef 	bl	8004e04 <sync_window>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <dir_next+0x162>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e030      	b.n	8005e92 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	3301      	adds	r3, #1
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	895b      	ldrh	r3, [r3, #10]
 8005e44:	461a      	mov	r2, r3
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d3e6      	bcc.n	8005e1a <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad2      	subs	r2, r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 8005e5e:	6979      	ldr	r1, [r7, #20]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f7ff f8b1 	bl	8004fc8 <clust2sect>
 8005e66:	4602      	mov	r2, r0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	899b      	ldrh	r3, [r3, #12]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e84:	fb00 f202 	mul.w	r2, r0, r2
 8005e88:	1a9b      	subs	r3, r3, r2
 8005e8a:	18ca      	adds	r2, r1, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b086      	sub	sp, #24
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005eaa:	2100      	movs	r1, #0
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff fe7a 	bl	8005ba6 <dir_sdi>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005eb6:	7dfb      	ldrb	r3, [r7, #23]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d140      	bne.n	8005f3e <dir_alloc+0xa4>
		n = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7fe ffe0 	bl	8004e8c <move_window>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d132      	bne.n	8005f3c <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d108      	bne.n	8005ef0 <dir_alloc+0x56>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	b25b      	sxtb	r3, r3
 8005ee6:	43db      	mvns	r3, r3
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	09db      	lsrs	r3, r3, #7
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	e00f      	b.n	8005f10 <dir_alloc+0x76>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2be5      	cmp	r3, #229	@ 0xe5
 8005ef8:	d004      	beq.n	8005f04 <dir_alloc+0x6a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <dir_alloc+0x6e>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <dir_alloc+0x70>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d007      	beq.n	8005f24 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	3301      	adds	r3, #1
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d102      	bne.n	8005f28 <dir_alloc+0x8e>
 8005f22:	e00c      	b.n	8005f3e <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005f24:	2300      	movs	r3, #0
 8005f26:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005f28:	2101      	movs	r1, #1
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff fecf 	bl	8005cce <dir_next>
 8005f30:	4603      	mov	r3, r0
 8005f32:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0c2      	beq.n	8005ec0 <dir_alloc+0x26>
 8005f3a:	e000      	b.n	8005f3e <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8005f3c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d101      	bne.n	8005f48 <dir_alloc+0xae>
 8005f44:	2307      	movs	r3, #7
 8005f46:	75fb      	strb	r3, [r7, #23]
	return res;
 8005f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	331a      	adds	r3, #26
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe fb7f 	bl	8004664 <ld_word>
 8005f66:	4603      	mov	r3, r0
 8005f68:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d109      	bne.n	8005f86 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	3314      	adds	r3, #20
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe fb74 	bl	8004664 <ld_word>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	041b      	lsls	r3, r3, #16
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005f86:	68fb      	ldr	r3, [r7, #12]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	331a      	adds	r3, #26
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	b292      	uxth	r2, r2
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe fc73 	bl	8004892 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d109      	bne.n	8005fc8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f103 0214 	add.w	r2, r3, #20
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	0c1b      	lsrs	r3, r3, #16
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7fe fc65 	bl	8004892 <st_word>
	}
}
 8005fc8:	bf00      	nop
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005fd0:	b590      	push	{r4, r7, lr}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	331a      	adds	r3, #26
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fb40 	bl	8004664 <ld_word>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <cmp_lfn+0x1e>
 8005fea:	2300      	movs	r3, #0
 8005fec:	e059      	b.n	80060a2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ff6:	1e5a      	subs	r2, r3, #1
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	4413      	add	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006004:	2301      	movs	r3, #1
 8006006:	81fb      	strh	r3, [r7, #14]
 8006008:	2300      	movs	r3, #0
 800600a:	613b      	str	r3, [r7, #16]
 800600c:	e033      	b.n	8006076 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800600e:	4a27      	ldr	r2, [pc, #156]	@ (80060ac <cmp_lfn+0xdc>)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4413      	add	r3, r2
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	4413      	add	r3, r2
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe fb21 	bl	8004664 <ld_word>
 8006022:	4603      	mov	r3, r0
 8006024:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006026:	89fb      	ldrh	r3, [r7, #14]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01a      	beq.n	8006062 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2bfe      	cmp	r3, #254	@ 0xfe
 8006030:	d812      	bhi.n	8006058 <cmp_lfn+0x88>
 8006032:	89bb      	ldrh	r3, [r7, #12]
 8006034:	4618      	mov	r0, r3
 8006036:	f002 fd1f 	bl	8008a78 <ff_wtoupper>
 800603a:	4603      	mov	r3, r0
 800603c:	461c      	mov	r4, r3
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	617a      	str	r2, [r7, #20]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4413      	add	r3, r2
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	4618      	mov	r0, r3
 800604e:	f002 fd13 	bl	8008a78 <ff_wtoupper>
 8006052:	4603      	mov	r3, r0
 8006054:	429c      	cmp	r4, r3
 8006056:	d001      	beq.n	800605c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006058:	2300      	movs	r3, #0
 800605a:	e022      	b.n	80060a2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800605c:	89bb      	ldrh	r3, [r7, #12]
 800605e:	81fb      	strh	r3, [r7, #14]
 8006060:	e006      	b.n	8006070 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006062:	89bb      	ldrh	r3, [r7, #12]
 8006064:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006068:	4293      	cmp	r3, r2
 800606a:	d001      	beq.n	8006070 <cmp_lfn+0xa0>
 800606c:	2300      	movs	r3, #0
 800606e:	e018      	b.n	80060a2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	3301      	adds	r3, #1
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d9c8      	bls.n	800600e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <cmp_lfn+0xd0>
 8006088:	89fb      	ldrh	r3, [r7, #14]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d008      	beq.n	80060a0 <cmp_lfn+0xd0>
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	4413      	add	r3, r2
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <cmp_lfn+0xd0>
 800609c:	2300      	movs	r3, #0
 800609e:	e000      	b.n	80060a2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80060a0:	2301      	movs	r3, #1
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd90      	pop	{r4, r7, pc}
 80060aa:	bf00      	nop
 80060ac:	08009b94 	.word	0x08009b94

080060b0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	331a      	adds	r3, #26
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fad0 	bl	8004664 <ld_word>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <pick_lfn+0x1e>
 80060ca:	2300      	movs	r3, #0
 80060cc:	e04d      	b.n	800616a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060d6:	1e5a      	subs	r2, r3, #1
 80060d8:	4613      	mov	r3, r2
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	4413      	add	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80060e4:	2301      	movs	r3, #1
 80060e6:	81fb      	strh	r3, [r7, #14]
 80060e8:	2300      	movs	r3, #0
 80060ea:	613b      	str	r3, [r7, #16]
 80060ec:	e028      	b.n	8006140 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80060ee:	4a21      	ldr	r2, [pc, #132]	@ (8006174 <pick_lfn+0xc4>)
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	4413      	add	r3, r2
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fe fab1 	bl	8004664 <ld_word>
 8006102:	4603      	mov	r3, r0
 8006104:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006106:	89fb      	ldrh	r3, [r7, #14]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00f      	beq.n	800612c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2bfe      	cmp	r3, #254	@ 0xfe
 8006110:	d901      	bls.n	8006116 <pick_lfn+0x66>
 8006112:	2300      	movs	r3, #0
 8006114:	e029      	b.n	800616a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006116:	89bb      	ldrh	r3, [r7, #12]
 8006118:	81fb      	strh	r3, [r7, #14]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	617a      	str	r2, [r7, #20]
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	4413      	add	r3, r2
 8006126:	89fa      	ldrh	r2, [r7, #14]
 8006128:	801a      	strh	r2, [r3, #0]
 800612a:	e006      	b.n	800613a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800612c:	89bb      	ldrh	r3, [r7, #12]
 800612e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006132:	4293      	cmp	r3, r2
 8006134:	d001      	beq.n	800613a <pick_lfn+0x8a>
 8006136:	2300      	movs	r3, #0
 8006138:	e017      	b.n	800616a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	3301      	adds	r3, #1
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	2b0c      	cmp	r3, #12
 8006144:	d9d3      	bls.n	80060ee <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2bfe      	cmp	r3, #254	@ 0xfe
 8006156:	d901      	bls.n	800615c <pick_lfn+0xac>
 8006158:	2300      	movs	r3, #0
 800615a:	e006      	b.n	800616a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	4413      	add	r3, r2
 8006164:	2200      	movs	r2, #0
 8006166:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8006168:	2301      	movs	r3, #1
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	08009b94 	.word	0x08009b94

08006178 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4611      	mov	r1, r2
 8006184:	461a      	mov	r2, r3
 8006186:	460b      	mov	r3, r1
 8006188:	71fb      	strb	r3, [r7, #7]
 800618a:	4613      	mov	r3, r2
 800618c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	330d      	adds	r3, #13
 8006192:	79ba      	ldrb	r2, [r7, #6]
 8006194:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	330b      	adds	r3, #11
 800619a:	220f      	movs	r2, #15
 800619c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	330c      	adds	r3, #12
 80061a2:	2200      	movs	r2, #0
 80061a4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	331a      	adds	r3, #26
 80061aa:	2100      	movs	r1, #0
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fe fb70 	bl	8004892 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	1e5a      	subs	r2, r3, #1
 80061b6:	4613      	mov	r3, r2
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	82fb      	strh	r3, [r7, #22]
 80061c6:	2300      	movs	r3, #0
 80061c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80061ca:	8afb      	ldrh	r3, [r7, #22]
 80061cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d007      	beq.n	80061e4 <put_lfn+0x6c>
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	61fa      	str	r2, [r7, #28]
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80061e4:	4a17      	ldr	r2, [pc, #92]	@ (8006244 <put_lfn+0xcc>)
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	4413      	add	r3, r2
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4413      	add	r3, r2
 80061f2:	8afa      	ldrh	r2, [r7, #22]
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fe fb4b 	bl	8004892 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80061fc:	8afb      	ldrh	r3, [r7, #22]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d102      	bne.n	8006208 <put_lfn+0x90>
 8006202:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006206:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	3301      	adds	r3, #1
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	2b0c      	cmp	r3, #12
 8006212:	d9da      	bls.n	80061ca <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006214:	8afb      	ldrh	r3, [r7, #22]
 8006216:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800621a:	4293      	cmp	r3, r2
 800621c:	d006      	beq.n	800622c <put_lfn+0xb4>
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4413      	add	r3, r2
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d103      	bne.n	8006234 <put_lfn+0xbc>
 800622c:	79fb      	ldrb	r3, [r7, #7]
 800622e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006232:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	79fa      	ldrb	r2, [r7, #7]
 8006238:	701a      	strb	r2, [r3, #0]
}
 800623a:	bf00      	nop
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	08009b94 	.word	0x08009b94

08006248 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08c      	sub	sp, #48	@ 0x30
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006256:	220b      	movs	r2, #11
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f7fe fbe8 	bl	8004a30 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2b05      	cmp	r3, #5
 8006264:	d92b      	bls.n	80062be <gen_numname+0x76>
		sr = seq;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800626a:	e022      	b.n	80062b2 <gen_numname+0x6a>
			wc = *lfn++;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	1c9a      	adds	r2, r3, #2
 8006270:	607a      	str	r2, [r7, #4]
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8006276:	2300      	movs	r3, #0
 8006278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800627a:	e017      	b.n	80062ac <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	005a      	lsls	r2, r3, #1
 8006280:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	4413      	add	r3, r2
 8006288:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800628a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800628c:	085b      	lsrs	r3, r3, #1
 800628e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d005      	beq.n	80062a6 <gen_numname+0x5e>
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80062a0:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80062a4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	3301      	adds	r3, #1
 80062aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ae:	2b0f      	cmp	r3, #15
 80062b0:	d9e4      	bls.n	800627c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1d8      	bne.n	800626c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80062be:	2307      	movs	r3, #7
 80062c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	f003 030f 	and.w	r3, r3, #15
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	3330      	adds	r3, #48	@ 0x30
 80062ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80062d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062d6:	2b39      	cmp	r3, #57	@ 0x39
 80062d8:	d904      	bls.n	80062e4 <gen_numname+0x9c>
 80062da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062de:	3307      	adds	r3, #7
 80062e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80062e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e6:	1e5a      	subs	r2, r3, #1
 80062e8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80062ea:	3330      	adds	r3, #48	@ 0x30
 80062ec:	443b      	add	r3, r7
 80062ee:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80062f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	091b      	lsrs	r3, r3, #4
 80062fa:	603b      	str	r3, [r7, #0]
	} while (seq);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1df      	bne.n	80062c2 <gen_numname+0x7a>
	ns[i] = '~';
 8006302:	f107 0214 	add.w	r2, r7, #20
 8006306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006308:	4413      	add	r3, r2
 800630a:	227e      	movs	r2, #126	@ 0x7e
 800630c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800630e:	2300      	movs	r3, #0
 8006310:	627b      	str	r3, [r7, #36]	@ 0x24
 8006312:	e002      	b.n	800631a <gen_numname+0xd2>
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	3301      	adds	r3, #1
 8006318:	627b      	str	r3, [r7, #36]	@ 0x24
 800631a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800631c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631e:	429a      	cmp	r2, r3
 8006320:	d205      	bcs.n	800632e <gen_numname+0xe6>
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006326:	4413      	add	r3, r2
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b20      	cmp	r3, #32
 800632c:	d1f2      	bne.n	8006314 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800632e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006330:	2b07      	cmp	r3, #7
 8006332:	d807      	bhi.n	8006344 <gen_numname+0xfc>
 8006334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	62ba      	str	r2, [r7, #40]	@ 0x28
 800633a:	3330      	adds	r3, #48	@ 0x30
 800633c:	443b      	add	r3, r7
 800633e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006342:	e000      	b.n	8006346 <gen_numname+0xfe>
 8006344:	2120      	movs	r1, #32
 8006346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	627a      	str	r2, [r7, #36]	@ 0x24
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	460a      	mov	r2, r1
 8006352:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006356:	2b07      	cmp	r3, #7
 8006358:	d9e9      	bls.n	800632e <gen_numname+0xe6>
}
 800635a:	bf00      	nop
 800635c:	bf00      	nop
 800635e:	3730      	adds	r7, #48	@ 0x30
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006370:	230b      	movs	r3, #11
 8006372:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	b2da      	uxtb	r2, r3
 8006378:	0852      	lsrs	r2, r2, #1
 800637a:	01db      	lsls	r3, r3, #7
 800637c:	4313      	orrs	r3, r2
 800637e:	b2da      	uxtb	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	6079      	str	r1, [r7, #4]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	4413      	add	r3, r2
 800638a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	3b01      	subs	r3, #1
 8006390:	60bb      	str	r3, [r7, #8]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1ed      	bne.n	8006374 <sum_sfn+0x10>
	return sum;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b087      	sub	sp, #28
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3301      	adds	r3, #1
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	3301      	adds	r3, #1
 80063b6:	015b      	lsls	r3, r3, #5
 80063b8:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80063ba:	2300      	movs	r3, #0
 80063bc:	827b      	strh	r3, [r7, #18]
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	e015      	b.n	80063f0 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d103      	bne.n	80063d2 <xdir_sum+0x2c>
			i++;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	3301      	adds	r3, #1
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	e00b      	b.n	80063ea <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80063d2:	8a7b      	ldrh	r3, [r7, #18]
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	0852      	lsrs	r2, r2, #1
 80063d8:	03db      	lsls	r3, r3, #15
 80063da:	4313      	orrs	r3, r2
 80063dc:	b29b      	uxth	r3, r3
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	440a      	add	r2, r1
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	4413      	add	r3, r2
 80063e8:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	3301      	adds	r3, #1
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d3e5      	bcc.n	80063c4 <xdir_sum+0x1e>
		}
	}
	return sum;
 80063f8:	8a7b      	ldrh	r3, [r7, #18]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8006412:	e01b      	b.n	800644c <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8006414:	89bb      	ldrh	r3, [r7, #12]
 8006416:	4618      	mov	r0, r3
 8006418:	f002 fb2e 	bl	8008a78 <ff_wtoupper>
 800641c:	4603      	mov	r3, r0
 800641e:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8006420:	89fb      	ldrh	r3, [r7, #14]
 8006422:	b29a      	uxth	r2, r3
 8006424:	0852      	lsrs	r2, r2, #1
 8006426:	03db      	lsls	r3, r3, #15
 8006428:	4313      	orrs	r3, r2
 800642a:	b29a      	uxth	r2, r3
 800642c:	89bb      	ldrh	r3, [r7, #12]
 800642e:	b2db      	uxtb	r3, r3
 8006430:	b29b      	uxth	r3, r3
 8006432:	4413      	add	r3, r2
 8006434:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8006436:	89fb      	ldrh	r3, [r7, #14]
 8006438:	b29a      	uxth	r2, r3
 800643a:	0852      	lsrs	r2, r2, #1
 800643c:	03db      	lsls	r3, r3, #15
 800643e:	4313      	orrs	r3, r2
 8006440:	b29a      	uxth	r2, r3
 8006442:	89bb      	ldrh	r3, [r7, #12]
 8006444:	0a1b      	lsrs	r3, r3, #8
 8006446:	b29b      	uxth	r3, r3
 8006448:	4413      	add	r3, r2
 800644a:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	1c9a      	adds	r2, r3, #2
 8006450:	607a      	str	r2, [r7, #4]
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	81bb      	strh	r3, [r7, #12]
 8006456:	89bb      	ldrh	r3, [r7, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1db      	bne.n	8006414 <xname_sum+0xe>
	}
	return sum;
 800645c:	89fb      	ldrh	r3, [r7, #14]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8006468:	b590      	push	{r4, r7, lr}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006480:	4619      	mov	r1, r3
 8006482:	4610      	mov	r0, r2
 8006484:	f7fe fd02 	bl	8004e8c <move_window>
 8006488:	4603      	mov	r3, r0
 800648a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <load_xdir+0x2e>
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	e09f      	b.n	80065d6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b85      	cmp	r3, #133	@ 0x85
 800649e:	d001      	beq.n	80064a4 <load_xdir+0x3c>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e098      	b.n	80065d6 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a8:	2220      	movs	r2, #32
 80064aa:	4619      	mov	r1, r3
 80064ac:	6938      	ldr	r0, [r7, #16]
 80064ae:	f7fe fabf 	bl	8004a30 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	3301      	adds	r3, #1
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	3301      	adds	r3, #1
 80064ba:	015b      	lsls	r3, r3, #5
 80064bc:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b5f      	cmp	r3, #95	@ 0x5f
 80064c2:	d903      	bls.n	80064cc <load_xdir+0x64>
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80064ca:	d901      	bls.n	80064d0 <load_xdir+0x68>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e082      	b.n	80065d6 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 80064d0:	2100      	movs	r1, #0
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff fbfb 	bl	8005cce <dir_next>
 80064d8:	4603      	mov	r3, r0
 80064da:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <load_xdir+0x7e>
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	e077      	b.n	80065d6 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ee:	4619      	mov	r1, r3
 80064f0:	4610      	mov	r0, r2
 80064f2:	f7fe fccb 	bl	8004e8c <move_window>
 80064f6:	4603      	mov	r3, r0
 80064f8:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <load_xdir+0x9c>
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	e068      	b.n	80065d6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2bc0      	cmp	r3, #192	@ 0xc0
 800650c:	d001      	beq.n	8006512 <load_xdir+0xaa>
 800650e:	2302      	movs	r3, #2
 8006510:	e061      	b.n	80065d6 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f103 0020 	add.w	r0, r3, #32
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800651c:	2220      	movs	r2, #32
 800651e:	4619      	mov	r1, r3
 8006520:	f7fe fa86 	bl	8004a30 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	3323      	adds	r3, #35	@ 0x23
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	332c      	adds	r3, #44	@ 0x2c
 800652c:	4a2c      	ldr	r2, [pc, #176]	@ (80065e0 <load_xdir+0x178>)
 800652e:	fba2 2303 	umull	r2, r3, r2, r3
 8006532:	08db      	lsrs	r3, r3, #3
 8006534:	015b      	lsls	r3, r3, #5
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	429a      	cmp	r2, r3
 800653a:	d201      	bcs.n	8006540 <load_xdir+0xd8>
 800653c:	2302      	movs	r3, #2
 800653e:	e04a      	b.n	80065d6 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8006540:	2340      	movs	r3, #64	@ 0x40
 8006542:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8006544:	2100      	movs	r1, #0
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7ff fbc1 	bl	8005cce <dir_next>
 800654c:	4603      	mov	r3, r0
 800654e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <load_xdir+0xf2>
 8006556:	7bfb      	ldrb	r3, [r7, #15]
 8006558:	e03d      	b.n	80065d6 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006562:	4619      	mov	r1, r3
 8006564:	4610      	mov	r0, r2
 8006566:	f7fe fc91 	bl	8004e8c <move_window>
 800656a:	4603      	mov	r3, r0
 800656c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <load_xdir+0x110>
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	e02e      	b.n	80065d6 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2bc1      	cmp	r3, #193	@ 0xc1
 8006580:	d001      	beq.n	8006586 <load_xdir+0x11e>
 8006582:	2302      	movs	r3, #2
 8006584:	e027      	b.n	80065d6 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800658c:	d208      	bcs.n	80065a0 <load_xdir+0x138>
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	18d0      	adds	r0, r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006598:	2220      	movs	r2, #32
 800659a:	4619      	mov	r1, r3
 800659c:	f7fe fa48 	bl	8004a30 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	3320      	adds	r3, #32
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d3ca      	bcc.n	8006544 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80065b4:	d80e      	bhi.n	80065d4 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80065b6:	6938      	ldr	r0, [r7, #16]
 80065b8:	f7ff fef5 	bl	80063a6 <xdir_sum>
 80065bc:	4603      	mov	r3, r0
 80065be:	461c      	mov	r4, r3
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	3302      	adds	r3, #2
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fe f84d 	bl	8004664 <ld_word>
 80065ca:	4603      	mov	r3, r0
 80065cc:	429c      	cmp	r4, r3
 80065ce:	d001      	beq.n	80065d4 <load_xdir+0x16c>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e000      	b.n	80065d6 <load_xdir+0x16e>
	}
	return FR_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd90      	pop	{r4, r7, pc}
 80065de:	bf00      	nop
 80065e0:	88888889 	.word	0x88888889

080065e4 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 80065e4:	b5b0      	push	{r4, r5, r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6808      	ldr	r0, [r1, #0]
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6a08      	ldr	r0, [r1, #32]
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8006602:	b2c8      	uxtb	r0, r1
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800660c:	2000      	movs	r0, #0
 800660e:	460c      	mov	r4, r1
 8006610:	4605      	mov	r5, r0
 8006612:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 8006616:	2300      	movs	r3, #0
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff faba 	bl	8005ba6 <dir_sdi>
 8006632:	4603      	mov	r3, r0
 8006634:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d104      	bne.n	8006646 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff ff13 	bl	8006468 <load_xdir>
 8006642:	4603      	mov	r3, r0
 8006644:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8006646:	7bfb      	ldrb	r3, [r7, #15]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bdb0      	pop	{r4, r5, r7, pc}

08006650 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	1c9c      	adds	r4, r3, #2
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f7ff fe9e 	bl	80063a6 <xdir_sum>
 800666a:	4603      	mov	r3, r0
 800666c:	4619      	mov	r1, r3
 800666e:	4620      	mov	r0, r4
 8006670:	f7fe f90f 	bl	8004892 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3301      	adds	r3, #1
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	3301      	adds	r3, #1
 800667c:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff fa8e 	bl	8005ba6 <dir_sdi>
 800668a:	4603      	mov	r3, r0
 800668c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800668e:	e026      	b.n	80066de <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006698:	4619      	mov	r1, r3
 800669a:	4610      	mov	r0, r2
 800669c:	f7fe fbf6 	bl	8004e8c <move_window>
 80066a0:	4603      	mov	r3, r0
 80066a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d11d      	bne.n	80066e6 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ae:	2220      	movs	r2, #32
 80066b0:	68f9      	ldr	r1, [r7, #12]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fe f9bc 	bl	8004a30 <mem_cpy>
		dp->obj.fs->wflag = 1;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2201      	movs	r2, #1
 80066be:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00e      	beq.n	80066ea <store_xdir+0x9a>
		dirb += SZDIRE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3320      	adds	r3, #32
 80066d0:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 80066d2:	2100      	movs	r1, #0
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff fafa 	bl	8005cce <dir_next>
 80066da:	4603      	mov	r3, r0
 80066dc:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0d5      	beq.n	8006690 <store_xdir+0x40>
 80066e4:	e002      	b.n	80066ec <store_xdir+0x9c>
		if (res != FR_OK) break;
 80066e6:	bf00      	nop
 80066e8:	e000      	b.n	80066ec <store_xdir+0x9c>
		if (--nent == 0) break;
 80066ea:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <store_xdir+0xa8>
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <store_xdir+0xac>
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	e000      	b.n	80066fe <store_xdir+0xae>
 80066fc:	2302      	movs	r3, #2
}
 80066fe:	4618      	mov	r0, r3
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	bd90      	pop	{r4, r7, pc}

08006706 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8006706:	b590      	push	{r4, r7, lr}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8006710:	2240      	movs	r2, #64	@ 0x40
 8006712:	2100      	movs	r1, #0
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7fe f9ac 	bl	8004a72 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2285      	movs	r2, #133	@ 0x85
 800671e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3320      	adds	r3, #32
 8006724:	22c0      	movs	r2, #192	@ 0xc0
 8006726:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8006728:	2300      	movs	r3, #0
 800672a:	72bb      	strb	r3, [r7, #10]
 800672c:	2301      	movs	r3, #1
 800672e:	72fb      	strb	r3, [r7, #11]
 8006730:	2301      	movs	r3, #1
 8006732:	813b      	strh	r3, [r7, #8]
 8006734:	2340      	movs	r3, #64	@ 0x40
 8006736:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	60fa      	str	r2, [r7, #12]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	4413      	add	r3, r2
 8006742:	22c1      	movs	r2, #193	@ 0xc1
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	60fa      	str	r2, [r7, #12]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	4413      	add	r3, r2
 8006750:	2200      	movs	r2, #0
 8006752:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8006754:	893b      	ldrh	r3, [r7, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00b      	beq.n	8006772 <create_xdir+0x6c>
 800675a:	7abb      	ldrb	r3, [r7, #10]
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	4413      	add	r3, r2
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	813b      	strh	r3, [r7, #8]
 8006766:	893b      	ldrh	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <create_xdir+0x6c>
 800676c:	7abb      	ldrb	r3, [r7, #10]
 800676e:	3301      	adds	r3, #1
 8006770:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	893a      	ldrh	r2, [r7, #8]
 800677a:	4611      	mov	r1, r2
 800677c:	4618      	mov	r0, r3
 800677e:	f7fe f888 	bl	8004892 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3302      	adds	r3, #2
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e0      	bne.n	8006754 <create_xdir+0x4e>
		nb++;
 8006792:	7afb      	ldrb	r3, [r7, #11]
 8006794:	3301      	adds	r3, #1
 8006796:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8006798:	7abb      	ldrb	r3, [r7, #10]
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	4413      	add	r3, r2
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1c8      	bne.n	8006738 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3323      	adds	r3, #35	@ 0x23
 80067aa:	7aba      	ldrb	r2, [r7, #10]
 80067ac:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3301      	adds	r3, #1
 80067b2:	7afa      	ldrb	r2, [r7, #11]
 80067b4:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80067bc:	6838      	ldr	r0, [r7, #0]
 80067be:	f7ff fe22 	bl	8006406 <xname_sum>
 80067c2:	4603      	mov	r3, r0
 80067c4:	4619      	mov	r1, r3
 80067c6:	4620      	mov	r0, r4
 80067c8:	f7fe f863 	bl	8004892 <st_word>
}
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd90      	pop	{r4, r7, pc}

080067d4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80067de:	2304      	movs	r3, #4
 80067e0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80067e8:	23ff      	movs	r3, #255	@ 0xff
 80067ea:	757b      	strb	r3, [r7, #21]
 80067ec:	23ff      	movs	r3, #255	@ 0xff
 80067ee:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80067f0:	e0a6      	b.n	8006940 <dir_read+0x16c>
		res = move_window(fs, dp->sect);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f6:	4619      	mov	r1, r3
 80067f8:	6938      	ldr	r0, [r7, #16]
 80067fa:	f7fe fb47 	bl	8004e8c <move_window>
 80067fe:	4603      	mov	r3, r0
 8006800:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	2b00      	cmp	r3, #0
 8006806:	f040 80a1 	bne.w	800694c <dir_read+0x178>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8006812:	7dbb      	ldrb	r3, [r7, #22]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006818:	2304      	movs	r3, #4
 800681a:	75fb      	strb	r3, [r7, #23]
 800681c:	e09d      	b.n	800695a <dir_read+0x186>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b04      	cmp	r3, #4
 8006824:	d11f      	bne.n	8006866 <dir_read+0x92>
			if (_USE_LABEL && vol) {
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <dir_read+0x60>
				if (c == 0x83) break;	/* Volume label entry? */
 800682c:	7dbb      	ldrb	r3, [r7, #22]
 800682e:	2b83      	cmp	r3, #131	@ 0x83
 8006830:	d17d      	bne.n	800692e <dir_read+0x15a>
 8006832:	e092      	b.n	800695a <dir_read+0x186>
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8006834:	7dbb      	ldrb	r3, [r7, #22]
 8006836:	2b85      	cmp	r3, #133	@ 0x85
 8006838:	d179      	bne.n	800692e <dir_read+0x15a>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff fe10 	bl	8006468 <load_xdir>
 8006848:	4603      	mov	r3, r0
 800684a:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d17e      	bne.n	8006950 <dir_read+0x17c>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	3304      	adds	r3, #4
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800685e:	b2da      	uxtb	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	719a      	strb	r2, [r3, #6]
					}
					break;
 8006864:	e074      	b.n	8006950 <dir_read+0x17c>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800686a:	330b      	adds	r3, #11
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006872:	73fb      	strb	r3, [r7, #15]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	7bfa      	ldrb	r2, [r7, #15]
 8006878:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800687a:	7dbb      	ldrb	r3, [r7, #22]
 800687c:	2be5      	cmp	r3, #229	@ 0xe5
 800687e:	d00e      	beq.n	800689e <dir_read+0xca>
 8006880:	7dbb      	ldrb	r3, [r7, #22]
 8006882:	2b2e      	cmp	r3, #46	@ 0x2e
 8006884:	d00b      	beq.n	800689e <dir_read+0xca>
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	f023 0320 	bic.w	r3, r3, #32
 800688c:	2b08      	cmp	r3, #8
 800688e:	bf0c      	ite	eq
 8006890:	2301      	moveq	r3, #1
 8006892:	2300      	movne	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	461a      	mov	r2, r3
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	4293      	cmp	r3, r2
 800689c:	d002      	beq.n	80068a4 <dir_read+0xd0>
				ord = 0xFF;
 800689e:	23ff      	movs	r3, #255	@ 0xff
 80068a0:	757b      	strb	r3, [r7, #21]
 80068a2:	e044      	b.n	800692e <dir_read+0x15a>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	2b0f      	cmp	r3, #15
 80068a8:	d12f      	bne.n	800690a <dir_read+0x136>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80068aa:	7dbb      	ldrb	r3, [r7, #22]
 80068ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00d      	beq.n	80068d0 <dir_read+0xfc>
						sum = dp->dir[LDIR_Chksum];
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b8:	7b5b      	ldrb	r3, [r3, #13]
 80068ba:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80068bc:	7dbb      	ldrb	r3, [r7, #22]
 80068be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068c2:	75bb      	strb	r3, [r7, #22]
 80068c4:	7dbb      	ldrb	r3, [r7, #22]
 80068c6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80068d0:	7dba      	ldrb	r2, [r7, #22]
 80068d2:	7d7b      	ldrb	r3, [r7, #21]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d115      	bne.n	8006904 <dir_read+0x130>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068dc:	330d      	adds	r3, #13
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	7d3a      	ldrb	r2, [r7, #20]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d10e      	bne.n	8006904 <dir_read+0x130>
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	691a      	ldr	r2, [r3, #16]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ee:	4619      	mov	r1, r3
 80068f0:	4610      	mov	r0, r2
 80068f2:	f7ff fbdd 	bl	80060b0 <pick_lfn>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <dir_read+0x130>
 80068fc:	7d7b      	ldrb	r3, [r7, #21]
 80068fe:	3b01      	subs	r3, #1
 8006900:	b2db      	uxtb	r3, r3
 8006902:	e000      	b.n	8006906 <dir_read+0x132>
 8006904:	23ff      	movs	r3, #255	@ 0xff
 8006906:	757b      	strb	r3, [r7, #21]
 8006908:	e011      	b.n	800692e <dir_read+0x15a>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800690a:	7d7b      	ldrb	r3, [r7, #21]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d109      	bne.n	8006924 <dir_read+0x150>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff fd25 	bl	8006364 <sum_sfn>
 800691a:	4603      	mov	r3, r0
 800691c:	461a      	mov	r2, r3
 800691e:	7d3b      	ldrb	r3, [r7, #20]
 8006920:	4293      	cmp	r3, r2
 8006922:	d017      	beq.n	8006954 <dir_read+0x180>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800692a:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800692c:	e012      	b.n	8006954 <dir_read+0x180>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800692e:	2100      	movs	r1, #0
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff f9cc 	bl	8005cce <dir_next>
 8006936:	4603      	mov	r3, r0
 8006938:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800693a:	7dfb      	ldrb	r3, [r7, #23]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10b      	bne.n	8006958 <dir_read+0x184>
	while (dp->sect) {
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006944:	2b00      	cmp	r3, #0
 8006946:	f47f af54 	bne.w	80067f2 <dir_read+0x1e>
 800694a:	e006      	b.n	800695a <dir_read+0x186>
		if (res != FR_OK) break;
 800694c:	bf00      	nop
 800694e:	e004      	b.n	800695a <dir_read+0x186>
					break;
 8006950:	bf00      	nop
 8006952:	e002      	b.n	800695a <dir_read+0x186>
					break;
 8006954:	bf00      	nop
 8006956:	e000      	b.n	800695a <dir_read+0x186>
		if (res != FR_OK) break;
 8006958:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800695a:	7dfb      	ldrb	r3, [r7, #23]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <dir_read+0x192>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006970:	b590      	push	{r4, r7, lr}
 8006972:	b089      	sub	sp, #36	@ 0x24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800697e:	2100      	movs	r1, #0
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff f910 	bl	8005ba6 <dir_sdi>
 8006986:	4603      	mov	r3, r0
 8006988:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800698a:	7ffb      	ldrb	r3, [r7, #31]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <dir_find+0x24>
 8006990:	7ffb      	ldrb	r3, [r7, #31]
 8006992:	e113      	b.n	8006bbc <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b04      	cmp	r3, #4
 800699a:	d165      	bne.n	8006a68 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff fd30 	bl	8006406 <xname_sum>
 80069a6:	4603      	mov	r3, r0
 80069a8:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80069aa:	e050      	b.n	8006a4e <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	3324      	adds	r3, #36	@ 0x24
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fd fe56 	bl	8004664 <ld_word>
 80069b8:	4603      	mov	r3, r0
 80069ba:	461a      	mov	r2, r3
 80069bc:	893b      	ldrh	r3, [r7, #8]
 80069be:	4293      	cmp	r3, r2
 80069c0:	d144      	bne.n	8006a4c <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80069ca:	76fb      	strb	r3, [r7, #27]
 80069cc:	2340      	movs	r3, #64	@ 0x40
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	2300      	movs	r3, #0
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	e029      	b.n	8006a2a <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f003 031f 	and.w	r3, r3, #31
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d102      	bne.n	80069e6 <dir_find+0x76>
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	3302      	adds	r3, #2
 80069e4:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	695a      	ldr	r2, [r3, #20]
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	4413      	add	r3, r2
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fd fe38 	bl	8004664 <ld_word>
 80069f4:	4603      	mov	r3, r0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f002 f83e 	bl	8008a78 <ff_wtoupper>
 80069fc:	4603      	mov	r3, r0
 80069fe:	461c      	mov	r4, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	4413      	add	r3, r2
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f002 f833 	bl	8008a78 <ff_wtoupper>
 8006a12:	4603      	mov	r3, r0
 8006a14:	429c      	cmp	r4, r3
 8006a16:	d10c      	bne.n	8006a32 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8006a18:	7efb      	ldrb	r3, [r7, #27]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	76fb      	strb	r3, [r7, #27]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	3302      	adds	r3, #2
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	3301      	adds	r3, #1
 8006a28:	613b      	str	r3, [r7, #16]
 8006a2a:	7efb      	ldrb	r3, [r7, #27]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1d2      	bne.n	80069d6 <dir_find+0x66>
 8006a30:	e000      	b.n	8006a34 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8006a32:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8006a34:	7efb      	ldrb	r3, [r7, #27]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <dir_find+0xde>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	4413      	add	r3, r2
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00b      	beq.n	8006a62 <dir_find+0xf2>
 8006a4a:	e000      	b.n	8006a4e <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8006a4c:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8006a4e:	2100      	movs	r1, #0
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff febf 	bl	80067d4 <dir_read>
 8006a56:	4603      	mov	r3, r0
 8006a58:	77fb      	strb	r3, [r7, #31]
 8006a5a:	7ffb      	ldrb	r3, [r7, #31]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d0a5      	beq.n	80069ac <dir_find+0x3c>
 8006a60:	e000      	b.n	8006a64 <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8006a62:	bf00      	nop
		}
		return res;
 8006a64:	7ffb      	ldrb	r3, [r7, #31]
 8006a66:	e0a9      	b.n	8006bbc <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006a68:	23ff      	movs	r3, #255	@ 0xff
 8006a6a:	773b      	strb	r3, [r7, #28]
 8006a6c:	7f3b      	ldrb	r3, [r7, #28]
 8006a6e:	777b      	strb	r3, [r7, #29]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a76:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7fe fa04 	bl	8004e8c <move_window>
 8006a84:	4603      	mov	r3, r0
 8006a86:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8006a88:	7ffb      	ldrb	r3, [r7, #31]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f040 8090 	bne.w	8006bb0 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006a98:	7fbb      	ldrb	r3, [r7, #30]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d102      	bne.n	8006aa4 <dir_find+0x134>
 8006a9e:	2304      	movs	r3, #4
 8006aa0:	77fb      	strb	r3, [r7, #31]
 8006aa2:	e08a      	b.n	8006bba <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa8:	330b      	adds	r3, #11
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ab0:	72fb      	strb	r3, [r7, #11]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	7afa      	ldrb	r2, [r7, #11]
 8006ab6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006ab8:	7fbb      	ldrb	r3, [r7, #30]
 8006aba:	2be5      	cmp	r3, #229	@ 0xe5
 8006abc:	d007      	beq.n	8006ace <dir_find+0x15e>
 8006abe:	7afb      	ldrb	r3, [r7, #11]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d009      	beq.n	8006adc <dir_find+0x16c>
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
 8006aca:	2b0f      	cmp	r3, #15
 8006acc:	d006      	beq.n	8006adc <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ace:	23ff      	movs	r3, #255	@ 0xff
 8006ad0:	777b      	strb	r3, [r7, #29]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ad8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006ada:	e05e      	b.n	8006b9a <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006adc:	7afb      	ldrb	r3, [r7, #11]
 8006ade:	2b0f      	cmp	r3, #15
 8006ae0:	d136      	bne.n	8006b50 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d154      	bne.n	8006b9a <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006af0:	7fbb      	ldrb	r3, [r7, #30]
 8006af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00d      	beq.n	8006b16 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006afe:	7b5b      	ldrb	r3, [r3, #13]
 8006b00:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006b02:	7fbb      	ldrb	r3, [r7, #30]
 8006b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b08:	77bb      	strb	r3, [r7, #30]
 8006b0a:	7fbb      	ldrb	r3, [r7, #30]
 8006b0c:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006b16:	7fba      	ldrb	r2, [r7, #30]
 8006b18:	7f7b      	ldrb	r3, [r7, #29]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d115      	bne.n	8006b4a <dir_find+0x1da>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b22:	330d      	adds	r3, #13
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	7f3a      	ldrb	r2, [r7, #28]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d10e      	bne.n	8006b4a <dir_find+0x1da>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b34:	4619      	mov	r1, r3
 8006b36:	4610      	mov	r0, r2
 8006b38:	f7ff fa4a 	bl	8005fd0 <cmp_lfn>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <dir_find+0x1da>
 8006b42:	7f7b      	ldrb	r3, [r7, #29]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	e000      	b.n	8006b4c <dir_find+0x1dc>
 8006b4a:	23ff      	movs	r3, #255	@ 0xff
 8006b4c:	777b      	strb	r3, [r7, #29]
 8006b4e:	e024      	b.n	8006b9a <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006b50:	7f7b      	ldrb	r3, [r7, #29]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d109      	bne.n	8006b6a <dir_find+0x1fa>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7ff fc02 	bl	8006364 <sum_sfn>
 8006b60:	4603      	mov	r3, r0
 8006b62:	461a      	mov	r2, r3
 8006b64:	7f3b      	ldrb	r3, [r7, #28]
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d024      	beq.n	8006bb4 <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <dir_find+0x21e>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3340      	adds	r3, #64	@ 0x40
 8006b80:	220b      	movs	r2, #11
 8006b82:	4619      	mov	r1, r3
 8006b84:	f7fd ff90 	bl	8004aa8 <mem_cmp>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d014      	beq.n	8006bb8 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006b8e:	23ff      	movs	r3, #255	@ 0xff
 8006b90:	777b      	strb	r3, [r7, #29]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b98:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7ff f896 	bl	8005cce <dir_next>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8006ba6:	7ffb      	ldrb	r3, [r7, #31]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f43f af65 	beq.w	8006a78 <dir_find+0x108>
 8006bae:	e004      	b.n	8006bba <dir_find+0x24a>
		if (res != FR_OK) break;
 8006bb0:	bf00      	nop
 8006bb2:	e002      	b.n	8006bba <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006bb4:	bf00      	nop
 8006bb6:	e000      	b.n	8006bba <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006bb8:	bf00      	nop

	return res;
 8006bba:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3724      	adds	r7, #36	@ 0x24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd90      	pop	{r4, r7, pc}

08006bc4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006bc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006bc8:	b0a2      	sub	sp, #136	@ 0x88
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	677b      	str	r3, [r7, #116]	@ 0x74
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006bda:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <dir_register+0x22>
 8006be2:	2306      	movs	r3, #6
 8006be4:	e198      	b.n	8006f18 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006be6:	2300      	movs	r3, #0
 8006be8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006bea:	e002      	b.n	8006bf2 <dir_register+0x2e>
 8006bec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006bee:	3301      	adds	r3, #1
 8006bf0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006bf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bf4:	691a      	ldr	r2, [r3, #16]
 8006bf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	4413      	add	r3, r2
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f4      	bne.n	8006bec <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006c02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	f040 80a3 	bne.w	8006d52 <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8006c0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006c0e:	330e      	adds	r3, #14
 8006c10:	4aa7      	ldr	r2, [pc, #668]	@ (8006eb0 <dir_register+0x2ec>)
 8006c12:	fba2 2303 	umull	r2, r3, r2, r3
 8006c16:	08db      	lsrs	r3, r3, #3
 8006c18:	3302      	adds	r3, #2
 8006c1a:	67bb      	str	r3, [r7, #120]	@ 0x78
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8006c1c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff f93b 	bl	8005e9a <dir_alloc>
 8006c24:	4603      	mov	r3, r0
 8006c26:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		if (res != FR_OK) return res;
 8006c2a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <dir_register+0x74>
 8006c32:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006c36:	e16f      	b.n	8006f18 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	015b      	lsls	r3, r3, #5
 8006c42:	1ad2      	subs	r2, r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d076      	beq.n	8006d3e <dir_register+0x17a>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	79db      	ldrb	r3, [r3, #7]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d070      	beq.n	8006d3e <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006c62:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8006c64:	8949      	ldrh	r1, [r1, #10]
 8006c66:	4608      	mov	r0, r1
 8006c68:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8006c6a:	8989      	ldrh	r1, [r1, #12]
 8006c6c:	fb00 f101 	mul.w	r1, r0, r1
 8006c70:	2000      	movs	r0, #0
 8006c72:	460c      	mov	r4, r1
 8006c74:	4605      	mov	r5, r0
 8006c76:	eb12 0804 	adds.w	r8, r2, r4
 8006c7a:	eb43 0905 	adc.w	r9, r3, r5
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe fd2c 	bl	80056e4 <fill_first_frag>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			if (res != FR_OK) return res;
 8006c92:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <dir_register+0xdc>
 8006c9a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006c9e:	e13b      	b.n	8006f18 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ca6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006caa:	4619      	mov	r1, r3
 8006cac:	f7fe fd49 	bl	8005742 <fill_last_frag>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			if (res != FR_OK) return res;
 8006cb6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <dir_register+0x100>
 8006cbe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006cc2:	e129      	b.n	8006f18 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	f107 0308 	add.w	r3, r7, #8
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff fc89 	bl	80065e4 <load_obj_dir>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			if (res != FR_OK) return res;
 8006cd8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <dir_register+0x122>
 8006ce0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006ce4:	e118      	b.n	8006f18 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8006ce6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	f7fd fe13 	bl	8004920 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8006cfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006d08:	4608      	mov	r0, r1
 8006d0a:	f7fd fe09 	bl	8004920 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	79da      	ldrb	r2, [r3, #7]
 8006d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	3321      	adds	r3, #33	@ 0x21
 8006d18:	f042 0201 	orr.w	r2, r2, #1
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8006d20:	f107 0308 	add.w	r3, r7, #8
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff fc93 	bl	8006650 <store_xdir>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			if (res != FR_OK) return res;
 8006d30:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <dir_register+0x17a>
 8006d38:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006d3c:	e0ec      	b.n	8006f18 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8006d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d40:	695a      	ldr	r2, [r3, #20]
 8006d42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f7ff fcdc 	bl	8006706 <create_xdir>
		return FR_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e0e2      	b.n	8006f18 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8006d58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006d5c:	220c      	movs	r2, #12
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fd fe66 	bl	8004a30 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006d64:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d039      	beq.n	8006de4 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2240      	movs	r2, #64	@ 0x40
 8006d74:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d7e:	e019      	b.n	8006db4 <dir_register+0x1f0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8006d86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d88:	691a      	ldr	r2, [r3, #16]
 8006d8a:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8006d8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d92:	f7ff fa59 	bl	8006248 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff fdea 	bl	8006970 <dir_find>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			if (res != FR_OK) break;
 8006da2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d109      	bne.n	8006dbe <dir_register+0x1fa>
		for (n = 1; n < 100; n++) {
 8006daa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006dae:	3301      	adds	r3, #1
 8006db0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006db8:	2b63      	cmp	r3, #99	@ 0x63
 8006dba:	d9e1      	bls.n	8006d80 <dir_register+0x1bc>
 8006dbc:	e000      	b.n	8006dc0 <dir_register+0x1fc>
			if (res != FR_OK) break;
 8006dbe:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006dc4:	2b64      	cmp	r3, #100	@ 0x64
 8006dc6:	d101      	bne.n	8006dcc <dir_register+0x208>
 8006dc8:	2307      	movs	r3, #7
 8006dca:	e0a5      	b.n	8006f18 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006dcc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d002      	beq.n	8006dda <dir_register+0x216>
 8006dd4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006dd8:	e09e      	b.n	8006f18 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006dda:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006de4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d007      	beq.n	8006e00 <dir_register+0x23c>
 8006df0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006df2:	330c      	adds	r3, #12
 8006df4:	4a2f      	ldr	r2, [pc, #188]	@ (8006eb4 <dir_register+0x2f0>)
 8006df6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfa:	089b      	lsrs	r3, r3, #2
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	e000      	b.n	8006e02 <dir_register+0x23e>
 8006e00:	2301      	movs	r3, #1
 8006e02:	67bb      	str	r3, [r7, #120]	@ 0x78
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006e04:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7ff f847 	bl	8005e9a <dir_alloc>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006e12:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d14f      	bne.n	8006eba <dir_register+0x2f6>
 8006e1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d049      	beq.n	8006eba <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e2c:	015b      	lsls	r3, r3, #5
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fe feb7 	bl	8005ba6 <dir_sdi>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		if (res == FR_OK) {
 8006e3e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d139      	bne.n	8006eba <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3340      	adds	r3, #64	@ 0x40
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fa8a 	bl	8006364 <sum_sfn>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006e5e:	f7fe f815 	bl	8004e8c <move_window>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
				if (res != FR_OK) break;
 8006e68:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d123      	bne.n	8006eb8 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006e70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e72:	6918      	ldr	r0, [r3, #16]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8006e78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8006e80:	f7ff f97a 	bl	8006178 <put_lfn>
				fs->wflag = 1;
 8006e84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e86:	2201      	movs	r2, #1
 8006e88:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7fe ff1e 	bl	8005cce <dir_next>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			} while (res == FR_OK && --nent);
 8006e98:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10c      	bne.n	8006eba <dir_register+0x2f6>
 8006ea0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ea6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1d4      	bne.n	8006e56 <dir_register+0x292>
 8006eac:	e005      	b.n	8006eba <dir_register+0x2f6>
 8006eae:	bf00      	nop
 8006eb0:	88888889 	.word	0x88888889
 8006eb4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8006eb8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006eba:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d128      	bne.n	8006f14 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006eca:	f7fd ffdf 	bl	8004e8c <move_window>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		if (res == FR_OK) {
 8006ed4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d11b      	bne.n	8006f14 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fd fdc4 	bl	8004a72 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3340      	adds	r3, #64	@ 0x40
 8006ef2:	220b      	movs	r2, #11
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	f7fd fd9b 	bl	8004a30 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f04:	330c      	adds	r3, #12
 8006f06:	f002 0218 	and.w	r2, r2, #24
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006f0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f10:	2201      	movs	r2, #1
 8006f12:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006f14:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3788      	adds	r7, #136	@ 0x88
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006f22:	bf00      	nop

08006f24 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b08a      	sub	sp, #40	@ 0x28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	61ba      	str	r2, [r7, #24]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006f52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f54:	2b1f      	cmp	r3, #31
 8006f56:	d940      	bls.n	8006fda <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006f58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f5a:	2b2f      	cmp	r3, #47	@ 0x2f
 8006f5c:	d006      	beq.n	8006f6c <create_name+0x48>
 8006f5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f60:	2b5c      	cmp	r3, #92	@ 0x5c
 8006f62:	d110      	bne.n	8006f86 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006f64:	e002      	b.n	8006f6c <create_name+0x48>
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	4413      	add	r3, r2
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b2f      	cmp	r3, #47	@ 0x2f
 8006f76:	d0f6      	beq.n	8006f66 <create_name+0x42>
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b5c      	cmp	r3, #92	@ 0x5c
 8006f82:	d0f0      	beq.n	8006f66 <create_name+0x42>
			break;
 8006f84:	e02a      	b.n	8006fdc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2bfe      	cmp	r3, #254	@ 0xfe
 8006f8a:	d901      	bls.n	8006f90 <create_name+0x6c>
 8006f8c:	2306      	movs	r3, #6
 8006f8e:	e17d      	b.n	800728c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006f90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006f96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f98:	2101      	movs	r1, #1
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 fd30 	bl	8008a00 <ff_convert>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006fa4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <create_name+0x8a>
 8006faa:	2306      	movs	r3, #6
 8006fac:	e16e      	b.n	800728c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006fae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fb2:	d809      	bhi.n	8006fc8 <create_name+0xa4>
 8006fb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	488d      	ldr	r0, [pc, #564]	@ (80071f0 <create_name+0x2cc>)
 8006fba:	f7fd fd9c 	bl	8004af6 <chk_chr>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <create_name+0xa4>
 8006fc4:	2306      	movs	r3, #6
 8006fc6:	e161      	b.n	800728c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	617a      	str	r2, [r7, #20]
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006fd6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006fd8:	e7b4      	b.n	8006f44 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006fda:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	441a      	add	r2, r3
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006fe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fe8:	2b1f      	cmp	r3, #31
 8006fea:	d801      	bhi.n	8006ff0 <create_name+0xcc>
 8006fec:	2304      	movs	r3, #4
 8006fee:	e000      	b.n	8006ff2 <create_name+0xce>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006ff6:	e011      	b.n	800701c <create_name+0xf8>
		w = lfn[di - 1];
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006ffe:	3b01      	subs	r3, #1
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	4413      	add	r3, r2
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800700a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800700c:	2b20      	cmp	r3, #32
 800700e:	d002      	beq.n	8007016 <create_name+0xf2>
 8007010:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007012:	2b2e      	cmp	r3, #46	@ 0x2e
 8007014:	d106      	bne.n	8007024 <create_name+0x100>
		di--;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	3b01      	subs	r3, #1
 800701a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1ea      	bne.n	8006ff8 <create_name+0xd4>
 8007022:	e000      	b.n	8007026 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007024:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4413      	add	r3, r2
 800702e:	2200      	movs	r2, #0
 8007030:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <create_name+0x118>
 8007038:	2306      	movs	r3, #6
 800703a:	e127      	b.n	800728c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3340      	adds	r3, #64	@ 0x40
 8007040:	220b      	movs	r2, #11
 8007042:	2120      	movs	r1, #32
 8007044:	4618      	mov	r0, r3
 8007046:	f7fd fd14 	bl	8004a72 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800704a:	2300      	movs	r3, #0
 800704c:	61bb      	str	r3, [r7, #24]
 800704e:	e002      	b.n	8007056 <create_name+0x132>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	3301      	adds	r3, #1
 8007054:	61bb      	str	r3, [r7, #24]
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	4413      	add	r3, r2
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	2b20      	cmp	r3, #32
 8007062:	d0f5      	beq.n	8007050 <create_name+0x12c>
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4413      	add	r3, r2
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007070:	d0ee      	beq.n	8007050 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d009      	beq.n	800708c <create_name+0x168>
 8007078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800707c:	f043 0303 	orr.w	r3, r3, #3
 8007080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007084:	e002      	b.n	800708c <create_name+0x168>
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	3b01      	subs	r3, #1
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <create_name+0x182>
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007098:	3b01      	subs	r3, #1
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80070a4:	d1ef      	bne.n	8007086 <create_name+0x162>

	i = b = 0; ni = 8;
 80070a6:	2300      	movs	r3, #0
 80070a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80070ac:	2300      	movs	r3, #0
 80070ae:	623b      	str	r3, [r7, #32]
 80070b0:	2308      	movs	r3, #8
 80070b2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	61ba      	str	r2, [r7, #24]
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80070c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 8090 	beq.w	80071ec <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80070cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	d006      	beq.n	80070e0 <create_name+0x1bc>
 80070d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80070d6:	d10a      	bne.n	80070ee <create_name+0x1ca>
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d006      	beq.n	80070ee <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80070e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070e4:	f043 0303 	orr.w	r3, r3, #3
 80070e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80070ec:	e07d      	b.n	80071ea <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80070ee:	6a3a      	ldr	r2, [r7, #32]
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d203      	bcs.n	80070fe <create_name+0x1da>
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d123      	bne.n	8007146 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	2b0b      	cmp	r3, #11
 8007102:	d106      	bne.n	8007112 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007108:	f043 0303 	orr.w	r3, r3, #3
 800710c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007110:	e075      	b.n	80071fe <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	429a      	cmp	r2, r3
 8007118:	d005      	beq.n	8007126 <create_name+0x202>
 800711a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800711e:	f043 0303 	orr.w	r3, r3, #3
 8007122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	429a      	cmp	r2, r3
 800712c:	d866      	bhi.n	80071fc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	61bb      	str	r3, [r7, #24]
 8007132:	2308      	movs	r3, #8
 8007134:	623b      	str	r3, [r7, #32]
 8007136:	230b      	movs	r3, #11
 8007138:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800713a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007144:	e051      	b.n	80071ea <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007146:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007148:	2b7f      	cmp	r3, #127	@ 0x7f
 800714a:	d914      	bls.n	8007176 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800714c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800714e:	2100      	movs	r1, #0
 8007150:	4618      	mov	r0, r3
 8007152:	f001 fc55 	bl	8008a00 <ff_convert>
 8007156:	4603      	mov	r3, r0
 8007158:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800715a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <create_name+0x246>
 8007160:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007162:	3b80      	subs	r3, #128	@ 0x80
 8007164:	4a23      	ldr	r2, [pc, #140]	@ (80071f4 <create_name+0x2d0>)
 8007166:	5cd3      	ldrb	r3, [r2, r3]
 8007168:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800716a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800716e:	f043 0302 	orr.w	r3, r3, #2
 8007172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007176:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007178:	2b00      	cmp	r3, #0
 800717a:	d007      	beq.n	800718c <create_name+0x268>
 800717c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800717e:	4619      	mov	r1, r3
 8007180:	481d      	ldr	r0, [pc, #116]	@ (80071f8 <create_name+0x2d4>)
 8007182:	f7fd fcb8 	bl	8004af6 <chk_chr>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d008      	beq.n	800719e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800718c:	235f      	movs	r3, #95	@ 0x5f
 800718e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007194:	f043 0303 	orr.w	r3, r3, #3
 8007198:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800719c:	e01b      	b.n	80071d6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800719e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071a0:	2b40      	cmp	r3, #64	@ 0x40
 80071a2:	d909      	bls.n	80071b8 <create_name+0x294>
 80071a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071a6:	2b5a      	cmp	r3, #90	@ 0x5a
 80071a8:	d806      	bhi.n	80071b8 <create_name+0x294>
					b |= 2;
 80071aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071ae:	f043 0302 	orr.w	r3, r3, #2
 80071b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80071b6:	e00e      	b.n	80071d6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80071b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071ba:	2b60      	cmp	r3, #96	@ 0x60
 80071bc:	d90b      	bls.n	80071d6 <create_name+0x2b2>
 80071be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071c0:	2b7a      	cmp	r3, #122	@ 0x7a
 80071c2:	d808      	bhi.n	80071d6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80071c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071c8:	f043 0301 	orr.w	r3, r3, #1
 80071cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80071d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071d2:	3b20      	subs	r3, #32
 80071d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	623a      	str	r2, [r7, #32]
 80071dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80071de:	b2d1      	uxtb	r1, r2
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	4413      	add	r3, r2
 80071e4:	460a      	mov	r2, r1
 80071e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 80071ea:	e763      	b.n	80070b4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80071ec:	bf00      	nop
 80071ee:	e006      	b.n	80071fe <create_name+0x2da>
 80071f0:	08009a94 	.word	0x08009a94
 80071f4:	08009b14 	.word	0x08009b14
 80071f8:	08009aa0 	.word	0x08009aa0
			if (si > di) break;			/* No extension */
 80071fc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007204:	2be5      	cmp	r3, #229	@ 0xe5
 8007206:	d103      	bne.n	8007210 <create_name+0x2ec>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2205      	movs	r2, #5
 800720c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2b08      	cmp	r3, #8
 8007214:	d104      	bne.n	8007220 <create_name+0x2fc>
 8007216:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007220:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007224:	f003 030c 	and.w	r3, r3, #12
 8007228:	2b0c      	cmp	r3, #12
 800722a:	d005      	beq.n	8007238 <create_name+0x314>
 800722c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007230:	f003 0303 	and.w	r3, r3, #3
 8007234:	2b03      	cmp	r3, #3
 8007236:	d105      	bne.n	8007244 <create_name+0x320>
 8007238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800723c:	f043 0302 	orr.w	r3, r3, #2
 8007240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d117      	bne.n	8007280 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007250:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	2b01      	cmp	r3, #1
 800725a:	d105      	bne.n	8007268 <create_name+0x344>
 800725c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007260:	f043 0310 	orr.w	r3, r3, #16
 8007264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007268:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800726c:	f003 030c 	and.w	r3, r3, #12
 8007270:	2b04      	cmp	r3, #4
 8007272:	d105      	bne.n	8007280 <create_name+0x35c>
 8007274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007278:	f043 0308 	orr.w	r3, r3, #8
 800727c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007286:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800728a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800728c:	4618      	mov	r0, r3
 800728e:	3728      	adds	r7, #40	@ 0x28
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80072a8:	e002      	b.n	80072b0 <follow_path+0x1c>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	3301      	adds	r3, #1
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80072b6:	d0f8      	beq.n	80072aa <follow_path+0x16>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80072be:	d0f4      	beq.n	80072aa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	2200      	movs	r2, #0
 80072c4:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2200      	movs	r2, #0
 80072ca:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b1f      	cmp	r3, #31
 80072d2:	d80a      	bhi.n	80072ea <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2280      	movs	r2, #128	@ 0x80
 80072d8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 80072dc:	2100      	movs	r1, #0
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fe fc61 	bl	8005ba6 <dir_sdi>
 80072e4:	4603      	mov	r3, r0
 80072e6:	75fb      	strb	r3, [r7, #23]
 80072e8:	e07d      	b.n	80073e6 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80072ea:	463b      	mov	r3, r7
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff fe18 	bl	8006f24 <create_name>
 80072f4:	4603      	mov	r3, r0
 80072f6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d16e      	bne.n	80073dc <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff fb36 	bl	8006970 <dir_find>
 8007304:	4603      	mov	r3, r0
 8007306:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800730e:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	2b04      	cmp	r3, #4
 800731a:	d161      	bne.n	80073e0 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800731c:	7afb      	ldrb	r3, [r7, #11]
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	2b00      	cmp	r3, #0
 8007324:	d15c      	bne.n	80073e0 <follow_path+0x14c>
 8007326:	2305      	movs	r3, #5
 8007328:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800732a:	e059      	b.n	80073e0 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800732c:	7afb      	ldrb	r3, [r7, #11]
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d156      	bne.n	80073e4 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	799b      	ldrb	r3, [r3, #6]
 800733a:	f003 0310 	and.w	r3, r3, #16
 800733e:	2b00      	cmp	r3, #0
 8007340:	d102      	bne.n	8007348 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8007342:	2305      	movs	r3, #5
 8007344:	75fb      	strb	r3, [r7, #23]
 8007346:	e04e      	b.n	80073e6 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2b04      	cmp	r3, #4
 800734e:	d130      	bne.n	80073b2 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800735e:	4613      	mov	r3, r2
 8007360:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	79d2      	ldrb	r2, [r2, #7]
 8007368:	431a      	orrs	r2, r3
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	3334      	adds	r3, #52	@ 0x34
 800737c:	4618      	mov	r0, r3
 800737e:	f7fd f98a 	bl	8004696 <ld_dword>
 8007382:	4602      	mov	r2, r0
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	3321      	adds	r3, #33	@ 0x21
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	b2da      	uxtb	r2, r3
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	3338      	adds	r3, #56	@ 0x38
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fd f99b 	bl	80046dc <ld_qword>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	6939      	ldr	r1, [r7, #16]
 80073ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80073b0:	e79b      	b.n	80072ea <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	8992      	ldrh	r2, [r2, #12]
 80073c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80073c4:	fb00 f202 	mul.w	r2, r0, r2
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	440b      	add	r3, r1
 80073cc:	4619      	mov	r1, r3
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7fe fdbf 	bl	8005f52 <ld_clust>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80073da:	e786      	b.n	80072ea <follow_path+0x56>
			if (res != FR_OK) break;
 80073dc:	bf00      	nop
 80073de:	e002      	b.n	80073e6 <follow_path+0x152>
				break;
 80073e0:	bf00      	nop
 80073e2:	e000      	b.n	80073e6 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80073e4:	bf00      	nop
			}
		}
	}

	return res;
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80073f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073fc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d031      	beq.n	800746a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	e002      	b.n	8007414 <get_ldnumber+0x24>
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	3301      	adds	r3, #1
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b1f      	cmp	r3, #31
 800741a:	d903      	bls.n	8007424 <get_ldnumber+0x34>
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b3a      	cmp	r3, #58	@ 0x3a
 8007422:	d1f4      	bne.n	800740e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b3a      	cmp	r3, #58	@ 0x3a
 800742a:	d11c      	bne.n	8007466 <get_ldnumber+0x76>
			tp = *path;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	60fa      	str	r2, [r7, #12]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	3b30      	subs	r3, #48	@ 0x30
 800743c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b09      	cmp	r3, #9
 8007442:	d80e      	bhi.n	8007462 <get_ldnumber+0x72>
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	429a      	cmp	r2, r3
 800744a:	d10a      	bne.n	8007462 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d107      	bne.n	8007462 <get_ldnumber+0x72>
					vol = (int)i;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	3301      	adds	r3, #1
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	e002      	b.n	800746c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007466:	2300      	movs	r3, #0
 8007468:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800746a:	693b      	ldr	r3, [r7, #16]
}
 800746c:	4618      	mov	r0, r3
 800746e:	371c      	adds	r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	70da      	strb	r2, [r3, #3]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800748e:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7fd fcfa 	bl	8004e8c <move_window>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <check_fs+0x2a>
 800749e:	2304      	movs	r3, #4
 80074a0:	e044      	b.n	800752c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	333c      	adds	r3, #60	@ 0x3c
 80074a6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fd f8da 	bl	8004664 <ld_word>
 80074b0:	4603      	mov	r3, r0
 80074b2:	461a      	mov	r2, r3
 80074b4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d001      	beq.n	80074c0 <check_fs+0x48>
 80074bc:	2303      	movs	r3, #3
 80074be:	e035      	b.n	800752c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074c6:	2be9      	cmp	r3, #233	@ 0xe9
 80074c8:	d009      	beq.n	80074de <check_fs+0x66>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074d0:	2beb      	cmp	r3, #235	@ 0xeb
 80074d2:	d11e      	bne.n	8007512 <check_fs+0x9a>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074da:	2b90      	cmp	r3, #144	@ 0x90
 80074dc:	d119      	bne.n	8007512 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	333c      	adds	r3, #60	@ 0x3c
 80074e2:	3336      	adds	r3, #54	@ 0x36
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fd f8d6 	bl	8004696 <ld_dword>
 80074ea:	4603      	mov	r3, r0
 80074ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80074f0:	4a10      	ldr	r2, [pc, #64]	@ (8007534 <check_fs+0xbc>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d101      	bne.n	80074fa <check_fs+0x82>
 80074f6:	2300      	movs	r3, #0
 80074f8:	e018      	b.n	800752c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	333c      	adds	r3, #60	@ 0x3c
 80074fe:	3352      	adds	r3, #82	@ 0x52
 8007500:	4618      	mov	r0, r3
 8007502:	f7fd f8c8 	bl	8004696 <ld_dword>
 8007506:	4603      	mov	r3, r0
 8007508:	4a0b      	ldr	r2, [pc, #44]	@ (8007538 <check_fs+0xc0>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d101      	bne.n	8007512 <check_fs+0x9a>
 800750e:	2300      	movs	r3, #0
 8007510:	e00c      	b.n	800752c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	333c      	adds	r3, #60	@ 0x3c
 8007516:	220b      	movs	r2, #11
 8007518:	4908      	ldr	r1, [pc, #32]	@ (800753c <check_fs+0xc4>)
 800751a:	4618      	mov	r0, r3
 800751c:	f7fd fac4 	bl	8004aa8 <mem_cmp>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <check_fs+0xb2>
 8007526:	2301      	movs	r3, #1
 8007528:	e000      	b.n	800752c <check_fs+0xb4>
#endif
	return 2;
 800752a:	2302      	movs	r3, #2
}
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	00544146 	.word	0x00544146
 8007538:	33544146 	.word	0x33544146
 800753c:	08009aa8 	.word	0x08009aa8

08007540 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007544:	b09c      	sub	sp, #112	@ 0x70
 8007546:	af00      	add	r7, sp, #0
 8007548:	61f8      	str	r0, [r7, #28]
 800754a:	61b9      	str	r1, [r7, #24]
 800754c:	4613      	mov	r3, r2
 800754e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007556:	69f8      	ldr	r0, [r7, #28]
 8007558:	f7ff ff4a 	bl	80073f0 <get_ldnumber>
 800755c:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800755e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007560:	2b00      	cmp	r3, #0
 8007562:	da01      	bge.n	8007568 <find_volume+0x28>
 8007564:	230b      	movs	r3, #11
 8007566:	e376      	b.n	8007c56 <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007568:	4aa6      	ldr	r2, [pc, #664]	@ (8007804 <find_volume+0x2c4>)
 800756a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800756c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007570:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <find_volume+0x3c>
 8007578:	230c      	movs	r3, #12
 800757a:	e36c      	b.n	8007c56 <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007580:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800758a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d01a      	beq.n	80075c8 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8007592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	4618      	mov	r0, r3
 8007598:	f7fc ffc4 	bl	8004524 <disk_status>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80075a2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10c      	bne.n	80075c8 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80075ae:	7dfb      	ldrb	r3, [r7, #23]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d007      	beq.n	80075c4 <find_volume+0x84>
 80075b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80075c0:	230a      	movs	r3, #10
 80075c2:	e348      	b.n	8007c56 <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 80075c4:	2300      	movs	r3, #0
 80075c6:	e346      	b.n	8007c56 <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80075c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80075ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075d4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80075d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075d8:	785b      	ldrb	r3, [r3, #1]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fc ffbc 	bl	8004558 <disk_initialize>
 80075e0:	4603      	mov	r3, r0
 80075e2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80075e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80075f2:	2303      	movs	r3, #3
 80075f4:	e32f      	b.n	8007c56 <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d007      	beq.n	800760c <find_volume+0xcc>
 80075fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007600:	f003 0304 	and.w	r3, r3, #4
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8007608:	230a      	movs	r3, #10
 800760a:	e324      	b.n	8007c56 <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800760c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800760e:	7858      	ldrb	r0, [r3, #1]
 8007610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007612:	330c      	adds	r3, #12
 8007614:	461a      	mov	r2, r3
 8007616:	2102      	movs	r1, #2
 8007618:	f7fd f806 	bl	8004628 <disk_ioctl>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d001      	beq.n	8007626 <find_volume+0xe6>
 8007622:	2301      	movs	r3, #1
 8007624:	e317      	b.n	8007c56 <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007628:	899b      	ldrh	r3, [r3, #12]
 800762a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800762e:	d80d      	bhi.n	800764c <find_volume+0x10c>
 8007630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007632:	899b      	ldrh	r3, [r3, #12]
 8007634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007638:	d308      	bcc.n	800764c <find_volume+0x10c>
 800763a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800763c:	899b      	ldrh	r3, [r3, #12]
 800763e:	461a      	mov	r2, r3
 8007640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007642:	899b      	ldrh	r3, [r3, #12]
 8007644:	3b01      	subs	r3, #1
 8007646:	4013      	ands	r3, r2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <find_volume+0x110>
 800764c:	2301      	movs	r3, #1
 800764e:	e302      	b.n	8007c56 <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007654:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007656:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007658:	f7ff ff0e 	bl	8007478 <check_fs>
 800765c:	4603      	mov	r3, r0
 800765e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007662:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007666:	2b02      	cmp	r3, #2
 8007668:	d14d      	bne.n	8007706 <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800766a:	2300      	movs	r3, #0
 800766c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800766e:	e020      	b.n	80076b2 <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007672:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8007676:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800767e:	4413      	add	r3, r2
 8007680:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007684:	3304      	adds	r3, #4
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d006      	beq.n	800769a <find_volume+0x15a>
 800768c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800768e:	3308      	adds	r3, #8
 8007690:	4618      	mov	r0, r3
 8007692:	f7fd f800 	bl	8004696 <ld_dword>
 8007696:	4602      	mov	r2, r0
 8007698:	e000      	b.n	800769c <find_volume+0x15c>
 800769a:	2200      	movs	r2, #0
 800769c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	3360      	adds	r3, #96	@ 0x60
 80076a2:	f107 0110 	add.w	r1, r7, #16
 80076a6:	440b      	add	r3, r1
 80076a8:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80076ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076ae:	3301      	adds	r3, #1
 80076b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d9db      	bls.n	8007670 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80076b8:	2300      	movs	r3, #0
 80076ba:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 80076bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <find_volume+0x188>
 80076c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076c4:	3b01      	subs	r3, #1
 80076c6:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 80076c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	3360      	adds	r3, #96	@ 0x60
 80076ce:	f107 0210 	add.w	r2, r7, #16
 80076d2:	4413      	add	r3, r2
 80076d4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80076d8:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80076da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d005      	beq.n	80076ec <find_volume+0x1ac>
 80076e0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076e2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80076e4:	f7ff fec8 	bl	8007478 <check_fs>
 80076e8:	4603      	mov	r3, r0
 80076ea:	e000      	b.n	80076ee <find_volume+0x1ae>
 80076ec:	2303      	movs	r3, #3
 80076ee:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80076f2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d905      	bls.n	8007706 <find_volume+0x1c6>
 80076fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076fc:	3301      	adds	r3, #1
 80076fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007700:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007702:	2b03      	cmp	r3, #3
 8007704:	d9e0      	bls.n	80076c8 <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007706:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800770a:	2b04      	cmp	r3, #4
 800770c:	d101      	bne.n	8007712 <find_volume+0x1d2>
 800770e:	2301      	movs	r3, #1
 8007710:	e2a1      	b.n	8007c56 <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007712:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007716:	2b01      	cmp	r3, #1
 8007718:	d901      	bls.n	800771e <find_volume+0x1de>
 800771a:	230d      	movs	r3, #13
 800771c:	e29b      	b.n	8007c56 <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800771e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007722:	2b01      	cmp	r3, #1
 8007724:	f040 8101 	bne.w	800792a <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8007728:	230b      	movs	r3, #11
 800772a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800772c:	e002      	b.n	8007734 <find_volume+0x1f4>
 800772e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007730:	3301      	adds	r3, #1
 8007732:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007734:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007736:	2b3f      	cmp	r3, #63	@ 0x3f
 8007738:	d806      	bhi.n	8007748 <find_volume+0x208>
 800773a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800773c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800773e:	4413      	add	r3, r2
 8007740:	333c      	adds	r3, #60	@ 0x3c
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0f2      	beq.n	800772e <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8007748:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800774a:	2b3f      	cmp	r3, #63	@ 0x3f
 800774c:	d801      	bhi.n	8007752 <find_volume+0x212>
 800774e:	230d      	movs	r3, #13
 8007750:	e281      	b.n	8007c56 <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8007752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007754:	333c      	adds	r3, #60	@ 0x3c
 8007756:	3368      	adds	r3, #104	@ 0x68
 8007758:	4618      	mov	r0, r3
 800775a:	f7fc ff83 	bl	8004664 <ld_word>
 800775e:	4603      	mov	r3, r0
 8007760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007764:	d001      	beq.n	800776a <find_volume+0x22a>
 8007766:	230d      	movs	r3, #13
 8007768:	e275      	b.n	8007c56 <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800776a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800776c:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8007770:	461a      	mov	r2, r3
 8007772:	2301      	movs	r3, #1
 8007774:	4093      	lsls	r3, r2
 8007776:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007778:	8992      	ldrh	r2, [r2, #12]
 800777a:	4293      	cmp	r3, r2
 800777c:	d001      	beq.n	8007782 <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 800777e:	230d      	movs	r3, #13
 8007780:	e269      	b.n	8007c56 <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8007782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007784:	333c      	adds	r3, #60	@ 0x3c
 8007786:	3348      	adds	r3, #72	@ 0x48
 8007788:	4618      	mov	r0, r3
 800778a:	f7fc ffa7 	bl	80046dc <ld_qword>
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007794:	2000      	movs	r0, #0
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	68b9      	ldr	r1, [r7, #8]
 800779c:	1851      	adds	r1, r2, r1
 800779e:	6039      	str	r1, [r7, #0]
 80077a0:	68f9      	ldr	r1, [r7, #12]
 80077a2:	eb43 0101 	adc.w	r1, r3, r1
 80077a6:	6079      	str	r1, [r7, #4]
 80077a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80077b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d301      	bcc.n	80077bc <find_volume+0x27c>
 80077b8:	230d      	movs	r3, #13
 80077ba:	e24c      	b.n	8007c56 <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80077bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077be:	333c      	adds	r3, #60	@ 0x3c
 80077c0:	3354      	adds	r3, #84	@ 0x54
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fc ff67 	bl	8004696 <ld_dword>
 80077c8:	4602      	mov	r2, r0
 80077ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077cc:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80077ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077d0:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 80077d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80077d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077da:	789b      	ldrb	r3, [r3, #2]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d001      	beq.n	80077e4 <find_volume+0x2a4>
 80077e0:	230d      	movs	r3, #13
 80077e2:	e238      	b.n	8007c56 <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80077e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077e6:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80077ea:	461a      	mov	r2, r3
 80077ec:	2301      	movs	r3, #1
 80077ee:	4093      	lsls	r3, r2
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 80077f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077f8:	895b      	ldrh	r3, [r3, #10]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d104      	bne.n	8007808 <find_volume+0x2c8>
 80077fe:	230d      	movs	r3, #13
 8007800:	e229      	b.n	8007c56 <find_volume+0x716>
 8007802:	bf00      	nop
 8007804:	200021f8 	.word	0x200021f8

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8007808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800780a:	333c      	adds	r3, #60	@ 0x3c
 800780c:	335c      	adds	r3, #92	@ 0x5c
 800780e:	4618      	mov	r0, r3
 8007810:	f7fc ff41 	bl	8004696 <ld_dword>
 8007814:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8007816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007818:	4a99      	ldr	r2, [pc, #612]	@ (8007a80 <find_volume+0x540>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d901      	bls.n	8007822 <find_volume+0x2e2>
 800781e:	230d      	movs	r3, #13
 8007820:	e219      	b.n	8007c56 <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 8007822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007824:	1c9a      	adds	r2, r3, #2
 8007826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007828:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800782a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800782c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800782e:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8007830:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007832:	333c      	adds	r3, #60	@ 0x3c
 8007834:	3358      	adds	r3, #88	@ 0x58
 8007836:	4618      	mov	r0, r3
 8007838:	f7fc ff2d 	bl	8004696 <ld_dword>
 800783c:	4602      	mov	r2, r0
 800783e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007840:	441a      	add	r2, r3
 8007842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007844:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8007846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007848:	333c      	adds	r3, #60	@ 0x3c
 800784a:	3350      	adds	r3, #80	@ 0x50
 800784c:	4618      	mov	r0, r3
 800784e:	f7fc ff22 	bl	8004696 <ld_dword>
 8007852:	4602      	mov	r2, r0
 8007854:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007856:	441a      	add	r2, r3
 8007858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800785a:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800785c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800785e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007860:	2200      	movs	r2, #0
 8007862:	469a      	mov	sl, r3
 8007864:	4693      	mov	fp, r2
 8007866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007868:	895b      	ldrh	r3, [r3, #10]
 800786a:	461a      	mov	r2, r3
 800786c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800786e:	fb02 f303 	mul.w	r3, r2, r3
 8007872:	2200      	movs	r2, #0
 8007874:	4698      	mov	r8, r3
 8007876:	4691      	mov	r9, r2
 8007878:	eb1a 0408 	adds.w	r4, sl, r8
 800787c:	eb4b 0509 	adc.w	r5, fp, r9
 8007880:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007884:	42a2      	cmp	r2, r4
 8007886:	41ab      	sbcs	r3, r5
 8007888:	d201      	bcs.n	800788e <find_volume+0x34e>
 800788a:	230d      	movs	r3, #13
 800788c:	e1e3      	b.n	8007c56 <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800788e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007890:	333c      	adds	r3, #60	@ 0x3c
 8007892:	3360      	adds	r3, #96	@ 0x60
 8007894:	4618      	mov	r0, r3
 8007896:	f7fc fefe 	bl	8004696 <ld_dword>
 800789a:	4602      	mov	r2, r0
 800789c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800789e:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 80078a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078a4:	4619      	mov	r1, r3
 80078a6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80078a8:	f7fd fb8e 	bl	8004fc8 <clust2sect>
 80078ac:	4603      	mov	r3, r0
 80078ae:	4619      	mov	r1, r3
 80078b0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80078b2:	f7fd faeb 	bl	8004e8c <move_window>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <find_volume+0x380>
 80078bc:	2301      	movs	r3, #1
 80078be:	e1ca      	b.n	8007c56 <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80078c0:	2300      	movs	r3, #0
 80078c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078c4:	e015      	b.n	80078f2 <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80078c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80078c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078ca:	4413      	add	r3, r2
 80078cc:	333c      	adds	r3, #60	@ 0x3c
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b81      	cmp	r3, #129	@ 0x81
 80078d2:	d10b      	bne.n	80078ec <find_volume+0x3ac>
 80078d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078d6:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80078da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078dc:	3314      	adds	r3, #20
 80078de:	4413      	add	r3, r2
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fc fed8 	bl	8004696 <ld_dword>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d009      	beq.n	8007900 <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80078ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078ee:	3320      	adds	r3, #32
 80078f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078f4:	899b      	ldrh	r3, [r3, #12]
 80078f6:	461a      	mov	r2, r3
 80078f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d3e3      	bcc.n	80078c6 <find_volume+0x386>
 80078fe:	e000      	b.n	8007902 <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8007900:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8007902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007904:	899b      	ldrh	r3, [r3, #12]
 8007906:	461a      	mov	r2, r3
 8007908:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800790a:	4293      	cmp	r3, r2
 800790c:	d101      	bne.n	8007912 <find_volume+0x3d2>
 800790e:	230d      	movs	r3, #13
 8007910:	e1a1      	b.n	8007c56 <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007914:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007918:	61da      	str	r2, [r3, #28]
 800791a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800791c:	69da      	ldr	r2, [r3, #28]
 800791e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007920:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8007922:	2304      	movs	r3, #4
 8007924:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8007928:	e17d      	b.n	8007c26 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800792a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800792c:	333c      	adds	r3, #60	@ 0x3c
 800792e:	330b      	adds	r3, #11
 8007930:	4618      	mov	r0, r3
 8007932:	f7fc fe97 	bl	8004664 <ld_word>
 8007936:	4603      	mov	r3, r0
 8007938:	461a      	mov	r2, r3
 800793a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800793c:	899b      	ldrh	r3, [r3, #12]
 800793e:	429a      	cmp	r2, r3
 8007940:	d001      	beq.n	8007946 <find_volume+0x406>
 8007942:	230d      	movs	r3, #13
 8007944:	e187      	b.n	8007c56 <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007946:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007948:	333c      	adds	r3, #60	@ 0x3c
 800794a:	3316      	adds	r3, #22
 800794c:	4618      	mov	r0, r3
 800794e:	f7fc fe89 	bl	8004664 <ld_word>
 8007952:	4603      	mov	r3, r0
 8007954:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007956:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007958:	2b00      	cmp	r3, #0
 800795a:	d106      	bne.n	800796a <find_volume+0x42a>
 800795c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800795e:	333c      	adds	r3, #60	@ 0x3c
 8007960:	3324      	adds	r3, #36	@ 0x24
 8007962:	4618      	mov	r0, r3
 8007964:	f7fc fe97 	bl	8004696 <ld_dword>
 8007968:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800796a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800796c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800796e:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007970:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007972:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8007976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007978:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800797a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800797c:	789b      	ldrb	r3, [r3, #2]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d005      	beq.n	800798e <find_volume+0x44e>
 8007982:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007984:	789b      	ldrb	r3, [r3, #2]
 8007986:	2b02      	cmp	r3, #2
 8007988:	d001      	beq.n	800798e <find_volume+0x44e>
 800798a:	230d      	movs	r3, #13
 800798c:	e163      	b.n	8007c56 <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800798e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007990:	789b      	ldrb	r3, [r3, #2]
 8007992:	461a      	mov	r2, r3
 8007994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007996:	fb02 f303 	mul.w	r3, r2, r3
 800799a:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800799c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800799e:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80079a2:	461a      	mov	r2, r3
 80079a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079a6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80079a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079aa:	895b      	ldrh	r3, [r3, #10]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d008      	beq.n	80079c2 <find_volume+0x482>
 80079b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079b2:	895b      	ldrh	r3, [r3, #10]
 80079b4:	461a      	mov	r2, r3
 80079b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079b8:	895b      	ldrh	r3, [r3, #10]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	4013      	ands	r3, r2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <find_volume+0x486>
 80079c2:	230d      	movs	r3, #13
 80079c4:	e147      	b.n	8007c56 <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80079c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079c8:	333c      	adds	r3, #60	@ 0x3c
 80079ca:	3311      	adds	r3, #17
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fc fe49 	bl	8004664 <ld_word>
 80079d2:	4603      	mov	r3, r0
 80079d4:	461a      	mov	r2, r3
 80079d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079d8:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80079da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079dc:	891b      	ldrh	r3, [r3, #8]
 80079de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079e0:	8992      	ldrh	r2, [r2, #12]
 80079e2:	0952      	lsrs	r2, r2, #5
 80079e4:	b292      	uxth	r2, r2
 80079e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80079ea:	fb01 f202 	mul.w	r2, r1, r2
 80079ee:	1a9b      	subs	r3, r3, r2
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <find_volume+0x4ba>
 80079f6:	230d      	movs	r3, #13
 80079f8:	e12d      	b.n	8007c56 <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80079fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079fc:	333c      	adds	r3, #60	@ 0x3c
 80079fe:	3313      	adds	r3, #19
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fc fe2f 	bl	8004664 <ld_word>
 8007a06:	4603      	mov	r3, r0
 8007a08:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d106      	bne.n	8007a1e <find_volume+0x4de>
 8007a10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a12:	333c      	adds	r3, #60	@ 0x3c
 8007a14:	3320      	adds	r3, #32
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fc fe3d 	bl	8004696 <ld_dword>
 8007a1c:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a20:	333c      	adds	r3, #60	@ 0x3c
 8007a22:	330e      	adds	r3, #14
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fc fe1d 	bl	8004664 <ld_word>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007a30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <find_volume+0x4fc>
 8007a38:	230d      	movs	r3, #13
 8007a3a:	e10c      	b.n	8007c56 <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007a3c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007a40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a42:	4413      	add	r3, r2
 8007a44:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a46:	8911      	ldrh	r1, [r2, #8]
 8007a48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a4a:	8992      	ldrh	r2, [r2, #12]
 8007a4c:	0952      	lsrs	r2, r2, #5
 8007a4e:	b292      	uxth	r2, r2
 8007a50:	fbb1 f2f2 	udiv	r2, r1, r2
 8007a54:	b292      	uxth	r2, r2
 8007a56:	4413      	add	r3, r2
 8007a58:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007a5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d201      	bcs.n	8007a66 <find_volume+0x526>
 8007a62:	230d      	movs	r3, #13
 8007a64:	e0f7      	b.n	8007c56 <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007a66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a6e:	8952      	ldrh	r2, [r2, #10]
 8007a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d103      	bne.n	8007a84 <find_volume+0x544>
 8007a7c:	230d      	movs	r3, #13
 8007a7e:	e0ea      	b.n	8007c56 <find_volume+0x716>
 8007a80:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 8007a84:	2303      	movs	r3, #3
 8007a86:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a8c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d802      	bhi.n	8007a9a <find_volume+0x55a>
 8007a94:	2302      	movs	r3, #2
 8007a96:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a9c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d802      	bhi.n	8007aaa <find_volume+0x56a>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aac:	1c9a      	adds	r2, r3, #2
 8007aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ab0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8007ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ab4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007ab6:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007ab8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007abc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007abe:	441a      	add	r2, r3
 8007ac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8007ac4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ac8:	441a      	add	r2, r3
 8007aca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007acc:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8007ace:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d11e      	bne.n	8007b14 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ad8:	333c      	adds	r3, #60	@ 0x3c
 8007ada:	332a      	adds	r3, #42	@ 0x2a
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fc fdc1 	bl	8004664 <ld_word>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <find_volume+0x5ac>
 8007ae8:	230d      	movs	r3, #13
 8007aea:	e0b4      	b.n	8007c56 <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aee:	891b      	ldrh	r3, [r3, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <find_volume+0x5b8>
 8007af4:	230d      	movs	r3, #13
 8007af6:	e0ae      	b.n	8007c56 <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007afa:	333c      	adds	r3, #60	@ 0x3c
 8007afc:	332c      	adds	r3, #44	@ 0x2c
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fc fdc9 	bl	8004696 <ld_dword>
 8007b04:	4602      	mov	r2, r0
 8007b06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b08:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b12:	e01f      	b.n	8007b54 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007b14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b16:	891b      	ldrh	r3, [r3, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <find_volume+0x5e0>
 8007b1c:	230d      	movs	r3, #13
 8007b1e:	e09a      	b.n	8007c56 <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b26:	441a      	add	r2, r3
 8007b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b2a:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007b2c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d103      	bne.n	8007b3c <find_volume+0x5fc>
 8007b34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	e00a      	b.n	8007b52 <find_volume+0x612>
 8007b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b3e:	6a1a      	ldr	r2, [r3, #32]
 8007b40:	4613      	mov	r3, r2
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	4413      	add	r3, r2
 8007b46:	085a      	lsrs	r2, r3, #1
 8007b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b5a:	899b      	ldrh	r3, [r3, #12]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b60:	440b      	add	r3, r1
 8007b62:	3b01      	subs	r3, #1
 8007b64:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b66:	8989      	ldrh	r1, [r1, #12]
 8007b68:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d201      	bcs.n	8007b74 <find_volume+0x634>
 8007b70:	230d      	movs	r3, #13
 8007b72:	e070      	b.n	8007c56 <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007b74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b7a:	61da      	str	r2, [r3, #28]
 8007b7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b7e:	69da      	ldr	r2, [r3, #28]
 8007b80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b82:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8007b84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b86:	2280      	movs	r2, #128	@ 0x80
 8007b88:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007b8a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d149      	bne.n	8007c26 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b94:	333c      	adds	r3, #60	@ 0x3c
 8007b96:	3330      	adds	r3, #48	@ 0x30
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fc fd63 	bl	8004664 <ld_word>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d140      	bne.n	8007c26 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007ba4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007bac:	f7fd f96e 	bl	8004e8c <move_window>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d137      	bne.n	8007c26 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 8007bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bb8:	2200      	movs	r2, #0
 8007bba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bbe:	333c      	adds	r3, #60	@ 0x3c
 8007bc0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fc fd4d 	bl	8004664 <ld_word>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d127      	bne.n	8007c26 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bd8:	333c      	adds	r3, #60	@ 0x3c
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fc fd5b 	bl	8004696 <ld_dword>
 8007be0:	4603      	mov	r3, r0
 8007be2:	4a1f      	ldr	r2, [pc, #124]	@ (8007c60 <find_volume+0x720>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d11e      	bne.n	8007c26 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bea:	333c      	adds	r3, #60	@ 0x3c
 8007bec:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fc fd50 	bl	8004696 <ld_dword>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8007c64 <find_volume+0x724>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d113      	bne.n	8007c26 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c00:	333c      	adds	r3, #60	@ 0x3c
 8007c02:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fc fd45 	bl	8004696 <ld_dword>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c10:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007c12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c14:	333c      	adds	r3, #60	@ 0x3c
 8007c16:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fc fd3b 	bl	8004696 <ld_dword>
 8007c20:	4602      	mov	r2, r0
 8007c22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c24:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007c26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c28:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8007c2c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c68 <find_volume+0x728>)
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	3301      	adds	r3, #1
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	4b0c      	ldr	r3, [pc, #48]	@ (8007c68 <find_volume+0x728>)
 8007c38:	801a      	strh	r2, [r3, #0]
 8007c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c68 <find_volume+0x728>)
 8007c3c:	881a      	ldrh	r2, [r3, #0]
 8007c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c40:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c44:	4a09      	ldr	r2, [pc, #36]	@ (8007c6c <find_volume+0x72c>)
 8007c46:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8007c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c4a:	4a09      	ldr	r2, [pc, #36]	@ (8007c70 <find_volume+0x730>)
 8007c4c:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007c4e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007c50:	f7fd f8b4 	bl	8004dbc <clear_lock>
#endif
	return FR_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3770      	adds	r7, #112	@ 0x70
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c60:	41615252 	.word	0x41615252
 8007c64:	61417272 	.word	0x61417272
 8007c68:	200021fc 	.word	0x200021fc
 8007c6c:	20002480 	.word	0x20002480
 8007c70:	20002220 	.word	0x20002220

08007c74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007c7e:	2309      	movs	r3, #9
 8007c80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d01c      	beq.n	8007cc2 <validate+0x4e>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d018      	beq.n	8007cc2 <validate+0x4e>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d013      	beq.n	8007cc2 <validate+0x4e>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	889a      	ldrh	r2, [r3, #4]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	88db      	ldrh	r3, [r3, #6]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d10c      	bne.n	8007cc2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fc fc38 	bl	8004524 <disk_status>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <validate+0x4e>
			res = FR_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d102      	bne.n	8007cce <validate+0x5a>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	e000      	b.n	8007cd0 <validate+0x5c>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	6013      	str	r3, [r2, #0]
	return res;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	4613      	mov	r3, r2
 8007cec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007cf2:	f107 0310 	add.w	r3, r7, #16
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff fb7a 	bl	80073f0 <get_ldnumber>
 8007cfc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	da01      	bge.n	8007d08 <f_mount+0x28>
 8007d04:	230b      	movs	r3, #11
 8007d06:	e02b      	b.n	8007d60 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007d08:	4a17      	ldr	r2, [pc, #92]	@ (8007d68 <f_mount+0x88>)
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007d18:	69b8      	ldr	r0, [r7, #24]
 8007d1a:	f7fd f84f 	bl	8004dbc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	490d      	ldr	r1, [pc, #52]	@ (8007d68 <f_mount+0x88>)
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d002      	beq.n	8007d46 <f_mount+0x66>
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d001      	beq.n	8007d4a <f_mount+0x6a>
 8007d46:	2300      	movs	r3, #0
 8007d48:	e00a      	b.n	8007d60 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007d4a:	f107 010c 	add.w	r1, r7, #12
 8007d4e:	f107 0308 	add.w	r3, r7, #8
 8007d52:	2200      	movs	r2, #0
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7ff fbf3 	bl	8007540 <find_volume>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3720      	adds	r7, #32
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	200021f8 	.word	0x200021f8

08007d6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d70:	b0aa      	sub	sp, #168	@ 0xa8
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6278      	str	r0, [r7, #36]	@ 0x24
 8007d76:	6239      	str	r1, [r7, #32]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <f_open+0x1a>
 8007d82:	2309      	movs	r3, #9
 8007d84:	e2bc      	b.n	8008300 <f_open+0x594>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007d86:	7ffb      	ldrb	r3, [r7, #31]
 8007d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d8c:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 8007d8e:	7ffb      	ldrb	r3, [r7, #31]
 8007d90:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8007d94:	f107 0020 	add.w	r0, r7, #32
 8007d98:	461a      	mov	r2, r3
 8007d9a:	f7ff fbd1 	bl	8007540 <find_volume>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	if (res == FR_OK) {
 8007da4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f040 82a0 	bne.w	80082ee <f_open+0x582>
		dj.obj.fs = fs;
 8007dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db0:	633b      	str	r3, [r7, #48]	@ 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007db8:	4619      	mov	r1, r3
 8007dba:	4610      	mov	r0, r2
 8007dbc:	f7ff fa6a 	bl	8007294 <follow_path>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007dc6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d118      	bne.n	8007e00 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007dce:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8007dd2:	b25b      	sxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	da03      	bge.n	8007de0 <f_open+0x74>
				res = FR_INVALID_NAME;
 8007dd8:	2306      	movs	r3, #6
 8007dda:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8007dde:	e00f      	b.n	8007e00 <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007de0:	7ffb      	ldrb	r3, [r7, #31]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	bf8c      	ite	hi
 8007de6:	2301      	movhi	r3, #1
 8007de8:	2300      	movls	r3, #0
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	461a      	mov	r2, r3
 8007dee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007df2:	4611      	mov	r1, r2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fc fe99 	bl	8004b2c <chk_lock>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007e00:	7ffb      	ldrb	r3, [r7, #31]
 8007e02:	f003 031c 	and.w	r3, r3, #28
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 8117 	beq.w	800803a <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 8007e0c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d017      	beq.n	8007e44 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007e14:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d10e      	bne.n	8007e3a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007e1c:	f7fc fee2 	bl	8004be4 <enq_lock>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d006      	beq.n	8007e34 <f_open+0xc8>
 8007e26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe feca 	bl	8006bc4 <dir_register>
 8007e30:	4603      	mov	r3, r0
 8007e32:	e000      	b.n	8007e36 <f_open+0xca>
 8007e34:	2312      	movs	r3, #18
 8007e36:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007e3a:	7ffb      	ldrb	r3, [r7, #31]
 8007e3c:	f043 0308 	orr.w	r3, r3, #8
 8007e40:	77fb      	strb	r3, [r7, #31]
 8007e42:	e011      	b.n	8007e68 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007e44:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007e48:	f003 0311 	and.w	r3, r3, #17
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <f_open+0xec>
					res = FR_DENIED;
 8007e50:	2307      	movs	r3, #7
 8007e52:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8007e56:	e007      	b.n	8007e68 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007e58:	7ffb      	ldrb	r3, [r7, #31]
 8007e5a:	f003 0304 	and.w	r3, r3, #4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <f_open+0xfc>
 8007e62:	2308      	movs	r3, #8
 8007e64:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007e68:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f040 8100 	bne.w	8008072 <f_open+0x306>
 8007e72:	7ffb      	ldrb	r3, [r7, #31]
 8007e74:	f003 0308 	and.w	r3, r3, #8
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 80fa 	beq.w	8008072 <f_open+0x306>
				dw = GET_FATTIME();
 8007e7e:	f7fc f9f3 	bl	8004268 <get_fattime>
 8007e82:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8007e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	2b04      	cmp	r3, #4
 8007e8c:	f040 8085 	bne.w	8007f9a <f_open+0x22e>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8007e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e94:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8007e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	3334      	adds	r3, #52	@ 0x34
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fc fbfa 	bl	8004696 <ld_dword>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea6:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8007ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	3338      	adds	r3, #56	@ 0x38
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fc fc14 	bl	80046dc <ld_qword>
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb6:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8007eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	3321      	adds	r3, #33	@ 0x21
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eca:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ece:	2200      	movs	r2, #0
 8007ed0:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8007ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fc fcf3 	bl	80048c8 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8007ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	f103 0214 	add.w	r2, r3, #20
 8007eea:	2300      	movs	r3, #0
 8007eec:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8007eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	330c      	adds	r3, #12
 8007ef4:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fc fce5 	bl	80048c8 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8007efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	f103 0215 	add.w	r2, r3, #21
 8007f06:	2300      	movs	r3, #0
 8007f08:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8007f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	1d1a      	adds	r2, r3, #4
 8007f10:	2320      	movs	r3, #32
 8007f12:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8007f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	3334      	adds	r3, #52	@ 0x34
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fc fcd3 	bl	80048c8 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8007f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007f2a:	f04f 0200 	mov.w	r2, #0
 8007f2e:	f04f 0300 	mov.w	r3, #0
 8007f32:	4608      	mov	r0, r1
 8007f34:	f7fc fcf4 	bl	8004920 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8007f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007f40:	f04f 0200 	mov.w	r2, #0
 8007f44:	f04f 0300 	mov.w	r3, #0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	f7fc fce9 	bl	8004920 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8007f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8007f56:	2301      	movs	r3, #1
 8007f58:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 8007f5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe fb76 	bl	8006650 <store_xdir>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8007f6a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d17f      	bne.n	8008072 <f_open+0x306>
 8007f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d07b      	beq.n	8008072 <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8007f7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	2200      	movs	r2, #0
 8007f82:	4619      	mov	r1, r3
 8007f84:	f7fd fc0e 	bl	80057a4 <remove_chain>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f94:	3b01      	subs	r3, #1
 8007f96:	6193      	str	r3, [r2, #24]
 8007f98:	e06b      	b.n	8008072 <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f9c:	330e      	adds	r3, #14
 8007f9e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fc fc90 	bl	80048c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007fa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007faa:	3316      	adds	r3, #22
 8007fac:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fc fc89 	bl	80048c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007fb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fb8:	f103 020b 	add.w	r2, r3, #11
 8007fbc:	2320      	movs	r3, #32
 8007fbe:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007fc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	f7fd ffc3 	bl	8005f52 <ld_clust>
 8007fcc:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007fd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	f7fd ffda 	bl	8005f90 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007fdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fde:	331c      	adds	r3, #28
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fc fc70 	bl	80048c8 <st_dword>
					fs->wflag = 1;
 8007fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fea:	2301      	movs	r3, #1
 8007fec:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007fee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d03d      	beq.n	8008072 <f_open+0x306>
						dw = fs->winsect;
 8007ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ffa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
						res = remove_chain(&dj.obj, cl, 0);
 8007ffe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008002:	2200      	movs	r2, #0
 8008004:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008008:	4618      	mov	r0, r3
 800800a:	f7fd fbcb 	bl	80057a4 <remove_chain>
 800800e:	4603      	mov	r3, r0
 8008010:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						if (res == FR_OK) {
 8008014:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008018:	2b00      	cmp	r3, #0
 800801a:	d12a      	bne.n	8008072 <f_open+0x306>
							res = move_window(fs, dw);
 800801c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800801e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8008022:	4618      	mov	r0, r3
 8008024:	f7fc ff32 	bl	8004e8c <move_window>
 8008028:	4603      	mov	r3, r0
 800802a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800802e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008030:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008034:	3b01      	subs	r3, #1
 8008036:	6193      	str	r3, [r2, #24]
 8008038:	e01b      	b.n	8008072 <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800803a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800803e:	2b00      	cmp	r3, #0
 8008040:	d117      	bne.n	8008072 <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008042:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008046:	f003 0310 	and.w	r3, r3, #16
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <f_open+0x2ea>
					res = FR_NO_FILE;
 800804e:	2304      	movs	r3, #4
 8008050:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8008054:	e00d      	b.n	8008072 <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008056:	7ffb      	ldrb	r3, [r7, #31]
 8008058:	f003 0302 	and.w	r3, r3, #2
 800805c:	2b00      	cmp	r3, #0
 800805e:	d008      	beq.n	8008072 <f_open+0x306>
 8008060:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <f_open+0x306>
						res = FR_DENIED;
 800806c:	2307      	movs	r3, #7
 800806e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					}
				}
			}
		}
		if (res == FR_OK) {
 8008072:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008076:	2b00      	cmp	r3, #0
 8008078:	d126      	bne.n	80080c8 <f_open+0x35c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800807a:	7ffb      	ldrb	r3, [r7, #31]
 800807c:	f003 0308 	and.w	r3, r3, #8
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <f_open+0x320>
				mode |= FA_MODIFIED;
 8008084:	7ffb      	ldrb	r3, [r7, #31]
 8008086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800808a:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800808c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800808e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008092:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 8008094:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008098:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800809a:	7ffb      	ldrb	r3, [r7, #31]
 800809c:	2b01      	cmp	r3, #1
 800809e:	bf8c      	ite	hi
 80080a0:	2301      	movhi	r3, #1
 80080a2:	2300      	movls	r3, #0
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	461a      	mov	r2, r3
 80080a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80080ac:	4611      	mov	r1, r2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fc fdba 	bl	8004c28 <inc_lock>
 80080b4:	4602      	mov	r2, r0
 80080b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b8:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80080ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d102      	bne.n	80080c8 <f_open+0x35c>
 80080c2:	2302      	movs	r3, #2
 80080c4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
		}
#endif

		if (res == FR_OK) {
 80080c8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f040 810e 	bne.w	80082ee <f_open+0x582>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80080d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d12d      	bne.n	8008136 <f_open+0x3ca>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80080da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080de:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80080e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080e4:	4613      	mov	r3, r2
 80080e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80080ea:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80080ee:	431a      	orrs	r2, r3
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80080f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80080f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f8:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80080fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	3334      	adds	r3, #52	@ 0x34
 8008100:	4618      	mov	r0, r3
 8008102:	f7fc fac8 	bl	8004696 <ld_dword>
 8008106:	4602      	mov	r2, r0
 8008108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800810c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	3338      	adds	r3, #56	@ 0x38
 8008112:	4618      	mov	r0, r3
 8008114:	f7fc fae2 	bl	80046dc <ld_qword>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800811e:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8008122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	3321      	adds	r3, #33	@ 0x21
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	b2da      	uxtb	r2, r3
 8008130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008132:	71da      	strb	r2, [r3, #7]
 8008134:	e016      	b.n	8008164 <f_open+0x3f8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800813a:	4619      	mov	r1, r3
 800813c:	4610      	mov	r0, r2
 800813e:	f7fd ff08 	bl	8005f52 <ld_clust>
 8008142:	4602      	mov	r2, r0
 8008144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008146:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800814a:	331c      	adds	r3, #28
 800814c:	4618      	mov	r0, r3
 800814e:	f7fc faa2 	bl	8004696 <ld_dword>
 8008152:	4603      	mov	r3, r0
 8008154:	2200      	movs	r2, #0
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	617a      	str	r2, [r7, #20]
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008160:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008166:	2200      	movs	r2, #0
 8008168:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800816a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800816c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008172:	88da      	ldrh	r2, [r3, #6]
 8008174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008176:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817a:	7ffa      	ldrb	r2, [r7, #31]
 800817c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 8008180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008182:	2200      	movs	r2, #0
 8008184:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8008188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818a:	2200      	movs	r2, #0
 800818c:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800818e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008190:	f04f 0200 	mov.w	r2, #0
 8008194:	f04f 0300 	mov.w	r3, #0
 8008198:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800819c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819e:	3354      	adds	r3, #84	@ 0x54
 80081a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80081a4:	2100      	movs	r1, #0
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fc fc63 	bl	8004a72 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80081ac:	7ffb      	ldrb	r3, [r7, #31]
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 809b 	beq.w	80082ee <f_open+0x582>
 80081b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	f000 8095 	beq.w	80082ee <f_open+0x582>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80081c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80081ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80081cc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80081d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d2:	895b      	ldrh	r3, [r3, #10]
 80081d4:	461a      	mov	r2, r3
 80081d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d8:	899b      	ldrh	r3, [r3, #12]
 80081da:	fb02 f303 	mul.w	r3, r2, r3
 80081de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80081e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80081ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80081f0:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 80081f4:	e023      	b.n	800823e <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fc ff03 	bl	8005008 <get_fat>
 8008202:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
					if (clst <= 1) res = FR_INT_ERR;
 8008206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800820a:	2b01      	cmp	r3, #1
 800820c:	d802      	bhi.n	8008214 <f_open+0x4a8>
 800820e:	2302      	movs	r3, #2
 8008210:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008214:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008218:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800821c:	d102      	bne.n	8008224 <f_open+0x4b8>
 800821e:	2301      	movs	r3, #1
 8008220:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008224:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008228:	2200      	movs	r2, #0
 800822a:	4698      	mov	r8, r3
 800822c:	4691      	mov	r9, r2
 800822e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8008232:	ebb2 0a08 	subs.w	sl, r2, r8
 8008236:	eb63 0b09 	sbc.w	fp, r3, r9
 800823a:	e9c7 ab26 	strd	sl, fp, [r7, #152]	@ 0x98
 800823e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10a      	bne.n	800825c <f_open+0x4f0>
 8008246:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800824a:	2200      	movs	r2, #0
 800824c:	461c      	mov	r4, r3
 800824e:	4615      	mov	r5, r2
 8008250:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8008254:	4294      	cmp	r4, r2
 8008256:	eb75 0303 	sbcs.w	r3, r5, r3
 800825a:	d3cc      	bcc.n	80081f6 <f_open+0x48a>
				}
				fp->clust = clst;
 800825c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8008262:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008264:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008268:	2b00      	cmp	r3, #0
 800826a:	d140      	bne.n	80082ee <f_open+0x582>
 800826c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826e:	899b      	ldrh	r3, [r3, #12]
 8008270:	b29b      	uxth	r3, r3
 8008272:	2200      	movs	r2, #0
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	60fa      	str	r2, [r7, #12]
 8008278:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800827c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008280:	f7f7 fff6 	bl	8000270 <__aeabi_uldivmod>
 8008284:	4313      	orrs	r3, r2
 8008286:	d032      	beq.n	80082ee <f_open+0x582>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800828e:	4618      	mov	r0, r3
 8008290:	f7fc fe9a 	bl	8004fc8 <clust2sect>
 8008294:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 8008298:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800829c:	2b00      	cmp	r3, #0
 800829e:	d103      	bne.n	80082a8 <f_open+0x53c>
						res = FR_INT_ERR;
 80082a0:	2302      	movs	r3, #2
 80082a2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 80082a6:	e022      	b.n	80082ee <f_open+0x582>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80082a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082aa:	899b      	ldrh	r3, [r3, #12]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	2200      	movs	r2, #0
 80082b0:	603b      	str	r3, [r7, #0]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80082bc:	f7f7 ffd8 	bl	8000270 <__aeabi_uldivmod>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082c8:	441a      	add	r2, r3
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80082ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d0:	7858      	ldrb	r0, [r3, #1]
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80082d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082dc:	2301      	movs	r3, #1
 80082de:	f7fc f963 	bl	80045a8 <disk_read>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <f_open+0x582>
 80082e8:	2301      	movs	r3, #1
 80082ea:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80082ee:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <f_open+0x590>
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80082fc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 8008300:	4618      	mov	r0, r3
 8008302:	37a8      	adds	r7, #168	@ 0xa8
 8008304:	46bd      	mov	sp, r7
 8008306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800830a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800830a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830e:	b091      	sub	sp, #68	@ 0x44
 8008310:	af00      	add	r7, sp, #0
 8008312:	61f8      	str	r0, [r7, #28]
 8008314:	61b9      	str	r1, [r7, #24]
 8008316:	617a      	str	r2, [r7, #20]
 8008318:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	62fb      	str	r3, [r7, #44]	@ 0x2c


	*bw = 0;	/* Clear write byte counter */
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	2200      	movs	r2, #0
 8008322:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	f107 0220 	add.w	r2, r7, #32
 800832a:	4611      	mov	r1, r2
 800832c:	4618      	mov	r0, r3
 800832e:	f7ff fca1 	bl	8007c74 <validate>
 8008332:	4603      	mov	r3, r0
 8008334:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008338:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800833c:	2b00      	cmp	r3, #0
 800833e:	d108      	bne.n	8008352 <f_write+0x48>
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008346:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800834a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <f_write+0x4e>
 8008352:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008356:	e1aa      	b.n	80086ae <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <f_write+0x60>
 8008366:	2307      	movs	r3, #7
 8008368:	e1a1      	b.n	80086ae <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b04      	cmp	r3, #4
 8008370:	f000 818d 	beq.w	800868e <f_write+0x384>
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	18d1      	adds	r1, r2, r3
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008384:	4613      	mov	r3, r2
 8008386:	4299      	cmp	r1, r3
 8008388:	f080 8181 	bcs.w	800868e <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008392:	4613      	mov	r3, r2
 8008394:	43db      	mvns	r3, r3
 8008396:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008398:	e179      	b.n	800868e <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	899b      	ldrh	r3, [r3, #12]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	2200      	movs	r2, #0
 80083a8:	461d      	mov	r5, r3
 80083aa:	4616      	mov	r6, r2
 80083ac:	462a      	mov	r2, r5
 80083ae:	4633      	mov	r3, r6
 80083b0:	f7f7 ff5e 	bl	8000270 <__aeabi_uldivmod>
 80083b4:	4313      	orrs	r3, r2
 80083b6:	f040 810a 	bne.w	80085ce <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	899b      	ldrh	r3, [r3, #12]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	2200      	movs	r2, #0
 80083c8:	60bb      	str	r3, [r7, #8]
 80083ca:	60fa      	str	r2, [r7, #12]
 80083cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083d0:	f7f7 ff4e 	bl	8000270 <__aeabi_uldivmod>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	6a3b      	ldr	r3, [r7, #32]
 80083da:	895b      	ldrh	r3, [r3, #10]
 80083dc:	3b01      	subs	r3, #1
 80083de:	4013      	ands	r3, r2
 80083e0:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 80083e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d146      	bne.n	8008476 <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80083ee:	4313      	orrs	r3, r2
 80083f0:	d10c      	bne.n	800840c <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 80083f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d11a      	bne.n	8008434 <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	2100      	movs	r1, #0
 8008402:	4618      	mov	r0, r3
 8008404:	f7fd fa82 	bl	800590c <create_chain>
 8008408:	63b8      	str	r0, [r7, #56]	@ 0x38
 800840a:	e013      	b.n	8008434 <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008410:	2b00      	cmp	r3, #0
 8008412:	d007      	beq.n	8008424 <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800841a:	69f8      	ldr	r0, [r7, #28]
 800841c:	f7fd fb77 	bl	8005b0e <clmt_clust>
 8008420:	63b8      	str	r0, [r7, #56]	@ 0x38
 8008422:	e007      	b.n	8008434 <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008424:	69fa      	ldr	r2, [r7, #28]
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800842a:	4619      	mov	r1, r3
 800842c:	4610      	mov	r0, r2
 800842e:	f7fd fa6d 	bl	800590c <create_chain>
 8008432:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008436:	2b00      	cmp	r3, #0
 8008438:	f000 812e 	beq.w	8008698 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800843c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843e:	2b01      	cmp	r3, #1
 8008440:	d105      	bne.n	800844e <f_write+0x144>
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	2202      	movs	r2, #2
 8008446:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800844a:	2302      	movs	r3, #2
 800844c:	e12f      	b.n	80086ae <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800844e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008450:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008454:	d105      	bne.n	8008462 <f_write+0x158>
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800845e:	2301      	movs	r3, #1
 8008460:	e125      	b.n	80086ae <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008466:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d102      	bne.n	8008476 <f_write+0x16c>
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008474:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800847c:	b25b      	sxtb	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	da1b      	bge.n	80084ba <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	7858      	ldrb	r0, [r3, #1]
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008490:	2301      	movs	r3, #1
 8008492:	f7fc f8a9 	bl	80045e8 <disk_write>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d005      	beq.n	80084a8 <f_write+0x19e>
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80084a4:	2301      	movs	r3, #1
 80084a6:	e102      	b.n	80086ae <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80084ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80084ba:	6a3a      	ldr	r2, [r7, #32]
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c0:	4619      	mov	r1, r3
 80084c2:	4610      	mov	r0, r2
 80084c4:	f7fc fd80 	bl	8004fc8 <clust2sect>
 80084c8:	6278      	str	r0, [r7, #36]	@ 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d105      	bne.n	80084dc <f_write+0x1d2>
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80084d8:	2302      	movs	r3, #2
 80084da:	e0e8      	b.n	80086ae <f_write+0x3a4>
			sect += csect;
 80084dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e0:	4413      	add	r3, r2
 80084e2:	627b      	str	r3, [r7, #36]	@ 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	899b      	ldrh	r3, [r3, #12]
 80084e8:	461a      	mov	r2, r3
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80084f0:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 80084f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d046      	beq.n	8008586 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80084f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fc:	4413      	add	r3, r2
 80084fe:	6a3a      	ldr	r2, [r7, #32]
 8008500:	8952      	ldrh	r2, [r2, #10]
 8008502:	4293      	cmp	r3, r2
 8008504:	d905      	bls.n	8008512 <f_write+0x208>
					cc = fs->csize - csect;
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	895b      	ldrh	r3, [r3, #10]
 800850a:	461a      	mov	r2, r3
 800850c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	7858      	ldrb	r0, [r3, #1]
 8008516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800851a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800851c:	f7fc f864 	bl	80045e8 <disk_write>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d005      	beq.n	8008532 <f_write+0x228>
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800852e:	2301      	movs	r3, #1
 8008530:	e0bd      	b.n	80086ae <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800853c:	429a      	cmp	r2, r3
 800853e:	d91a      	bls.n	8008576 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800854a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	6a3a      	ldr	r2, [r7, #32]
 8008550:	8992      	ldrh	r2, [r2, #12]
 8008552:	fb02 f303 	mul.w	r3, r2, r3
 8008556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008558:	18d1      	adds	r1, r2, r3
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	899b      	ldrh	r3, [r3, #12]
 800855e:	461a      	mov	r2, r3
 8008560:	f7fc fa66 	bl	8004a30 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800856a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800856e:	b2da      	uxtb	r2, r3
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	899b      	ldrh	r3, [r3, #12]
 800857a:	461a      	mov	r2, r3
 800857c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857e:	fb02 f303 	mul.w	r3, r2, r3
 8008582:	637b      	str	r3, [r7, #52]	@ 0x34
				continue;
 8008584:	e058      	b.n	8008638 <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800858a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800858c:	429a      	cmp	r2, r3
 800858e:	d01b      	beq.n	80085c8 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800859c:	4290      	cmp	r0, r2
 800859e:	eb71 0303 	sbcs.w	r3, r1, r3
 80085a2:	d211      	bcs.n	80085c8 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	7858      	ldrb	r0, [r3, #1]
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80085ae:	2301      	movs	r3, #1
 80085b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085b2:	f7fb fff9 	bl	80045a8 <disk_read>
 80085b6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d005      	beq.n	80085c8 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80085c4:	2301      	movs	r3, #1
 80085c6:	e072      	b.n	80086ae <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085cc:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	899b      	ldrh	r3, [r3, #12]
 80085d2:	4618      	mov	r0, r3
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	899b      	ldrh	r3, [r3, #12]
 80085de:	fbb2 f1f3 	udiv	r1, r2, r3
 80085e2:	fb01 f303 	mul.w	r3, r1, r3
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	1ac3      	subs	r3, r0, r3
 80085ea:	637b      	str	r3, [r7, #52]	@ 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80085ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d901      	bls.n	80085f8 <f_write+0x2ee>
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	637b      	str	r3, [r7, #52]	@ 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	899b      	ldrh	r3, [r3, #12]
 8008608:	b29b      	uxth	r3, r3
 800860a:	2200      	movs	r2, #0
 800860c:	603b      	str	r3, [r7, #0]
 800860e:	607a      	str	r2, [r7, #4]
 8008610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008614:	f7f7 fe2c 	bl	8000270 <__aeabi_uldivmod>
 8008618:	4613      	mov	r3, r2
 800861a:	4423      	add	r3, r4
 800861c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800861e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008620:	4618      	mov	r0, r3
 8008622:	f7fc fa05 	bl	8004a30 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800862c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008630:	b2da      	uxtb	r2, r3
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800863a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800863c:	4413      	add	r3, r2
 800863e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008646:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008648:	2000      	movs	r0, #0
 800864a:	4688      	mov	r8, r1
 800864c:	4681      	mov	r9, r0
 800864e:	eb12 0a08 	adds.w	sl, r2, r8
 8008652:	eb43 0b09 	adc.w	fp, r3, r9
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008668:	4290      	cmp	r0, r2
 800866a:	eb71 0403 	sbcs.w	r4, r1, r3
 800866e:	d201      	bcs.n	8008674 <f_write+0x36a>
 8008670:	4610      	mov	r0, r2
 8008672:	4619      	mov	r1, r3
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008680:	441a      	add	r2, r3
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	2b00      	cmp	r3, #0
 8008692:	f47f ae82 	bne.w	800839a <f_write+0x90>
 8008696:	e000      	b.n	800869a <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008698:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80086a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3744      	adds	r7, #68	@ 0x44
 80086b2:	46bd      	mov	sp, r7
 80086b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080086b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b09c      	sub	sp, #112	@ 0x70
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80086c6:	4611      	mov	r1, r2
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff fad3 	bl	8007c74 <validate>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 80086d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f040 8105 	bne.w	80088e8 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80086e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 80fd 	beq.w	80088e8 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80086f4:	b25b      	sxtb	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	da17      	bge.n	800872a <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80086fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086fc:	7858      	ldrb	r0, [r3, #1]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008708:	2301      	movs	r3, #1
 800870a:	f7fb ff6d 	bl	80045e8 <disk_write>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <f_sync+0x60>
 8008714:	2301      	movs	r3, #1
 8008716:	e0e9      	b.n	80088ec <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800871e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008722:	b2da      	uxtb	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800872a:	f7fb fd9d 	bl	8004268 <get_fattime>
 800872e:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8008730:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	2b04      	cmp	r3, #4
 8008736:	f040 808c 	bne.w	8008852 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4618      	mov	r0, r3
 800873e:	f7fc ffd1 	bl	80056e4 <fill_first_frag>
 8008742:	4603      	mov	r3, r0
 8008744:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 8008748:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008756:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800875a:	4619      	mov	r1, r3
 800875c:	f7fc fff1 	bl	8005742 <fill_last_frag>
 8008760:	4603      	mov	r3, r0
 8008762:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 8008766:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800876a:	2b00      	cmp	r3, #0
 800876c:	f040 80bc 	bne.w	80088e8 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	f107 0308 	add.w	r3, r7, #8
 8008776:	4611      	mov	r1, r2
 8008778:	4618      	mov	r0, r3
 800877a:	f7fd ff33 	bl	80065e4 <load_obj_dir>
 800877e:	4603      	mov	r3, r0
 8008780:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 8008784:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008788:	2b00      	cmp	r3, #0
 800878a:	f040 80ad 	bne.w	80088e8 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800878e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	3304      	adds	r3, #4
 8008794:	781a      	ldrb	r2, [r3, #0]
 8008796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	3304      	adds	r3, #4
 800879c:	f042 0220 	orr.w	r2, r2, #32
 80087a0:	b2d2      	uxtb	r2, r2
 80087a2:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	79da      	ldrb	r2, [r3, #7]
 80087a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	3321      	adds	r3, #33	@ 0x21
 80087ae:	f042 0201 	orr.w	r2, r2, #1
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80087b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	4619      	mov	r1, r3
 80087c4:	4610      	mov	r0, r2
 80087c6:	f7fc f87f 	bl	80048c8 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80087ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80087d8:	4608      	mov	r0, r1
 80087da:	f7fc f8a1 	bl	8004920 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80087de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80087ec:	4608      	mov	r0, r1
 80087ee:	f7fc f897 	bl	8004920 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80087f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	330c      	adds	r3, #12
 80087f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fc f864 	bl	80048c8 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8008800:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	3315      	adds	r3, #21
 8008806:	2200      	movs	r2, #0
 8008808:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800880a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	3310      	adds	r3, #16
 8008810:	2100      	movs	r1, #0
 8008812:	4618      	mov	r0, r3
 8008814:	f7fc f858 	bl	80048c8 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8008818:	f107 0308 	add.w	r3, r7, #8
 800881c:	4618      	mov	r0, r3
 800881e:	f7fd ff17 	bl	8006650 <store_xdir>
 8008822:	4603      	mov	r3, r0
 8008824:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 8008828:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800882c:	2b00      	cmp	r3, #0
 800882e:	d15b      	bne.n	80088e8 <f_sync+0x230>
							res = sync_fs(fs);
 8008830:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008832:	4618      	mov	r0, r3
 8008834:	f7fc fb58 	bl	8004ee8 <sync_fs>
 8008838:	4603      	mov	r3, r0
 800883a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008848:	b2da      	uxtb	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8008850:	e04a      	b.n	80088e8 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008852:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008858:	4619      	mov	r1, r3
 800885a:	4610      	mov	r0, r2
 800885c:	f7fc fb16 	bl	8004e8c <move_window>
 8008860:	4603      	mov	r3, r0
 8008862:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 8008866:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800886a:	2b00      	cmp	r3, #0
 800886c:	d13c      	bne.n	80088e8 <f_sync+0x230>
					dir = fp->dir_ptr;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008872:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008874:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008876:	330b      	adds	r3, #11
 8008878:	781a      	ldrb	r2, [r3, #0]
 800887a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800887c:	330b      	adds	r3, #11
 800887e:	f042 0220 	orr.w	r2, r2, #32
 8008882:	b2d2      	uxtb	r2, r2
 8008884:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6818      	ldr	r0, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	461a      	mov	r2, r3
 8008890:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008892:	f7fd fb7d 	bl	8005f90 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008896:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008898:	f103 001c 	add.w	r0, r3, #28
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80088a2:	4613      	mov	r3, r2
 80088a4:	4619      	mov	r1, r3
 80088a6:	f7fc f80f 	bl	80048c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80088aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088ac:	3316      	adds	r3, #22
 80088ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fc f809 	bl	80048c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80088b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088b8:	3312      	adds	r3, #18
 80088ba:	2100      	movs	r1, #0
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fb ffe8 	bl	8004892 <st_word>
					fs->wflag = 1;
 80088c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088c4:	2201      	movs	r2, #1
 80088c6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80088c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fc fb0c 	bl	8004ee8 <sync_fs>
 80088d0:	4603      	mov	r3, r0
 80088d2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80088dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80088e8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3770      	adds	r7, #112	@ 0x70
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7ff fedb 	bl	80086b8 <f_sync>
 8008902:	4603      	mov	r3, r0
 8008904:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d118      	bne.n	800893e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f107 0208 	add.w	r2, r7, #8
 8008912:	4611      	mov	r1, r2
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff f9ad 	bl	8007c74 <validate>
 800891a:	4603      	mov	r3, r0
 800891c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10c      	bne.n	800893e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008928:	4618      	mov	r0, r3
 800892a:	f7fc fa0b 	bl	8004d44 <dec_lock>
 800892e:	4603      	mov	r3, r0
 8008930:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008932:	7bfb      	ldrb	r3, [r7, #15]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d102      	bne.n	800893e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800893e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	4613      	mov	r3, r2
 8008954:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008956:	2301      	movs	r3, #1
 8008958:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800895e:	4b1f      	ldr	r3, [pc, #124]	@ (80089dc <FATFS_LinkDriverEx+0x94>)
 8008960:	7a5b      	ldrb	r3, [r3, #9]
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	d131      	bne.n	80089cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008968:	4b1c      	ldr	r3, [pc, #112]	@ (80089dc <FATFS_LinkDriverEx+0x94>)
 800896a:	7a5b      	ldrb	r3, [r3, #9]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	461a      	mov	r2, r3
 8008970:	4b1a      	ldr	r3, [pc, #104]	@ (80089dc <FATFS_LinkDriverEx+0x94>)
 8008972:	2100      	movs	r1, #0
 8008974:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008976:	4b19      	ldr	r3, [pc, #100]	@ (80089dc <FATFS_LinkDriverEx+0x94>)
 8008978:	7a5b      	ldrb	r3, [r3, #9]
 800897a:	b2db      	uxtb	r3, r3
 800897c:	4a17      	ldr	r2, [pc, #92]	@ (80089dc <FATFS_LinkDriverEx+0x94>)
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008986:	4b15      	ldr	r3, [pc, #84]	@ (80089dc <FATFS_LinkDriverEx+0x94>)
 8008988:	7a5b      	ldrb	r3, [r3, #9]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	461a      	mov	r2, r3
 800898e:	4b13      	ldr	r3, [pc, #76]	@ (80089dc <FATFS_LinkDriverEx+0x94>)
 8008990:	4413      	add	r3, r2
 8008992:	79fa      	ldrb	r2, [r7, #7]
 8008994:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008996:	4b11      	ldr	r3, [pc, #68]	@ (80089dc <FATFS_LinkDriverEx+0x94>)
 8008998:	7a5b      	ldrb	r3, [r3, #9]
 800899a:	b2db      	uxtb	r3, r3
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	b2d1      	uxtb	r1, r2
 80089a0:	4a0e      	ldr	r2, [pc, #56]	@ (80089dc <FATFS_LinkDriverEx+0x94>)
 80089a2:	7251      	strb	r1, [r2, #9]
 80089a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80089a6:	7dbb      	ldrb	r3, [r7, #22]
 80089a8:	3330      	adds	r3, #48	@ 0x30
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	3301      	adds	r3, #1
 80089b4:	223a      	movs	r2, #58	@ 0x3a
 80089b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	3302      	adds	r3, #2
 80089bc:	222f      	movs	r2, #47	@ 0x2f
 80089be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	3303      	adds	r3, #3
 80089c4:	2200      	movs	r2, #0
 80089c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	20002680 	.word	0x20002680

080089e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80089ea:	2200      	movs	r2, #0
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7ff ffaa 	bl	8008948 <FATFS_LinkDriverEx>
 80089f4:	4603      	mov	r3, r0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
	...

08008a00 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	6039      	str	r1, [r7, #0]
 8008a0a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008a0c:	88fb      	ldrh	r3, [r7, #6]
 8008a0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a10:	d802      	bhi.n	8008a18 <ff_convert+0x18>
		c = chr;
 8008a12:	88fb      	ldrh	r3, [r7, #6]
 8008a14:	81fb      	strh	r3, [r7, #14]
 8008a16:	e025      	b.n	8008a64 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00b      	beq.n	8008a36 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008a1e:	88fb      	ldrh	r3, [r7, #6]
 8008a20:	2bff      	cmp	r3, #255	@ 0xff
 8008a22:	d805      	bhi.n	8008a30 <ff_convert+0x30>
 8008a24:	88fb      	ldrh	r3, [r7, #6]
 8008a26:	3b80      	subs	r3, #128	@ 0x80
 8008a28:	4a12      	ldr	r2, [pc, #72]	@ (8008a74 <ff_convert+0x74>)
 8008a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a2e:	e000      	b.n	8008a32 <ff_convert+0x32>
 8008a30:	2300      	movs	r3, #0
 8008a32:	81fb      	strh	r3, [r7, #14]
 8008a34:	e016      	b.n	8008a64 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008a36:	2300      	movs	r3, #0
 8008a38:	81fb      	strh	r3, [r7, #14]
 8008a3a:	e009      	b.n	8008a50 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008a3c:	89fb      	ldrh	r3, [r7, #14]
 8008a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8008a74 <ff_convert+0x74>)
 8008a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a44:	88fa      	ldrh	r2, [r7, #6]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d006      	beq.n	8008a58 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008a4a:	89fb      	ldrh	r3, [r7, #14]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	81fb      	strh	r3, [r7, #14]
 8008a50:	89fb      	ldrh	r3, [r7, #14]
 8008a52:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a54:	d9f2      	bls.n	8008a3c <ff_convert+0x3c>
 8008a56:	e000      	b.n	8008a5a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008a58:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008a5a:	89fb      	ldrh	r3, [r7, #14]
 8008a5c:	3380      	adds	r3, #128	@ 0x80
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008a64:	89fb      	ldrh	r3, [r7, #14]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	08009ba4 	.word	0x08009ba4

08008a78 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	4603      	mov	r3, r0
 8008a80:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008a82:	88fb      	ldrh	r3, [r7, #6]
 8008a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a88:	d201      	bcs.n	8008a8e <ff_wtoupper+0x16>
 8008a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8008b84 <ff_wtoupper+0x10c>)
 8008a8c:	e000      	b.n	8008a90 <ff_wtoupper+0x18>
 8008a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8008b88 <ff_wtoupper+0x110>)
 8008a90:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	1c9a      	adds	r2, r3, #2
 8008a96:	617a      	str	r2, [r7, #20]
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008a9c:	8a7b      	ldrh	r3, [r7, #18]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d068      	beq.n	8008b74 <ff_wtoupper+0xfc>
 8008aa2:	88fa      	ldrh	r2, [r7, #6]
 8008aa4:	8a7b      	ldrh	r3, [r7, #18]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d364      	bcc.n	8008b74 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	1c9a      	adds	r2, r3, #2
 8008aae:	617a      	str	r2, [r7, #20]
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	823b      	strh	r3, [r7, #16]
 8008ab4:	8a3b      	ldrh	r3, [r7, #16]
 8008ab6:	0a1b      	lsrs	r3, r3, #8
 8008ab8:	81fb      	strh	r3, [r7, #14]
 8008aba:	8a3b      	ldrh	r3, [r7, #16]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008ac0:	88fa      	ldrh	r2, [r7, #6]
 8008ac2:	8a79      	ldrh	r1, [r7, #18]
 8008ac4:	8a3b      	ldrh	r3, [r7, #16]
 8008ac6:	440b      	add	r3, r1
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	da49      	bge.n	8008b60 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008acc:	89fb      	ldrh	r3, [r7, #14]
 8008ace:	2b08      	cmp	r3, #8
 8008ad0:	d84f      	bhi.n	8008b72 <ff_wtoupper+0xfa>
 8008ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ad8 <ff_wtoupper+0x60>)
 8008ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad8:	08008afd 	.word	0x08008afd
 8008adc:	08008b0f 	.word	0x08008b0f
 8008ae0:	08008b25 	.word	0x08008b25
 8008ae4:	08008b2d 	.word	0x08008b2d
 8008ae8:	08008b35 	.word	0x08008b35
 8008aec:	08008b3d 	.word	0x08008b3d
 8008af0:	08008b45 	.word	0x08008b45
 8008af4:	08008b4d 	.word	0x08008b4d
 8008af8:	08008b55 	.word	0x08008b55
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008afc:	88fa      	ldrh	r2, [r7, #6]
 8008afe:	8a7b      	ldrh	r3, [r7, #18]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	4413      	add	r3, r2
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	80fb      	strh	r3, [r7, #6]
 8008b0c:	e027      	b.n	8008b5e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008b0e:	88fa      	ldrh	r2, [r7, #6]
 8008b10:	8a7b      	ldrh	r3, [r7, #18]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	88fa      	ldrh	r2, [r7, #6]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	80fb      	strh	r3, [r7, #6]
 8008b22:	e01c      	b.n	8008b5e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008b24:	88fb      	ldrh	r3, [r7, #6]
 8008b26:	3b10      	subs	r3, #16
 8008b28:	80fb      	strh	r3, [r7, #6]
 8008b2a:	e018      	b.n	8008b5e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008b2c:	88fb      	ldrh	r3, [r7, #6]
 8008b2e:	3b20      	subs	r3, #32
 8008b30:	80fb      	strh	r3, [r7, #6]
 8008b32:	e014      	b.n	8008b5e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008b34:	88fb      	ldrh	r3, [r7, #6]
 8008b36:	3b30      	subs	r3, #48	@ 0x30
 8008b38:	80fb      	strh	r3, [r7, #6]
 8008b3a:	e010      	b.n	8008b5e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008b3c:	88fb      	ldrh	r3, [r7, #6]
 8008b3e:	3b1a      	subs	r3, #26
 8008b40:	80fb      	strh	r3, [r7, #6]
 8008b42:	e00c      	b.n	8008b5e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008b44:	88fb      	ldrh	r3, [r7, #6]
 8008b46:	3308      	adds	r3, #8
 8008b48:	80fb      	strh	r3, [r7, #6]
 8008b4a:	e008      	b.n	8008b5e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008b4c:	88fb      	ldrh	r3, [r7, #6]
 8008b4e:	3b50      	subs	r3, #80	@ 0x50
 8008b50:	80fb      	strh	r3, [r7, #6]
 8008b52:	e004      	b.n	8008b5e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008b54:	88fb      	ldrh	r3, [r7, #6]
 8008b56:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8008b5a:	80fb      	strh	r3, [r7, #6]
 8008b5c:	bf00      	nop
			}
			break;
 8008b5e:	e008      	b.n	8008b72 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008b60:	89fb      	ldrh	r3, [r7, #14]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d195      	bne.n	8008a92 <ff_wtoupper+0x1a>
 8008b66:	8a3b      	ldrh	r3, [r7, #16]
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008b70:	e78f      	b.n	8008a92 <ff_wtoupper+0x1a>
			break;
 8008b72:	bf00      	nop
	}

	return chr;
 8008b74:	88fb      	ldrh	r3, [r7, #6]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	371c      	adds	r7, #28
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	08009ca4 	.word	0x08009ca4
 8008b88:	08009e98 	.word	0x08009e98

08008b8c <std>:
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	b510      	push	{r4, lr}
 8008b90:	4604      	mov	r4, r0
 8008b92:	e9c0 3300 	strd	r3, r3, [r0]
 8008b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b9a:	6083      	str	r3, [r0, #8]
 8008b9c:	8181      	strh	r1, [r0, #12]
 8008b9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ba0:	81c2      	strh	r2, [r0, #14]
 8008ba2:	6183      	str	r3, [r0, #24]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	2208      	movs	r2, #8
 8008ba8:	305c      	adds	r0, #92	@ 0x5c
 8008baa:	f000 f906 	bl	8008dba <memset>
 8008bae:	4b0d      	ldr	r3, [pc, #52]	@ (8008be4 <std+0x58>)
 8008bb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008be8 <std+0x5c>)
 8008bb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bec <std+0x60>)
 8008bb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008bba:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf0 <std+0x64>)
 8008bbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf4 <std+0x68>)
 8008bc0:	6224      	str	r4, [r4, #32]
 8008bc2:	429c      	cmp	r4, r3
 8008bc4:	d006      	beq.n	8008bd4 <std+0x48>
 8008bc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008bca:	4294      	cmp	r4, r2
 8008bcc:	d002      	beq.n	8008bd4 <std+0x48>
 8008bce:	33d0      	adds	r3, #208	@ 0xd0
 8008bd0:	429c      	cmp	r4, r3
 8008bd2:	d105      	bne.n	8008be0 <std+0x54>
 8008bd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bdc:	f000 b966 	b.w	8008eac <__retarget_lock_init_recursive>
 8008be0:	bd10      	pop	{r4, pc}
 8008be2:	bf00      	nop
 8008be4:	08008d35 	.word	0x08008d35
 8008be8:	08008d57 	.word	0x08008d57
 8008bec:	08008d8f 	.word	0x08008d8f
 8008bf0:	08008db3 	.word	0x08008db3
 8008bf4:	2000268c 	.word	0x2000268c

08008bf8 <stdio_exit_handler>:
 8008bf8:	4a02      	ldr	r2, [pc, #8]	@ (8008c04 <stdio_exit_handler+0xc>)
 8008bfa:	4903      	ldr	r1, [pc, #12]	@ (8008c08 <stdio_exit_handler+0x10>)
 8008bfc:	4803      	ldr	r0, [pc, #12]	@ (8008c0c <stdio_exit_handler+0x14>)
 8008bfe:	f000 b869 	b.w	8008cd4 <_fwalk_sglue>
 8008c02:	bf00      	nop
 8008c04:	2000000c 	.word	0x2000000c
 8008c08:	08009749 	.word	0x08009749
 8008c0c:	2000001c 	.word	0x2000001c

08008c10 <cleanup_stdio>:
 8008c10:	6841      	ldr	r1, [r0, #4]
 8008c12:	4b0c      	ldr	r3, [pc, #48]	@ (8008c44 <cleanup_stdio+0x34>)
 8008c14:	4299      	cmp	r1, r3
 8008c16:	b510      	push	{r4, lr}
 8008c18:	4604      	mov	r4, r0
 8008c1a:	d001      	beq.n	8008c20 <cleanup_stdio+0x10>
 8008c1c:	f000 fd94 	bl	8009748 <_fflush_r>
 8008c20:	68a1      	ldr	r1, [r4, #8]
 8008c22:	4b09      	ldr	r3, [pc, #36]	@ (8008c48 <cleanup_stdio+0x38>)
 8008c24:	4299      	cmp	r1, r3
 8008c26:	d002      	beq.n	8008c2e <cleanup_stdio+0x1e>
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 fd8d 	bl	8009748 <_fflush_r>
 8008c2e:	68e1      	ldr	r1, [r4, #12]
 8008c30:	4b06      	ldr	r3, [pc, #24]	@ (8008c4c <cleanup_stdio+0x3c>)
 8008c32:	4299      	cmp	r1, r3
 8008c34:	d004      	beq.n	8008c40 <cleanup_stdio+0x30>
 8008c36:	4620      	mov	r0, r4
 8008c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c3c:	f000 bd84 	b.w	8009748 <_fflush_r>
 8008c40:	bd10      	pop	{r4, pc}
 8008c42:	bf00      	nop
 8008c44:	2000268c 	.word	0x2000268c
 8008c48:	200026f4 	.word	0x200026f4
 8008c4c:	2000275c 	.word	0x2000275c

08008c50 <global_stdio_init.part.0>:
 8008c50:	b510      	push	{r4, lr}
 8008c52:	4b0b      	ldr	r3, [pc, #44]	@ (8008c80 <global_stdio_init.part.0+0x30>)
 8008c54:	4c0b      	ldr	r4, [pc, #44]	@ (8008c84 <global_stdio_init.part.0+0x34>)
 8008c56:	4a0c      	ldr	r2, [pc, #48]	@ (8008c88 <global_stdio_init.part.0+0x38>)
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2104      	movs	r1, #4
 8008c60:	f7ff ff94 	bl	8008b8c <std>
 8008c64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c68:	2201      	movs	r2, #1
 8008c6a:	2109      	movs	r1, #9
 8008c6c:	f7ff ff8e 	bl	8008b8c <std>
 8008c70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c74:	2202      	movs	r2, #2
 8008c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c7a:	2112      	movs	r1, #18
 8008c7c:	f7ff bf86 	b.w	8008b8c <std>
 8008c80:	200027c4 	.word	0x200027c4
 8008c84:	2000268c 	.word	0x2000268c
 8008c88:	08008bf9 	.word	0x08008bf9

08008c8c <__sfp_lock_acquire>:
 8008c8c:	4801      	ldr	r0, [pc, #4]	@ (8008c94 <__sfp_lock_acquire+0x8>)
 8008c8e:	f000 b90e 	b.w	8008eae <__retarget_lock_acquire_recursive>
 8008c92:	bf00      	nop
 8008c94:	200027cd 	.word	0x200027cd

08008c98 <__sfp_lock_release>:
 8008c98:	4801      	ldr	r0, [pc, #4]	@ (8008ca0 <__sfp_lock_release+0x8>)
 8008c9a:	f000 b909 	b.w	8008eb0 <__retarget_lock_release_recursive>
 8008c9e:	bf00      	nop
 8008ca0:	200027cd 	.word	0x200027cd

08008ca4 <__sinit>:
 8008ca4:	b510      	push	{r4, lr}
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	f7ff fff0 	bl	8008c8c <__sfp_lock_acquire>
 8008cac:	6a23      	ldr	r3, [r4, #32]
 8008cae:	b11b      	cbz	r3, 8008cb8 <__sinit+0x14>
 8008cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cb4:	f7ff bff0 	b.w	8008c98 <__sfp_lock_release>
 8008cb8:	4b04      	ldr	r3, [pc, #16]	@ (8008ccc <__sinit+0x28>)
 8008cba:	6223      	str	r3, [r4, #32]
 8008cbc:	4b04      	ldr	r3, [pc, #16]	@ (8008cd0 <__sinit+0x2c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1f5      	bne.n	8008cb0 <__sinit+0xc>
 8008cc4:	f7ff ffc4 	bl	8008c50 <global_stdio_init.part.0>
 8008cc8:	e7f2      	b.n	8008cb0 <__sinit+0xc>
 8008cca:	bf00      	nop
 8008ccc:	08008c11 	.word	0x08008c11
 8008cd0:	200027c4 	.word	0x200027c4

08008cd4 <_fwalk_sglue>:
 8008cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd8:	4607      	mov	r7, r0
 8008cda:	4688      	mov	r8, r1
 8008cdc:	4614      	mov	r4, r2
 8008cde:	2600      	movs	r6, #0
 8008ce0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ce4:	f1b9 0901 	subs.w	r9, r9, #1
 8008ce8:	d505      	bpl.n	8008cf6 <_fwalk_sglue+0x22>
 8008cea:	6824      	ldr	r4, [r4, #0]
 8008cec:	2c00      	cmp	r4, #0
 8008cee:	d1f7      	bne.n	8008ce0 <_fwalk_sglue+0xc>
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cf6:	89ab      	ldrh	r3, [r5, #12]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d907      	bls.n	8008d0c <_fwalk_sglue+0x38>
 8008cfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d00:	3301      	adds	r3, #1
 8008d02:	d003      	beq.n	8008d0c <_fwalk_sglue+0x38>
 8008d04:	4629      	mov	r1, r5
 8008d06:	4638      	mov	r0, r7
 8008d08:	47c0      	blx	r8
 8008d0a:	4306      	orrs	r6, r0
 8008d0c:	3568      	adds	r5, #104	@ 0x68
 8008d0e:	e7e9      	b.n	8008ce4 <_fwalk_sglue+0x10>

08008d10 <iprintf>:
 8008d10:	b40f      	push	{r0, r1, r2, r3}
 8008d12:	b507      	push	{r0, r1, r2, lr}
 8008d14:	4906      	ldr	r1, [pc, #24]	@ (8008d30 <iprintf+0x20>)
 8008d16:	ab04      	add	r3, sp, #16
 8008d18:	6808      	ldr	r0, [r1, #0]
 8008d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d1e:	6881      	ldr	r1, [r0, #8]
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	f000 f9e9 	bl	80090f8 <_vfiprintf_r>
 8008d26:	b003      	add	sp, #12
 8008d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d2c:	b004      	add	sp, #16
 8008d2e:	4770      	bx	lr
 8008d30:	20000018 	.word	0x20000018

08008d34 <__sread>:
 8008d34:	b510      	push	{r4, lr}
 8008d36:	460c      	mov	r4, r1
 8008d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3c:	f000 f868 	bl	8008e10 <_read_r>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	bfab      	itete	ge
 8008d44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d46:	89a3      	ldrhlt	r3, [r4, #12]
 8008d48:	181b      	addge	r3, r3, r0
 8008d4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d4e:	bfac      	ite	ge
 8008d50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d52:	81a3      	strhlt	r3, [r4, #12]
 8008d54:	bd10      	pop	{r4, pc}

08008d56 <__swrite>:
 8008d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5a:	461f      	mov	r7, r3
 8008d5c:	898b      	ldrh	r3, [r1, #12]
 8008d5e:	05db      	lsls	r3, r3, #23
 8008d60:	4605      	mov	r5, r0
 8008d62:	460c      	mov	r4, r1
 8008d64:	4616      	mov	r6, r2
 8008d66:	d505      	bpl.n	8008d74 <__swrite+0x1e>
 8008d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f000 f83c 	bl	8008dec <_lseek_r>
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	4632      	mov	r2, r6
 8008d82:	463b      	mov	r3, r7
 8008d84:	4628      	mov	r0, r5
 8008d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8a:	f000 b853 	b.w	8008e34 <_write_r>

08008d8e <__sseek>:
 8008d8e:	b510      	push	{r4, lr}
 8008d90:	460c      	mov	r4, r1
 8008d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d96:	f000 f829 	bl	8008dec <_lseek_r>
 8008d9a:	1c43      	adds	r3, r0, #1
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	bf15      	itete	ne
 8008da0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008da2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008da6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008daa:	81a3      	strheq	r3, [r4, #12]
 8008dac:	bf18      	it	ne
 8008dae:	81a3      	strhne	r3, [r4, #12]
 8008db0:	bd10      	pop	{r4, pc}

08008db2 <__sclose>:
 8008db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db6:	f000 b809 	b.w	8008dcc <_close_r>

08008dba <memset>:
 8008dba:	4402      	add	r2, r0
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d100      	bne.n	8008dc4 <memset+0xa>
 8008dc2:	4770      	bx	lr
 8008dc4:	f803 1b01 	strb.w	r1, [r3], #1
 8008dc8:	e7f9      	b.n	8008dbe <memset+0x4>
	...

08008dcc <_close_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	4d06      	ldr	r5, [pc, #24]	@ (8008de8 <_close_r+0x1c>)
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	4608      	mov	r0, r1
 8008dd6:	602b      	str	r3, [r5, #0]
 8008dd8:	f7f7 fed0 	bl	8000b7c <_close>
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	d102      	bne.n	8008de6 <_close_r+0x1a>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	b103      	cbz	r3, 8008de6 <_close_r+0x1a>
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	bd38      	pop	{r3, r4, r5, pc}
 8008de8:	200027c8 	.word	0x200027c8

08008dec <_lseek_r>:
 8008dec:	b538      	push	{r3, r4, r5, lr}
 8008dee:	4d07      	ldr	r5, [pc, #28]	@ (8008e0c <_lseek_r+0x20>)
 8008df0:	4604      	mov	r4, r0
 8008df2:	4608      	mov	r0, r1
 8008df4:	4611      	mov	r1, r2
 8008df6:	2200      	movs	r2, #0
 8008df8:	602a      	str	r2, [r5, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	f7f7 fee5 	bl	8000bca <_lseek>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d102      	bne.n	8008e0a <_lseek_r+0x1e>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	b103      	cbz	r3, 8008e0a <_lseek_r+0x1e>
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	bd38      	pop	{r3, r4, r5, pc}
 8008e0c:	200027c8 	.word	0x200027c8

08008e10 <_read_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	4d07      	ldr	r5, [pc, #28]	@ (8008e30 <_read_r+0x20>)
 8008e14:	4604      	mov	r4, r0
 8008e16:	4608      	mov	r0, r1
 8008e18:	4611      	mov	r1, r2
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	602a      	str	r2, [r5, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f7f7 fe8f 	bl	8000b42 <_read>
 8008e24:	1c43      	adds	r3, r0, #1
 8008e26:	d102      	bne.n	8008e2e <_read_r+0x1e>
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	b103      	cbz	r3, 8008e2e <_read_r+0x1e>
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	200027c8 	.word	0x200027c8

08008e34 <_write_r>:
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	4d07      	ldr	r5, [pc, #28]	@ (8008e54 <_write_r+0x20>)
 8008e38:	4604      	mov	r4, r0
 8008e3a:	4608      	mov	r0, r1
 8008e3c:	4611      	mov	r1, r2
 8008e3e:	2200      	movs	r2, #0
 8008e40:	602a      	str	r2, [r5, #0]
 8008e42:	461a      	mov	r2, r3
 8008e44:	f7f7 fbb8 	bl	80005b8 <_write>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	d102      	bne.n	8008e52 <_write_r+0x1e>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	b103      	cbz	r3, 8008e52 <_write_r+0x1e>
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	bd38      	pop	{r3, r4, r5, pc}
 8008e54:	200027c8 	.word	0x200027c8

08008e58 <__errno>:
 8008e58:	4b01      	ldr	r3, [pc, #4]	@ (8008e60 <__errno+0x8>)
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	20000018 	.word	0x20000018

08008e64 <__libc_init_array>:
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	4d0d      	ldr	r5, [pc, #52]	@ (8008e9c <__libc_init_array+0x38>)
 8008e68:	4c0d      	ldr	r4, [pc, #52]	@ (8008ea0 <__libc_init_array+0x3c>)
 8008e6a:	1b64      	subs	r4, r4, r5
 8008e6c:	10a4      	asrs	r4, r4, #2
 8008e6e:	2600      	movs	r6, #0
 8008e70:	42a6      	cmp	r6, r4
 8008e72:	d109      	bne.n	8008e88 <__libc_init_array+0x24>
 8008e74:	4d0b      	ldr	r5, [pc, #44]	@ (8008ea4 <__libc_init_array+0x40>)
 8008e76:	4c0c      	ldr	r4, [pc, #48]	@ (8008ea8 <__libc_init_array+0x44>)
 8008e78:	f000 fdb6 	bl	80099e8 <_init>
 8008e7c:	1b64      	subs	r4, r4, r5
 8008e7e:	10a4      	asrs	r4, r4, #2
 8008e80:	2600      	movs	r6, #0
 8008e82:	42a6      	cmp	r6, r4
 8008e84:	d105      	bne.n	8008e92 <__libc_init_array+0x2e>
 8008e86:	bd70      	pop	{r4, r5, r6, pc}
 8008e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e8c:	4798      	blx	r3
 8008e8e:	3601      	adds	r6, #1
 8008e90:	e7ee      	b.n	8008e70 <__libc_init_array+0xc>
 8008e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e96:	4798      	blx	r3
 8008e98:	3601      	adds	r6, #1
 8008e9a:	e7f2      	b.n	8008e82 <__libc_init_array+0x1e>
 8008e9c:	08009f90 	.word	0x08009f90
 8008ea0:	08009f90 	.word	0x08009f90
 8008ea4:	08009f90 	.word	0x08009f90
 8008ea8:	08009f94 	.word	0x08009f94

08008eac <__retarget_lock_init_recursive>:
 8008eac:	4770      	bx	lr

08008eae <__retarget_lock_acquire_recursive>:
 8008eae:	4770      	bx	lr

08008eb0 <__retarget_lock_release_recursive>:
 8008eb0:	4770      	bx	lr
	...

08008eb4 <_free_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	2900      	cmp	r1, #0
 8008eba:	d041      	beq.n	8008f40 <_free_r+0x8c>
 8008ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ec0:	1f0c      	subs	r4, r1, #4
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	bfb8      	it	lt
 8008ec6:	18e4      	addlt	r4, r4, r3
 8008ec8:	f000 f8e0 	bl	800908c <__malloc_lock>
 8008ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8008f44 <_free_r+0x90>)
 8008ece:	6813      	ldr	r3, [r2, #0]
 8008ed0:	b933      	cbnz	r3, 8008ee0 <_free_r+0x2c>
 8008ed2:	6063      	str	r3, [r4, #4]
 8008ed4:	6014      	str	r4, [r2, #0]
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008edc:	f000 b8dc 	b.w	8009098 <__malloc_unlock>
 8008ee0:	42a3      	cmp	r3, r4
 8008ee2:	d908      	bls.n	8008ef6 <_free_r+0x42>
 8008ee4:	6820      	ldr	r0, [r4, #0]
 8008ee6:	1821      	adds	r1, r4, r0
 8008ee8:	428b      	cmp	r3, r1
 8008eea:	bf01      	itttt	eq
 8008eec:	6819      	ldreq	r1, [r3, #0]
 8008eee:	685b      	ldreq	r3, [r3, #4]
 8008ef0:	1809      	addeq	r1, r1, r0
 8008ef2:	6021      	streq	r1, [r4, #0]
 8008ef4:	e7ed      	b.n	8008ed2 <_free_r+0x1e>
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	b10b      	cbz	r3, 8008f00 <_free_r+0x4c>
 8008efc:	42a3      	cmp	r3, r4
 8008efe:	d9fa      	bls.n	8008ef6 <_free_r+0x42>
 8008f00:	6811      	ldr	r1, [r2, #0]
 8008f02:	1850      	adds	r0, r2, r1
 8008f04:	42a0      	cmp	r0, r4
 8008f06:	d10b      	bne.n	8008f20 <_free_r+0x6c>
 8008f08:	6820      	ldr	r0, [r4, #0]
 8008f0a:	4401      	add	r1, r0
 8008f0c:	1850      	adds	r0, r2, r1
 8008f0e:	4283      	cmp	r3, r0
 8008f10:	6011      	str	r1, [r2, #0]
 8008f12:	d1e0      	bne.n	8008ed6 <_free_r+0x22>
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	6053      	str	r3, [r2, #4]
 8008f1a:	4408      	add	r0, r1
 8008f1c:	6010      	str	r0, [r2, #0]
 8008f1e:	e7da      	b.n	8008ed6 <_free_r+0x22>
 8008f20:	d902      	bls.n	8008f28 <_free_r+0x74>
 8008f22:	230c      	movs	r3, #12
 8008f24:	602b      	str	r3, [r5, #0]
 8008f26:	e7d6      	b.n	8008ed6 <_free_r+0x22>
 8008f28:	6820      	ldr	r0, [r4, #0]
 8008f2a:	1821      	adds	r1, r4, r0
 8008f2c:	428b      	cmp	r3, r1
 8008f2e:	bf04      	itt	eq
 8008f30:	6819      	ldreq	r1, [r3, #0]
 8008f32:	685b      	ldreq	r3, [r3, #4]
 8008f34:	6063      	str	r3, [r4, #4]
 8008f36:	bf04      	itt	eq
 8008f38:	1809      	addeq	r1, r1, r0
 8008f3a:	6021      	streq	r1, [r4, #0]
 8008f3c:	6054      	str	r4, [r2, #4]
 8008f3e:	e7ca      	b.n	8008ed6 <_free_r+0x22>
 8008f40:	bd38      	pop	{r3, r4, r5, pc}
 8008f42:	bf00      	nop
 8008f44:	200027d4 	.word	0x200027d4

08008f48 <sbrk_aligned>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	4e0f      	ldr	r6, [pc, #60]	@ (8008f88 <sbrk_aligned+0x40>)
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	6831      	ldr	r1, [r6, #0]
 8008f50:	4605      	mov	r5, r0
 8008f52:	b911      	cbnz	r1, 8008f5a <sbrk_aligned+0x12>
 8008f54:	f000 fcb4 	bl	80098c0 <_sbrk_r>
 8008f58:	6030      	str	r0, [r6, #0]
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f000 fcaf 	bl	80098c0 <_sbrk_r>
 8008f62:	1c43      	adds	r3, r0, #1
 8008f64:	d103      	bne.n	8008f6e <sbrk_aligned+0x26>
 8008f66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	bd70      	pop	{r4, r5, r6, pc}
 8008f6e:	1cc4      	adds	r4, r0, #3
 8008f70:	f024 0403 	bic.w	r4, r4, #3
 8008f74:	42a0      	cmp	r0, r4
 8008f76:	d0f8      	beq.n	8008f6a <sbrk_aligned+0x22>
 8008f78:	1a21      	subs	r1, r4, r0
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f000 fca0 	bl	80098c0 <_sbrk_r>
 8008f80:	3001      	adds	r0, #1
 8008f82:	d1f2      	bne.n	8008f6a <sbrk_aligned+0x22>
 8008f84:	e7ef      	b.n	8008f66 <sbrk_aligned+0x1e>
 8008f86:	bf00      	nop
 8008f88:	200027d0 	.word	0x200027d0

08008f8c <_malloc_r>:
 8008f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f90:	1ccd      	adds	r5, r1, #3
 8008f92:	f025 0503 	bic.w	r5, r5, #3
 8008f96:	3508      	adds	r5, #8
 8008f98:	2d0c      	cmp	r5, #12
 8008f9a:	bf38      	it	cc
 8008f9c:	250c      	movcc	r5, #12
 8008f9e:	2d00      	cmp	r5, #0
 8008fa0:	4606      	mov	r6, r0
 8008fa2:	db01      	blt.n	8008fa8 <_malloc_r+0x1c>
 8008fa4:	42a9      	cmp	r1, r5
 8008fa6:	d904      	bls.n	8008fb2 <_malloc_r+0x26>
 8008fa8:	230c      	movs	r3, #12
 8008faa:	6033      	str	r3, [r6, #0]
 8008fac:	2000      	movs	r0, #0
 8008fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009088 <_malloc_r+0xfc>
 8008fb6:	f000 f869 	bl	800908c <__malloc_lock>
 8008fba:	f8d8 3000 	ldr.w	r3, [r8]
 8008fbe:	461c      	mov	r4, r3
 8008fc0:	bb44      	cbnz	r4, 8009014 <_malloc_r+0x88>
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f7ff ffbf 	bl	8008f48 <sbrk_aligned>
 8008fca:	1c43      	adds	r3, r0, #1
 8008fcc:	4604      	mov	r4, r0
 8008fce:	d158      	bne.n	8009082 <_malloc_r+0xf6>
 8008fd0:	f8d8 4000 	ldr.w	r4, [r8]
 8008fd4:	4627      	mov	r7, r4
 8008fd6:	2f00      	cmp	r7, #0
 8008fd8:	d143      	bne.n	8009062 <_malloc_r+0xd6>
 8008fda:	2c00      	cmp	r4, #0
 8008fdc:	d04b      	beq.n	8009076 <_malloc_r+0xea>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	4639      	mov	r1, r7
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	eb04 0903 	add.w	r9, r4, r3
 8008fe8:	f000 fc6a 	bl	80098c0 <_sbrk_r>
 8008fec:	4581      	cmp	r9, r0
 8008fee:	d142      	bne.n	8009076 <_malloc_r+0xea>
 8008ff0:	6821      	ldr	r1, [r4, #0]
 8008ff2:	1a6d      	subs	r5, r5, r1
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f7ff ffa6 	bl	8008f48 <sbrk_aligned>
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d03a      	beq.n	8009076 <_malloc_r+0xea>
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	442b      	add	r3, r5
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	f8d8 3000 	ldr.w	r3, [r8]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	bb62      	cbnz	r2, 8009068 <_malloc_r+0xdc>
 800900e:	f8c8 7000 	str.w	r7, [r8]
 8009012:	e00f      	b.n	8009034 <_malloc_r+0xa8>
 8009014:	6822      	ldr	r2, [r4, #0]
 8009016:	1b52      	subs	r2, r2, r5
 8009018:	d420      	bmi.n	800905c <_malloc_r+0xd0>
 800901a:	2a0b      	cmp	r2, #11
 800901c:	d917      	bls.n	800904e <_malloc_r+0xc2>
 800901e:	1961      	adds	r1, r4, r5
 8009020:	42a3      	cmp	r3, r4
 8009022:	6025      	str	r5, [r4, #0]
 8009024:	bf18      	it	ne
 8009026:	6059      	strne	r1, [r3, #4]
 8009028:	6863      	ldr	r3, [r4, #4]
 800902a:	bf08      	it	eq
 800902c:	f8c8 1000 	streq.w	r1, [r8]
 8009030:	5162      	str	r2, [r4, r5]
 8009032:	604b      	str	r3, [r1, #4]
 8009034:	4630      	mov	r0, r6
 8009036:	f000 f82f 	bl	8009098 <__malloc_unlock>
 800903a:	f104 000b 	add.w	r0, r4, #11
 800903e:	1d23      	adds	r3, r4, #4
 8009040:	f020 0007 	bic.w	r0, r0, #7
 8009044:	1ac2      	subs	r2, r0, r3
 8009046:	bf1c      	itt	ne
 8009048:	1a1b      	subne	r3, r3, r0
 800904a:	50a3      	strne	r3, [r4, r2]
 800904c:	e7af      	b.n	8008fae <_malloc_r+0x22>
 800904e:	6862      	ldr	r2, [r4, #4]
 8009050:	42a3      	cmp	r3, r4
 8009052:	bf0c      	ite	eq
 8009054:	f8c8 2000 	streq.w	r2, [r8]
 8009058:	605a      	strne	r2, [r3, #4]
 800905a:	e7eb      	b.n	8009034 <_malloc_r+0xa8>
 800905c:	4623      	mov	r3, r4
 800905e:	6864      	ldr	r4, [r4, #4]
 8009060:	e7ae      	b.n	8008fc0 <_malloc_r+0x34>
 8009062:	463c      	mov	r4, r7
 8009064:	687f      	ldr	r7, [r7, #4]
 8009066:	e7b6      	b.n	8008fd6 <_malloc_r+0x4a>
 8009068:	461a      	mov	r2, r3
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	42a3      	cmp	r3, r4
 800906e:	d1fb      	bne.n	8009068 <_malloc_r+0xdc>
 8009070:	2300      	movs	r3, #0
 8009072:	6053      	str	r3, [r2, #4]
 8009074:	e7de      	b.n	8009034 <_malloc_r+0xa8>
 8009076:	230c      	movs	r3, #12
 8009078:	6033      	str	r3, [r6, #0]
 800907a:	4630      	mov	r0, r6
 800907c:	f000 f80c 	bl	8009098 <__malloc_unlock>
 8009080:	e794      	b.n	8008fac <_malloc_r+0x20>
 8009082:	6005      	str	r5, [r0, #0]
 8009084:	e7d6      	b.n	8009034 <_malloc_r+0xa8>
 8009086:	bf00      	nop
 8009088:	200027d4 	.word	0x200027d4

0800908c <__malloc_lock>:
 800908c:	4801      	ldr	r0, [pc, #4]	@ (8009094 <__malloc_lock+0x8>)
 800908e:	f7ff bf0e 	b.w	8008eae <__retarget_lock_acquire_recursive>
 8009092:	bf00      	nop
 8009094:	200027cc 	.word	0x200027cc

08009098 <__malloc_unlock>:
 8009098:	4801      	ldr	r0, [pc, #4]	@ (80090a0 <__malloc_unlock+0x8>)
 800909a:	f7ff bf09 	b.w	8008eb0 <__retarget_lock_release_recursive>
 800909e:	bf00      	nop
 80090a0:	200027cc 	.word	0x200027cc

080090a4 <__sfputc_r>:
 80090a4:	6893      	ldr	r3, [r2, #8]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	b410      	push	{r4}
 80090ac:	6093      	str	r3, [r2, #8]
 80090ae:	da08      	bge.n	80090c2 <__sfputc_r+0x1e>
 80090b0:	6994      	ldr	r4, [r2, #24]
 80090b2:	42a3      	cmp	r3, r4
 80090b4:	db01      	blt.n	80090ba <__sfputc_r+0x16>
 80090b6:	290a      	cmp	r1, #10
 80090b8:	d103      	bne.n	80090c2 <__sfputc_r+0x1e>
 80090ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090be:	f000 bb6b 	b.w	8009798 <__swbuf_r>
 80090c2:	6813      	ldr	r3, [r2, #0]
 80090c4:	1c58      	adds	r0, r3, #1
 80090c6:	6010      	str	r0, [r2, #0]
 80090c8:	7019      	strb	r1, [r3, #0]
 80090ca:	4608      	mov	r0, r1
 80090cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <__sfputs_r>:
 80090d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d4:	4606      	mov	r6, r0
 80090d6:	460f      	mov	r7, r1
 80090d8:	4614      	mov	r4, r2
 80090da:	18d5      	adds	r5, r2, r3
 80090dc:	42ac      	cmp	r4, r5
 80090de:	d101      	bne.n	80090e4 <__sfputs_r+0x12>
 80090e0:	2000      	movs	r0, #0
 80090e2:	e007      	b.n	80090f4 <__sfputs_r+0x22>
 80090e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e8:	463a      	mov	r2, r7
 80090ea:	4630      	mov	r0, r6
 80090ec:	f7ff ffda 	bl	80090a4 <__sfputc_r>
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	d1f3      	bne.n	80090dc <__sfputs_r+0xa>
 80090f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090f8 <_vfiprintf_r>:
 80090f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	460d      	mov	r5, r1
 80090fe:	b09d      	sub	sp, #116	@ 0x74
 8009100:	4614      	mov	r4, r2
 8009102:	4698      	mov	r8, r3
 8009104:	4606      	mov	r6, r0
 8009106:	b118      	cbz	r0, 8009110 <_vfiprintf_r+0x18>
 8009108:	6a03      	ldr	r3, [r0, #32]
 800910a:	b90b      	cbnz	r3, 8009110 <_vfiprintf_r+0x18>
 800910c:	f7ff fdca 	bl	8008ca4 <__sinit>
 8009110:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009112:	07d9      	lsls	r1, r3, #31
 8009114:	d405      	bmi.n	8009122 <_vfiprintf_r+0x2a>
 8009116:	89ab      	ldrh	r3, [r5, #12]
 8009118:	059a      	lsls	r2, r3, #22
 800911a:	d402      	bmi.n	8009122 <_vfiprintf_r+0x2a>
 800911c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800911e:	f7ff fec6 	bl	8008eae <__retarget_lock_acquire_recursive>
 8009122:	89ab      	ldrh	r3, [r5, #12]
 8009124:	071b      	lsls	r3, r3, #28
 8009126:	d501      	bpl.n	800912c <_vfiprintf_r+0x34>
 8009128:	692b      	ldr	r3, [r5, #16]
 800912a:	b99b      	cbnz	r3, 8009154 <_vfiprintf_r+0x5c>
 800912c:	4629      	mov	r1, r5
 800912e:	4630      	mov	r0, r6
 8009130:	f000 fb70 	bl	8009814 <__swsetup_r>
 8009134:	b170      	cbz	r0, 8009154 <_vfiprintf_r+0x5c>
 8009136:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009138:	07dc      	lsls	r4, r3, #31
 800913a:	d504      	bpl.n	8009146 <_vfiprintf_r+0x4e>
 800913c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009140:	b01d      	add	sp, #116	@ 0x74
 8009142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009146:	89ab      	ldrh	r3, [r5, #12]
 8009148:	0598      	lsls	r0, r3, #22
 800914a:	d4f7      	bmi.n	800913c <_vfiprintf_r+0x44>
 800914c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800914e:	f7ff feaf 	bl	8008eb0 <__retarget_lock_release_recursive>
 8009152:	e7f3      	b.n	800913c <_vfiprintf_r+0x44>
 8009154:	2300      	movs	r3, #0
 8009156:	9309      	str	r3, [sp, #36]	@ 0x24
 8009158:	2320      	movs	r3, #32
 800915a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800915e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009162:	2330      	movs	r3, #48	@ 0x30
 8009164:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009314 <_vfiprintf_r+0x21c>
 8009168:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800916c:	f04f 0901 	mov.w	r9, #1
 8009170:	4623      	mov	r3, r4
 8009172:	469a      	mov	sl, r3
 8009174:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009178:	b10a      	cbz	r2, 800917e <_vfiprintf_r+0x86>
 800917a:	2a25      	cmp	r2, #37	@ 0x25
 800917c:	d1f9      	bne.n	8009172 <_vfiprintf_r+0x7a>
 800917e:	ebba 0b04 	subs.w	fp, sl, r4
 8009182:	d00b      	beq.n	800919c <_vfiprintf_r+0xa4>
 8009184:	465b      	mov	r3, fp
 8009186:	4622      	mov	r2, r4
 8009188:	4629      	mov	r1, r5
 800918a:	4630      	mov	r0, r6
 800918c:	f7ff ffa1 	bl	80090d2 <__sfputs_r>
 8009190:	3001      	adds	r0, #1
 8009192:	f000 80a7 	beq.w	80092e4 <_vfiprintf_r+0x1ec>
 8009196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009198:	445a      	add	r2, fp
 800919a:	9209      	str	r2, [sp, #36]	@ 0x24
 800919c:	f89a 3000 	ldrb.w	r3, [sl]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 809f 	beq.w	80092e4 <_vfiprintf_r+0x1ec>
 80091a6:	2300      	movs	r3, #0
 80091a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091b0:	f10a 0a01 	add.w	sl, sl, #1
 80091b4:	9304      	str	r3, [sp, #16]
 80091b6:	9307      	str	r3, [sp, #28]
 80091b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80091be:	4654      	mov	r4, sl
 80091c0:	2205      	movs	r2, #5
 80091c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c6:	4853      	ldr	r0, [pc, #332]	@ (8009314 <_vfiprintf_r+0x21c>)
 80091c8:	f7f7 f802 	bl	80001d0 <memchr>
 80091cc:	9a04      	ldr	r2, [sp, #16]
 80091ce:	b9d8      	cbnz	r0, 8009208 <_vfiprintf_r+0x110>
 80091d0:	06d1      	lsls	r1, r2, #27
 80091d2:	bf44      	itt	mi
 80091d4:	2320      	movmi	r3, #32
 80091d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091da:	0713      	lsls	r3, r2, #28
 80091dc:	bf44      	itt	mi
 80091de:	232b      	movmi	r3, #43	@ 0x2b
 80091e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091e4:	f89a 3000 	ldrb.w	r3, [sl]
 80091e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80091ea:	d015      	beq.n	8009218 <_vfiprintf_r+0x120>
 80091ec:	9a07      	ldr	r2, [sp, #28]
 80091ee:	4654      	mov	r4, sl
 80091f0:	2000      	movs	r0, #0
 80091f2:	f04f 0c0a 	mov.w	ip, #10
 80091f6:	4621      	mov	r1, r4
 80091f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091fc:	3b30      	subs	r3, #48	@ 0x30
 80091fe:	2b09      	cmp	r3, #9
 8009200:	d94b      	bls.n	800929a <_vfiprintf_r+0x1a2>
 8009202:	b1b0      	cbz	r0, 8009232 <_vfiprintf_r+0x13a>
 8009204:	9207      	str	r2, [sp, #28]
 8009206:	e014      	b.n	8009232 <_vfiprintf_r+0x13a>
 8009208:	eba0 0308 	sub.w	r3, r0, r8
 800920c:	fa09 f303 	lsl.w	r3, r9, r3
 8009210:	4313      	orrs	r3, r2
 8009212:	9304      	str	r3, [sp, #16]
 8009214:	46a2      	mov	sl, r4
 8009216:	e7d2      	b.n	80091be <_vfiprintf_r+0xc6>
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	1d19      	adds	r1, r3, #4
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	9103      	str	r1, [sp, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	bfbb      	ittet	lt
 8009224:	425b      	neglt	r3, r3
 8009226:	f042 0202 	orrlt.w	r2, r2, #2
 800922a:	9307      	strge	r3, [sp, #28]
 800922c:	9307      	strlt	r3, [sp, #28]
 800922e:	bfb8      	it	lt
 8009230:	9204      	strlt	r2, [sp, #16]
 8009232:	7823      	ldrb	r3, [r4, #0]
 8009234:	2b2e      	cmp	r3, #46	@ 0x2e
 8009236:	d10a      	bne.n	800924e <_vfiprintf_r+0x156>
 8009238:	7863      	ldrb	r3, [r4, #1]
 800923a:	2b2a      	cmp	r3, #42	@ 0x2a
 800923c:	d132      	bne.n	80092a4 <_vfiprintf_r+0x1ac>
 800923e:	9b03      	ldr	r3, [sp, #12]
 8009240:	1d1a      	adds	r2, r3, #4
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	9203      	str	r2, [sp, #12]
 8009246:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800924a:	3402      	adds	r4, #2
 800924c:	9305      	str	r3, [sp, #20]
 800924e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009324 <_vfiprintf_r+0x22c>
 8009252:	7821      	ldrb	r1, [r4, #0]
 8009254:	2203      	movs	r2, #3
 8009256:	4650      	mov	r0, sl
 8009258:	f7f6 ffba 	bl	80001d0 <memchr>
 800925c:	b138      	cbz	r0, 800926e <_vfiprintf_r+0x176>
 800925e:	9b04      	ldr	r3, [sp, #16]
 8009260:	eba0 000a 	sub.w	r0, r0, sl
 8009264:	2240      	movs	r2, #64	@ 0x40
 8009266:	4082      	lsls	r2, r0
 8009268:	4313      	orrs	r3, r2
 800926a:	3401      	adds	r4, #1
 800926c:	9304      	str	r3, [sp, #16]
 800926e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009272:	4829      	ldr	r0, [pc, #164]	@ (8009318 <_vfiprintf_r+0x220>)
 8009274:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009278:	2206      	movs	r2, #6
 800927a:	f7f6 ffa9 	bl	80001d0 <memchr>
 800927e:	2800      	cmp	r0, #0
 8009280:	d03f      	beq.n	8009302 <_vfiprintf_r+0x20a>
 8009282:	4b26      	ldr	r3, [pc, #152]	@ (800931c <_vfiprintf_r+0x224>)
 8009284:	bb1b      	cbnz	r3, 80092ce <_vfiprintf_r+0x1d6>
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	3307      	adds	r3, #7
 800928a:	f023 0307 	bic.w	r3, r3, #7
 800928e:	3308      	adds	r3, #8
 8009290:	9303      	str	r3, [sp, #12]
 8009292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009294:	443b      	add	r3, r7
 8009296:	9309      	str	r3, [sp, #36]	@ 0x24
 8009298:	e76a      	b.n	8009170 <_vfiprintf_r+0x78>
 800929a:	fb0c 3202 	mla	r2, ip, r2, r3
 800929e:	460c      	mov	r4, r1
 80092a0:	2001      	movs	r0, #1
 80092a2:	e7a8      	b.n	80091f6 <_vfiprintf_r+0xfe>
 80092a4:	2300      	movs	r3, #0
 80092a6:	3401      	adds	r4, #1
 80092a8:	9305      	str	r3, [sp, #20]
 80092aa:	4619      	mov	r1, r3
 80092ac:	f04f 0c0a 	mov.w	ip, #10
 80092b0:	4620      	mov	r0, r4
 80092b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092b6:	3a30      	subs	r2, #48	@ 0x30
 80092b8:	2a09      	cmp	r2, #9
 80092ba:	d903      	bls.n	80092c4 <_vfiprintf_r+0x1cc>
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0c6      	beq.n	800924e <_vfiprintf_r+0x156>
 80092c0:	9105      	str	r1, [sp, #20]
 80092c2:	e7c4      	b.n	800924e <_vfiprintf_r+0x156>
 80092c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80092c8:	4604      	mov	r4, r0
 80092ca:	2301      	movs	r3, #1
 80092cc:	e7f0      	b.n	80092b0 <_vfiprintf_r+0x1b8>
 80092ce:	ab03      	add	r3, sp, #12
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	462a      	mov	r2, r5
 80092d4:	4b12      	ldr	r3, [pc, #72]	@ (8009320 <_vfiprintf_r+0x228>)
 80092d6:	a904      	add	r1, sp, #16
 80092d8:	4630      	mov	r0, r6
 80092da:	f3af 8000 	nop.w
 80092de:	4607      	mov	r7, r0
 80092e0:	1c78      	adds	r0, r7, #1
 80092e2:	d1d6      	bne.n	8009292 <_vfiprintf_r+0x19a>
 80092e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092e6:	07d9      	lsls	r1, r3, #31
 80092e8:	d405      	bmi.n	80092f6 <_vfiprintf_r+0x1fe>
 80092ea:	89ab      	ldrh	r3, [r5, #12]
 80092ec:	059a      	lsls	r2, r3, #22
 80092ee:	d402      	bmi.n	80092f6 <_vfiprintf_r+0x1fe>
 80092f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092f2:	f7ff fddd 	bl	8008eb0 <__retarget_lock_release_recursive>
 80092f6:	89ab      	ldrh	r3, [r5, #12]
 80092f8:	065b      	lsls	r3, r3, #25
 80092fa:	f53f af1f 	bmi.w	800913c <_vfiprintf_r+0x44>
 80092fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009300:	e71e      	b.n	8009140 <_vfiprintf_r+0x48>
 8009302:	ab03      	add	r3, sp, #12
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	462a      	mov	r2, r5
 8009308:	4b05      	ldr	r3, [pc, #20]	@ (8009320 <_vfiprintf_r+0x228>)
 800930a:	a904      	add	r1, sp, #16
 800930c:	4630      	mov	r0, r6
 800930e:	f000 f879 	bl	8009404 <_printf_i>
 8009312:	e7e4      	b.n	80092de <_vfiprintf_r+0x1e6>
 8009314:	08009f54 	.word	0x08009f54
 8009318:	08009f5e 	.word	0x08009f5e
 800931c:	00000000 	.word	0x00000000
 8009320:	080090d3 	.word	0x080090d3
 8009324:	08009f5a 	.word	0x08009f5a

08009328 <_printf_common>:
 8009328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800932c:	4616      	mov	r6, r2
 800932e:	4698      	mov	r8, r3
 8009330:	688a      	ldr	r2, [r1, #8]
 8009332:	690b      	ldr	r3, [r1, #16]
 8009334:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009338:	4293      	cmp	r3, r2
 800933a:	bfb8      	it	lt
 800933c:	4613      	movlt	r3, r2
 800933e:	6033      	str	r3, [r6, #0]
 8009340:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009344:	4607      	mov	r7, r0
 8009346:	460c      	mov	r4, r1
 8009348:	b10a      	cbz	r2, 800934e <_printf_common+0x26>
 800934a:	3301      	adds	r3, #1
 800934c:	6033      	str	r3, [r6, #0]
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	0699      	lsls	r1, r3, #26
 8009352:	bf42      	ittt	mi
 8009354:	6833      	ldrmi	r3, [r6, #0]
 8009356:	3302      	addmi	r3, #2
 8009358:	6033      	strmi	r3, [r6, #0]
 800935a:	6825      	ldr	r5, [r4, #0]
 800935c:	f015 0506 	ands.w	r5, r5, #6
 8009360:	d106      	bne.n	8009370 <_printf_common+0x48>
 8009362:	f104 0a19 	add.w	sl, r4, #25
 8009366:	68e3      	ldr	r3, [r4, #12]
 8009368:	6832      	ldr	r2, [r6, #0]
 800936a:	1a9b      	subs	r3, r3, r2
 800936c:	42ab      	cmp	r3, r5
 800936e:	dc26      	bgt.n	80093be <_printf_common+0x96>
 8009370:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009374:	6822      	ldr	r2, [r4, #0]
 8009376:	3b00      	subs	r3, #0
 8009378:	bf18      	it	ne
 800937a:	2301      	movne	r3, #1
 800937c:	0692      	lsls	r2, r2, #26
 800937e:	d42b      	bmi.n	80093d8 <_printf_common+0xb0>
 8009380:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009384:	4641      	mov	r1, r8
 8009386:	4638      	mov	r0, r7
 8009388:	47c8      	blx	r9
 800938a:	3001      	adds	r0, #1
 800938c:	d01e      	beq.n	80093cc <_printf_common+0xa4>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	6922      	ldr	r2, [r4, #16]
 8009392:	f003 0306 	and.w	r3, r3, #6
 8009396:	2b04      	cmp	r3, #4
 8009398:	bf02      	ittt	eq
 800939a:	68e5      	ldreq	r5, [r4, #12]
 800939c:	6833      	ldreq	r3, [r6, #0]
 800939e:	1aed      	subeq	r5, r5, r3
 80093a0:	68a3      	ldr	r3, [r4, #8]
 80093a2:	bf0c      	ite	eq
 80093a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093a8:	2500      	movne	r5, #0
 80093aa:	4293      	cmp	r3, r2
 80093ac:	bfc4      	itt	gt
 80093ae:	1a9b      	subgt	r3, r3, r2
 80093b0:	18ed      	addgt	r5, r5, r3
 80093b2:	2600      	movs	r6, #0
 80093b4:	341a      	adds	r4, #26
 80093b6:	42b5      	cmp	r5, r6
 80093b8:	d11a      	bne.n	80093f0 <_printf_common+0xc8>
 80093ba:	2000      	movs	r0, #0
 80093bc:	e008      	b.n	80093d0 <_printf_common+0xa8>
 80093be:	2301      	movs	r3, #1
 80093c0:	4652      	mov	r2, sl
 80093c2:	4641      	mov	r1, r8
 80093c4:	4638      	mov	r0, r7
 80093c6:	47c8      	blx	r9
 80093c8:	3001      	adds	r0, #1
 80093ca:	d103      	bne.n	80093d4 <_printf_common+0xac>
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d4:	3501      	adds	r5, #1
 80093d6:	e7c6      	b.n	8009366 <_printf_common+0x3e>
 80093d8:	18e1      	adds	r1, r4, r3
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	2030      	movs	r0, #48	@ 0x30
 80093de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093e2:	4422      	add	r2, r4
 80093e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093ec:	3302      	adds	r3, #2
 80093ee:	e7c7      	b.n	8009380 <_printf_common+0x58>
 80093f0:	2301      	movs	r3, #1
 80093f2:	4622      	mov	r2, r4
 80093f4:	4641      	mov	r1, r8
 80093f6:	4638      	mov	r0, r7
 80093f8:	47c8      	blx	r9
 80093fa:	3001      	adds	r0, #1
 80093fc:	d0e6      	beq.n	80093cc <_printf_common+0xa4>
 80093fe:	3601      	adds	r6, #1
 8009400:	e7d9      	b.n	80093b6 <_printf_common+0x8e>
	...

08009404 <_printf_i>:
 8009404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009408:	7e0f      	ldrb	r7, [r1, #24]
 800940a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800940c:	2f78      	cmp	r7, #120	@ 0x78
 800940e:	4691      	mov	r9, r2
 8009410:	4680      	mov	r8, r0
 8009412:	460c      	mov	r4, r1
 8009414:	469a      	mov	sl, r3
 8009416:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800941a:	d807      	bhi.n	800942c <_printf_i+0x28>
 800941c:	2f62      	cmp	r7, #98	@ 0x62
 800941e:	d80a      	bhi.n	8009436 <_printf_i+0x32>
 8009420:	2f00      	cmp	r7, #0
 8009422:	f000 80d1 	beq.w	80095c8 <_printf_i+0x1c4>
 8009426:	2f58      	cmp	r7, #88	@ 0x58
 8009428:	f000 80b8 	beq.w	800959c <_printf_i+0x198>
 800942c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009430:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009434:	e03a      	b.n	80094ac <_printf_i+0xa8>
 8009436:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800943a:	2b15      	cmp	r3, #21
 800943c:	d8f6      	bhi.n	800942c <_printf_i+0x28>
 800943e:	a101      	add	r1, pc, #4	@ (adr r1, 8009444 <_printf_i+0x40>)
 8009440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009444:	0800949d 	.word	0x0800949d
 8009448:	080094b1 	.word	0x080094b1
 800944c:	0800942d 	.word	0x0800942d
 8009450:	0800942d 	.word	0x0800942d
 8009454:	0800942d 	.word	0x0800942d
 8009458:	0800942d 	.word	0x0800942d
 800945c:	080094b1 	.word	0x080094b1
 8009460:	0800942d 	.word	0x0800942d
 8009464:	0800942d 	.word	0x0800942d
 8009468:	0800942d 	.word	0x0800942d
 800946c:	0800942d 	.word	0x0800942d
 8009470:	080095af 	.word	0x080095af
 8009474:	080094db 	.word	0x080094db
 8009478:	08009569 	.word	0x08009569
 800947c:	0800942d 	.word	0x0800942d
 8009480:	0800942d 	.word	0x0800942d
 8009484:	080095d1 	.word	0x080095d1
 8009488:	0800942d 	.word	0x0800942d
 800948c:	080094db 	.word	0x080094db
 8009490:	0800942d 	.word	0x0800942d
 8009494:	0800942d 	.word	0x0800942d
 8009498:	08009571 	.word	0x08009571
 800949c:	6833      	ldr	r3, [r6, #0]
 800949e:	1d1a      	adds	r2, r3, #4
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6032      	str	r2, [r6, #0]
 80094a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094ac:	2301      	movs	r3, #1
 80094ae:	e09c      	b.n	80095ea <_printf_i+0x1e6>
 80094b0:	6833      	ldr	r3, [r6, #0]
 80094b2:	6820      	ldr	r0, [r4, #0]
 80094b4:	1d19      	adds	r1, r3, #4
 80094b6:	6031      	str	r1, [r6, #0]
 80094b8:	0606      	lsls	r6, r0, #24
 80094ba:	d501      	bpl.n	80094c0 <_printf_i+0xbc>
 80094bc:	681d      	ldr	r5, [r3, #0]
 80094be:	e003      	b.n	80094c8 <_printf_i+0xc4>
 80094c0:	0645      	lsls	r5, r0, #25
 80094c2:	d5fb      	bpl.n	80094bc <_printf_i+0xb8>
 80094c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	da03      	bge.n	80094d4 <_printf_i+0xd0>
 80094cc:	232d      	movs	r3, #45	@ 0x2d
 80094ce:	426d      	negs	r5, r5
 80094d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094d4:	4858      	ldr	r0, [pc, #352]	@ (8009638 <_printf_i+0x234>)
 80094d6:	230a      	movs	r3, #10
 80094d8:	e011      	b.n	80094fe <_printf_i+0xfa>
 80094da:	6821      	ldr	r1, [r4, #0]
 80094dc:	6833      	ldr	r3, [r6, #0]
 80094de:	0608      	lsls	r0, r1, #24
 80094e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80094e4:	d402      	bmi.n	80094ec <_printf_i+0xe8>
 80094e6:	0649      	lsls	r1, r1, #25
 80094e8:	bf48      	it	mi
 80094ea:	b2ad      	uxthmi	r5, r5
 80094ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80094ee:	4852      	ldr	r0, [pc, #328]	@ (8009638 <_printf_i+0x234>)
 80094f0:	6033      	str	r3, [r6, #0]
 80094f2:	bf14      	ite	ne
 80094f4:	230a      	movne	r3, #10
 80094f6:	2308      	moveq	r3, #8
 80094f8:	2100      	movs	r1, #0
 80094fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094fe:	6866      	ldr	r6, [r4, #4]
 8009500:	60a6      	str	r6, [r4, #8]
 8009502:	2e00      	cmp	r6, #0
 8009504:	db05      	blt.n	8009512 <_printf_i+0x10e>
 8009506:	6821      	ldr	r1, [r4, #0]
 8009508:	432e      	orrs	r6, r5
 800950a:	f021 0104 	bic.w	r1, r1, #4
 800950e:	6021      	str	r1, [r4, #0]
 8009510:	d04b      	beq.n	80095aa <_printf_i+0x1a6>
 8009512:	4616      	mov	r6, r2
 8009514:	fbb5 f1f3 	udiv	r1, r5, r3
 8009518:	fb03 5711 	mls	r7, r3, r1, r5
 800951c:	5dc7      	ldrb	r7, [r0, r7]
 800951e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009522:	462f      	mov	r7, r5
 8009524:	42bb      	cmp	r3, r7
 8009526:	460d      	mov	r5, r1
 8009528:	d9f4      	bls.n	8009514 <_printf_i+0x110>
 800952a:	2b08      	cmp	r3, #8
 800952c:	d10b      	bne.n	8009546 <_printf_i+0x142>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	07df      	lsls	r7, r3, #31
 8009532:	d508      	bpl.n	8009546 <_printf_i+0x142>
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	6861      	ldr	r1, [r4, #4]
 8009538:	4299      	cmp	r1, r3
 800953a:	bfde      	ittt	le
 800953c:	2330      	movle	r3, #48	@ 0x30
 800953e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009542:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009546:	1b92      	subs	r2, r2, r6
 8009548:	6122      	str	r2, [r4, #16]
 800954a:	f8cd a000 	str.w	sl, [sp]
 800954e:	464b      	mov	r3, r9
 8009550:	aa03      	add	r2, sp, #12
 8009552:	4621      	mov	r1, r4
 8009554:	4640      	mov	r0, r8
 8009556:	f7ff fee7 	bl	8009328 <_printf_common>
 800955a:	3001      	adds	r0, #1
 800955c:	d14a      	bne.n	80095f4 <_printf_i+0x1f0>
 800955e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009562:	b004      	add	sp, #16
 8009564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	f043 0320 	orr.w	r3, r3, #32
 800956e:	6023      	str	r3, [r4, #0]
 8009570:	4832      	ldr	r0, [pc, #200]	@ (800963c <_printf_i+0x238>)
 8009572:	2778      	movs	r7, #120	@ 0x78
 8009574:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	6831      	ldr	r1, [r6, #0]
 800957c:	061f      	lsls	r7, r3, #24
 800957e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009582:	d402      	bmi.n	800958a <_printf_i+0x186>
 8009584:	065f      	lsls	r7, r3, #25
 8009586:	bf48      	it	mi
 8009588:	b2ad      	uxthmi	r5, r5
 800958a:	6031      	str	r1, [r6, #0]
 800958c:	07d9      	lsls	r1, r3, #31
 800958e:	bf44      	itt	mi
 8009590:	f043 0320 	orrmi.w	r3, r3, #32
 8009594:	6023      	strmi	r3, [r4, #0]
 8009596:	b11d      	cbz	r5, 80095a0 <_printf_i+0x19c>
 8009598:	2310      	movs	r3, #16
 800959a:	e7ad      	b.n	80094f8 <_printf_i+0xf4>
 800959c:	4826      	ldr	r0, [pc, #152]	@ (8009638 <_printf_i+0x234>)
 800959e:	e7e9      	b.n	8009574 <_printf_i+0x170>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	f023 0320 	bic.w	r3, r3, #32
 80095a6:	6023      	str	r3, [r4, #0]
 80095a8:	e7f6      	b.n	8009598 <_printf_i+0x194>
 80095aa:	4616      	mov	r6, r2
 80095ac:	e7bd      	b.n	800952a <_printf_i+0x126>
 80095ae:	6833      	ldr	r3, [r6, #0]
 80095b0:	6825      	ldr	r5, [r4, #0]
 80095b2:	6961      	ldr	r1, [r4, #20]
 80095b4:	1d18      	adds	r0, r3, #4
 80095b6:	6030      	str	r0, [r6, #0]
 80095b8:	062e      	lsls	r6, r5, #24
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	d501      	bpl.n	80095c2 <_printf_i+0x1be>
 80095be:	6019      	str	r1, [r3, #0]
 80095c0:	e002      	b.n	80095c8 <_printf_i+0x1c4>
 80095c2:	0668      	lsls	r0, r5, #25
 80095c4:	d5fb      	bpl.n	80095be <_printf_i+0x1ba>
 80095c6:	8019      	strh	r1, [r3, #0]
 80095c8:	2300      	movs	r3, #0
 80095ca:	6123      	str	r3, [r4, #16]
 80095cc:	4616      	mov	r6, r2
 80095ce:	e7bc      	b.n	800954a <_printf_i+0x146>
 80095d0:	6833      	ldr	r3, [r6, #0]
 80095d2:	1d1a      	adds	r2, r3, #4
 80095d4:	6032      	str	r2, [r6, #0]
 80095d6:	681e      	ldr	r6, [r3, #0]
 80095d8:	6862      	ldr	r2, [r4, #4]
 80095da:	2100      	movs	r1, #0
 80095dc:	4630      	mov	r0, r6
 80095de:	f7f6 fdf7 	bl	80001d0 <memchr>
 80095e2:	b108      	cbz	r0, 80095e8 <_printf_i+0x1e4>
 80095e4:	1b80      	subs	r0, r0, r6
 80095e6:	6060      	str	r0, [r4, #4]
 80095e8:	6863      	ldr	r3, [r4, #4]
 80095ea:	6123      	str	r3, [r4, #16]
 80095ec:	2300      	movs	r3, #0
 80095ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095f2:	e7aa      	b.n	800954a <_printf_i+0x146>
 80095f4:	6923      	ldr	r3, [r4, #16]
 80095f6:	4632      	mov	r2, r6
 80095f8:	4649      	mov	r1, r9
 80095fa:	4640      	mov	r0, r8
 80095fc:	47d0      	blx	sl
 80095fe:	3001      	adds	r0, #1
 8009600:	d0ad      	beq.n	800955e <_printf_i+0x15a>
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	079b      	lsls	r3, r3, #30
 8009606:	d413      	bmi.n	8009630 <_printf_i+0x22c>
 8009608:	68e0      	ldr	r0, [r4, #12]
 800960a:	9b03      	ldr	r3, [sp, #12]
 800960c:	4298      	cmp	r0, r3
 800960e:	bfb8      	it	lt
 8009610:	4618      	movlt	r0, r3
 8009612:	e7a6      	b.n	8009562 <_printf_i+0x15e>
 8009614:	2301      	movs	r3, #1
 8009616:	4632      	mov	r2, r6
 8009618:	4649      	mov	r1, r9
 800961a:	4640      	mov	r0, r8
 800961c:	47d0      	blx	sl
 800961e:	3001      	adds	r0, #1
 8009620:	d09d      	beq.n	800955e <_printf_i+0x15a>
 8009622:	3501      	adds	r5, #1
 8009624:	68e3      	ldr	r3, [r4, #12]
 8009626:	9903      	ldr	r1, [sp, #12]
 8009628:	1a5b      	subs	r3, r3, r1
 800962a:	42ab      	cmp	r3, r5
 800962c:	dcf2      	bgt.n	8009614 <_printf_i+0x210>
 800962e:	e7eb      	b.n	8009608 <_printf_i+0x204>
 8009630:	2500      	movs	r5, #0
 8009632:	f104 0619 	add.w	r6, r4, #25
 8009636:	e7f5      	b.n	8009624 <_printf_i+0x220>
 8009638:	08009f65 	.word	0x08009f65
 800963c:	08009f76 	.word	0x08009f76

08009640 <__sflush_r>:
 8009640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009648:	0716      	lsls	r6, r2, #28
 800964a:	4605      	mov	r5, r0
 800964c:	460c      	mov	r4, r1
 800964e:	d454      	bmi.n	80096fa <__sflush_r+0xba>
 8009650:	684b      	ldr	r3, [r1, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	dc02      	bgt.n	800965c <__sflush_r+0x1c>
 8009656:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009658:	2b00      	cmp	r3, #0
 800965a:	dd48      	ble.n	80096ee <__sflush_r+0xae>
 800965c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800965e:	2e00      	cmp	r6, #0
 8009660:	d045      	beq.n	80096ee <__sflush_r+0xae>
 8009662:	2300      	movs	r3, #0
 8009664:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009668:	682f      	ldr	r7, [r5, #0]
 800966a:	6a21      	ldr	r1, [r4, #32]
 800966c:	602b      	str	r3, [r5, #0]
 800966e:	d030      	beq.n	80096d2 <__sflush_r+0x92>
 8009670:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	0759      	lsls	r1, r3, #29
 8009676:	d505      	bpl.n	8009684 <__sflush_r+0x44>
 8009678:	6863      	ldr	r3, [r4, #4]
 800967a:	1ad2      	subs	r2, r2, r3
 800967c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800967e:	b10b      	cbz	r3, 8009684 <__sflush_r+0x44>
 8009680:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009682:	1ad2      	subs	r2, r2, r3
 8009684:	2300      	movs	r3, #0
 8009686:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009688:	6a21      	ldr	r1, [r4, #32]
 800968a:	4628      	mov	r0, r5
 800968c:	47b0      	blx	r6
 800968e:	1c43      	adds	r3, r0, #1
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	d106      	bne.n	80096a2 <__sflush_r+0x62>
 8009694:	6829      	ldr	r1, [r5, #0]
 8009696:	291d      	cmp	r1, #29
 8009698:	d82b      	bhi.n	80096f2 <__sflush_r+0xb2>
 800969a:	4a2a      	ldr	r2, [pc, #168]	@ (8009744 <__sflush_r+0x104>)
 800969c:	40ca      	lsrs	r2, r1
 800969e:	07d6      	lsls	r6, r2, #31
 80096a0:	d527      	bpl.n	80096f2 <__sflush_r+0xb2>
 80096a2:	2200      	movs	r2, #0
 80096a4:	6062      	str	r2, [r4, #4]
 80096a6:	04d9      	lsls	r1, r3, #19
 80096a8:	6922      	ldr	r2, [r4, #16]
 80096aa:	6022      	str	r2, [r4, #0]
 80096ac:	d504      	bpl.n	80096b8 <__sflush_r+0x78>
 80096ae:	1c42      	adds	r2, r0, #1
 80096b0:	d101      	bne.n	80096b6 <__sflush_r+0x76>
 80096b2:	682b      	ldr	r3, [r5, #0]
 80096b4:	b903      	cbnz	r3, 80096b8 <__sflush_r+0x78>
 80096b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80096b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096ba:	602f      	str	r7, [r5, #0]
 80096bc:	b1b9      	cbz	r1, 80096ee <__sflush_r+0xae>
 80096be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096c2:	4299      	cmp	r1, r3
 80096c4:	d002      	beq.n	80096cc <__sflush_r+0x8c>
 80096c6:	4628      	mov	r0, r5
 80096c8:	f7ff fbf4 	bl	8008eb4 <_free_r>
 80096cc:	2300      	movs	r3, #0
 80096ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80096d0:	e00d      	b.n	80096ee <__sflush_r+0xae>
 80096d2:	2301      	movs	r3, #1
 80096d4:	4628      	mov	r0, r5
 80096d6:	47b0      	blx	r6
 80096d8:	4602      	mov	r2, r0
 80096da:	1c50      	adds	r0, r2, #1
 80096dc:	d1c9      	bne.n	8009672 <__sflush_r+0x32>
 80096de:	682b      	ldr	r3, [r5, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d0c6      	beq.n	8009672 <__sflush_r+0x32>
 80096e4:	2b1d      	cmp	r3, #29
 80096e6:	d001      	beq.n	80096ec <__sflush_r+0xac>
 80096e8:	2b16      	cmp	r3, #22
 80096ea:	d11e      	bne.n	800972a <__sflush_r+0xea>
 80096ec:	602f      	str	r7, [r5, #0]
 80096ee:	2000      	movs	r0, #0
 80096f0:	e022      	b.n	8009738 <__sflush_r+0xf8>
 80096f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096f6:	b21b      	sxth	r3, r3
 80096f8:	e01b      	b.n	8009732 <__sflush_r+0xf2>
 80096fa:	690f      	ldr	r7, [r1, #16]
 80096fc:	2f00      	cmp	r7, #0
 80096fe:	d0f6      	beq.n	80096ee <__sflush_r+0xae>
 8009700:	0793      	lsls	r3, r2, #30
 8009702:	680e      	ldr	r6, [r1, #0]
 8009704:	bf08      	it	eq
 8009706:	694b      	ldreq	r3, [r1, #20]
 8009708:	600f      	str	r7, [r1, #0]
 800970a:	bf18      	it	ne
 800970c:	2300      	movne	r3, #0
 800970e:	eba6 0807 	sub.w	r8, r6, r7
 8009712:	608b      	str	r3, [r1, #8]
 8009714:	f1b8 0f00 	cmp.w	r8, #0
 8009718:	dde9      	ble.n	80096ee <__sflush_r+0xae>
 800971a:	6a21      	ldr	r1, [r4, #32]
 800971c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800971e:	4643      	mov	r3, r8
 8009720:	463a      	mov	r2, r7
 8009722:	4628      	mov	r0, r5
 8009724:	47b0      	blx	r6
 8009726:	2800      	cmp	r0, #0
 8009728:	dc08      	bgt.n	800973c <__sflush_r+0xfc>
 800972a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800972e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009732:	81a3      	strh	r3, [r4, #12]
 8009734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800973c:	4407      	add	r7, r0
 800973e:	eba8 0800 	sub.w	r8, r8, r0
 8009742:	e7e7      	b.n	8009714 <__sflush_r+0xd4>
 8009744:	20400001 	.word	0x20400001

08009748 <_fflush_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	690b      	ldr	r3, [r1, #16]
 800974c:	4605      	mov	r5, r0
 800974e:	460c      	mov	r4, r1
 8009750:	b913      	cbnz	r3, 8009758 <_fflush_r+0x10>
 8009752:	2500      	movs	r5, #0
 8009754:	4628      	mov	r0, r5
 8009756:	bd38      	pop	{r3, r4, r5, pc}
 8009758:	b118      	cbz	r0, 8009762 <_fflush_r+0x1a>
 800975a:	6a03      	ldr	r3, [r0, #32]
 800975c:	b90b      	cbnz	r3, 8009762 <_fflush_r+0x1a>
 800975e:	f7ff faa1 	bl	8008ca4 <__sinit>
 8009762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d0f3      	beq.n	8009752 <_fflush_r+0xa>
 800976a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800976c:	07d0      	lsls	r0, r2, #31
 800976e:	d404      	bmi.n	800977a <_fflush_r+0x32>
 8009770:	0599      	lsls	r1, r3, #22
 8009772:	d402      	bmi.n	800977a <_fflush_r+0x32>
 8009774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009776:	f7ff fb9a 	bl	8008eae <__retarget_lock_acquire_recursive>
 800977a:	4628      	mov	r0, r5
 800977c:	4621      	mov	r1, r4
 800977e:	f7ff ff5f 	bl	8009640 <__sflush_r>
 8009782:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009784:	07da      	lsls	r2, r3, #31
 8009786:	4605      	mov	r5, r0
 8009788:	d4e4      	bmi.n	8009754 <_fflush_r+0xc>
 800978a:	89a3      	ldrh	r3, [r4, #12]
 800978c:	059b      	lsls	r3, r3, #22
 800978e:	d4e1      	bmi.n	8009754 <_fflush_r+0xc>
 8009790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009792:	f7ff fb8d 	bl	8008eb0 <__retarget_lock_release_recursive>
 8009796:	e7dd      	b.n	8009754 <_fflush_r+0xc>

08009798 <__swbuf_r>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	460e      	mov	r6, r1
 800979c:	4614      	mov	r4, r2
 800979e:	4605      	mov	r5, r0
 80097a0:	b118      	cbz	r0, 80097aa <__swbuf_r+0x12>
 80097a2:	6a03      	ldr	r3, [r0, #32]
 80097a4:	b90b      	cbnz	r3, 80097aa <__swbuf_r+0x12>
 80097a6:	f7ff fa7d 	bl	8008ca4 <__sinit>
 80097aa:	69a3      	ldr	r3, [r4, #24]
 80097ac:	60a3      	str	r3, [r4, #8]
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	071a      	lsls	r2, r3, #28
 80097b2:	d501      	bpl.n	80097b8 <__swbuf_r+0x20>
 80097b4:	6923      	ldr	r3, [r4, #16]
 80097b6:	b943      	cbnz	r3, 80097ca <__swbuf_r+0x32>
 80097b8:	4621      	mov	r1, r4
 80097ba:	4628      	mov	r0, r5
 80097bc:	f000 f82a 	bl	8009814 <__swsetup_r>
 80097c0:	b118      	cbz	r0, 80097ca <__swbuf_r+0x32>
 80097c2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80097c6:	4638      	mov	r0, r7
 80097c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	6922      	ldr	r2, [r4, #16]
 80097ce:	1a98      	subs	r0, r3, r2
 80097d0:	6963      	ldr	r3, [r4, #20]
 80097d2:	b2f6      	uxtb	r6, r6
 80097d4:	4283      	cmp	r3, r0
 80097d6:	4637      	mov	r7, r6
 80097d8:	dc05      	bgt.n	80097e6 <__swbuf_r+0x4e>
 80097da:	4621      	mov	r1, r4
 80097dc:	4628      	mov	r0, r5
 80097de:	f7ff ffb3 	bl	8009748 <_fflush_r>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d1ed      	bne.n	80097c2 <__swbuf_r+0x2a>
 80097e6:	68a3      	ldr	r3, [r4, #8]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	60a3      	str	r3, [r4, #8]
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	6022      	str	r2, [r4, #0]
 80097f2:	701e      	strb	r6, [r3, #0]
 80097f4:	6962      	ldr	r2, [r4, #20]
 80097f6:	1c43      	adds	r3, r0, #1
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d004      	beq.n	8009806 <__swbuf_r+0x6e>
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	07db      	lsls	r3, r3, #31
 8009800:	d5e1      	bpl.n	80097c6 <__swbuf_r+0x2e>
 8009802:	2e0a      	cmp	r6, #10
 8009804:	d1df      	bne.n	80097c6 <__swbuf_r+0x2e>
 8009806:	4621      	mov	r1, r4
 8009808:	4628      	mov	r0, r5
 800980a:	f7ff ff9d 	bl	8009748 <_fflush_r>
 800980e:	2800      	cmp	r0, #0
 8009810:	d0d9      	beq.n	80097c6 <__swbuf_r+0x2e>
 8009812:	e7d6      	b.n	80097c2 <__swbuf_r+0x2a>

08009814 <__swsetup_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4b29      	ldr	r3, [pc, #164]	@ (80098bc <__swsetup_r+0xa8>)
 8009818:	4605      	mov	r5, r0
 800981a:	6818      	ldr	r0, [r3, #0]
 800981c:	460c      	mov	r4, r1
 800981e:	b118      	cbz	r0, 8009828 <__swsetup_r+0x14>
 8009820:	6a03      	ldr	r3, [r0, #32]
 8009822:	b90b      	cbnz	r3, 8009828 <__swsetup_r+0x14>
 8009824:	f7ff fa3e 	bl	8008ca4 <__sinit>
 8009828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800982c:	0719      	lsls	r1, r3, #28
 800982e:	d422      	bmi.n	8009876 <__swsetup_r+0x62>
 8009830:	06da      	lsls	r2, r3, #27
 8009832:	d407      	bmi.n	8009844 <__swsetup_r+0x30>
 8009834:	2209      	movs	r2, #9
 8009836:	602a      	str	r2, [r5, #0]
 8009838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800983c:	81a3      	strh	r3, [r4, #12]
 800983e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009842:	e033      	b.n	80098ac <__swsetup_r+0x98>
 8009844:	0758      	lsls	r0, r3, #29
 8009846:	d512      	bpl.n	800986e <__swsetup_r+0x5a>
 8009848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800984a:	b141      	cbz	r1, 800985e <__swsetup_r+0x4a>
 800984c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009850:	4299      	cmp	r1, r3
 8009852:	d002      	beq.n	800985a <__swsetup_r+0x46>
 8009854:	4628      	mov	r0, r5
 8009856:	f7ff fb2d 	bl	8008eb4 <_free_r>
 800985a:	2300      	movs	r3, #0
 800985c:	6363      	str	r3, [r4, #52]	@ 0x34
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009864:	81a3      	strh	r3, [r4, #12]
 8009866:	2300      	movs	r3, #0
 8009868:	6063      	str	r3, [r4, #4]
 800986a:	6923      	ldr	r3, [r4, #16]
 800986c:	6023      	str	r3, [r4, #0]
 800986e:	89a3      	ldrh	r3, [r4, #12]
 8009870:	f043 0308 	orr.w	r3, r3, #8
 8009874:	81a3      	strh	r3, [r4, #12]
 8009876:	6923      	ldr	r3, [r4, #16]
 8009878:	b94b      	cbnz	r3, 800988e <__swsetup_r+0x7a>
 800987a:	89a3      	ldrh	r3, [r4, #12]
 800987c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009884:	d003      	beq.n	800988e <__swsetup_r+0x7a>
 8009886:	4621      	mov	r1, r4
 8009888:	4628      	mov	r0, r5
 800988a:	f000 f84f 	bl	800992c <__smakebuf_r>
 800988e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009892:	f013 0201 	ands.w	r2, r3, #1
 8009896:	d00a      	beq.n	80098ae <__swsetup_r+0x9a>
 8009898:	2200      	movs	r2, #0
 800989a:	60a2      	str	r2, [r4, #8]
 800989c:	6962      	ldr	r2, [r4, #20]
 800989e:	4252      	negs	r2, r2
 80098a0:	61a2      	str	r2, [r4, #24]
 80098a2:	6922      	ldr	r2, [r4, #16]
 80098a4:	b942      	cbnz	r2, 80098b8 <__swsetup_r+0xa4>
 80098a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098aa:	d1c5      	bne.n	8009838 <__swsetup_r+0x24>
 80098ac:	bd38      	pop	{r3, r4, r5, pc}
 80098ae:	0799      	lsls	r1, r3, #30
 80098b0:	bf58      	it	pl
 80098b2:	6962      	ldrpl	r2, [r4, #20]
 80098b4:	60a2      	str	r2, [r4, #8]
 80098b6:	e7f4      	b.n	80098a2 <__swsetup_r+0x8e>
 80098b8:	2000      	movs	r0, #0
 80098ba:	e7f7      	b.n	80098ac <__swsetup_r+0x98>
 80098bc:	20000018 	.word	0x20000018

080098c0 <_sbrk_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	4d06      	ldr	r5, [pc, #24]	@ (80098dc <_sbrk_r+0x1c>)
 80098c4:	2300      	movs	r3, #0
 80098c6:	4604      	mov	r4, r0
 80098c8:	4608      	mov	r0, r1
 80098ca:	602b      	str	r3, [r5, #0]
 80098cc:	f7f7 f98a 	bl	8000be4 <_sbrk>
 80098d0:	1c43      	adds	r3, r0, #1
 80098d2:	d102      	bne.n	80098da <_sbrk_r+0x1a>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	b103      	cbz	r3, 80098da <_sbrk_r+0x1a>
 80098d8:	6023      	str	r3, [r4, #0]
 80098da:	bd38      	pop	{r3, r4, r5, pc}
 80098dc:	200027c8 	.word	0x200027c8

080098e0 <__swhatbuf_r>:
 80098e0:	b570      	push	{r4, r5, r6, lr}
 80098e2:	460c      	mov	r4, r1
 80098e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e8:	2900      	cmp	r1, #0
 80098ea:	b096      	sub	sp, #88	@ 0x58
 80098ec:	4615      	mov	r5, r2
 80098ee:	461e      	mov	r6, r3
 80098f0:	da0d      	bge.n	800990e <__swhatbuf_r+0x2e>
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80098f8:	f04f 0100 	mov.w	r1, #0
 80098fc:	bf14      	ite	ne
 80098fe:	2340      	movne	r3, #64	@ 0x40
 8009900:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009904:	2000      	movs	r0, #0
 8009906:	6031      	str	r1, [r6, #0]
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	b016      	add	sp, #88	@ 0x58
 800990c:	bd70      	pop	{r4, r5, r6, pc}
 800990e:	466a      	mov	r2, sp
 8009910:	f000 f848 	bl	80099a4 <_fstat_r>
 8009914:	2800      	cmp	r0, #0
 8009916:	dbec      	blt.n	80098f2 <__swhatbuf_r+0x12>
 8009918:	9901      	ldr	r1, [sp, #4]
 800991a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800991e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009922:	4259      	negs	r1, r3
 8009924:	4159      	adcs	r1, r3
 8009926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800992a:	e7eb      	b.n	8009904 <__swhatbuf_r+0x24>

0800992c <__smakebuf_r>:
 800992c:	898b      	ldrh	r3, [r1, #12]
 800992e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009930:	079d      	lsls	r5, r3, #30
 8009932:	4606      	mov	r6, r0
 8009934:	460c      	mov	r4, r1
 8009936:	d507      	bpl.n	8009948 <__smakebuf_r+0x1c>
 8009938:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	6123      	str	r3, [r4, #16]
 8009940:	2301      	movs	r3, #1
 8009942:	6163      	str	r3, [r4, #20]
 8009944:	b003      	add	sp, #12
 8009946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009948:	ab01      	add	r3, sp, #4
 800994a:	466a      	mov	r2, sp
 800994c:	f7ff ffc8 	bl	80098e0 <__swhatbuf_r>
 8009950:	9f00      	ldr	r7, [sp, #0]
 8009952:	4605      	mov	r5, r0
 8009954:	4639      	mov	r1, r7
 8009956:	4630      	mov	r0, r6
 8009958:	f7ff fb18 	bl	8008f8c <_malloc_r>
 800995c:	b948      	cbnz	r0, 8009972 <__smakebuf_r+0x46>
 800995e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009962:	059a      	lsls	r2, r3, #22
 8009964:	d4ee      	bmi.n	8009944 <__smakebuf_r+0x18>
 8009966:	f023 0303 	bic.w	r3, r3, #3
 800996a:	f043 0302 	orr.w	r3, r3, #2
 800996e:	81a3      	strh	r3, [r4, #12]
 8009970:	e7e2      	b.n	8009938 <__smakebuf_r+0xc>
 8009972:	89a3      	ldrh	r3, [r4, #12]
 8009974:	6020      	str	r0, [r4, #0]
 8009976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800997a:	81a3      	strh	r3, [r4, #12]
 800997c:	9b01      	ldr	r3, [sp, #4]
 800997e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009982:	b15b      	cbz	r3, 800999c <__smakebuf_r+0x70>
 8009984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009988:	4630      	mov	r0, r6
 800998a:	f000 f81d 	bl	80099c8 <_isatty_r>
 800998e:	b128      	cbz	r0, 800999c <__smakebuf_r+0x70>
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	f023 0303 	bic.w	r3, r3, #3
 8009996:	f043 0301 	orr.w	r3, r3, #1
 800999a:	81a3      	strh	r3, [r4, #12]
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	431d      	orrs	r5, r3
 80099a0:	81a5      	strh	r5, [r4, #12]
 80099a2:	e7cf      	b.n	8009944 <__smakebuf_r+0x18>

080099a4 <_fstat_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4d07      	ldr	r5, [pc, #28]	@ (80099c4 <_fstat_r+0x20>)
 80099a8:	2300      	movs	r3, #0
 80099aa:	4604      	mov	r4, r0
 80099ac:	4608      	mov	r0, r1
 80099ae:	4611      	mov	r1, r2
 80099b0:	602b      	str	r3, [r5, #0]
 80099b2:	f7f7 f8ef 	bl	8000b94 <_fstat>
 80099b6:	1c43      	adds	r3, r0, #1
 80099b8:	d102      	bne.n	80099c0 <_fstat_r+0x1c>
 80099ba:	682b      	ldr	r3, [r5, #0]
 80099bc:	b103      	cbz	r3, 80099c0 <_fstat_r+0x1c>
 80099be:	6023      	str	r3, [r4, #0]
 80099c0:	bd38      	pop	{r3, r4, r5, pc}
 80099c2:	bf00      	nop
 80099c4:	200027c8 	.word	0x200027c8

080099c8 <_isatty_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	4d06      	ldr	r5, [pc, #24]	@ (80099e4 <_isatty_r+0x1c>)
 80099cc:	2300      	movs	r3, #0
 80099ce:	4604      	mov	r4, r0
 80099d0:	4608      	mov	r0, r1
 80099d2:	602b      	str	r3, [r5, #0]
 80099d4:	f7f7 f8ee 	bl	8000bb4 <_isatty>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d102      	bne.n	80099e2 <_isatty_r+0x1a>
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	b103      	cbz	r3, 80099e2 <_isatty_r+0x1a>
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	bd38      	pop	{r3, r4, r5, pc}
 80099e4:	200027c8 	.word	0x200027c8

080099e8 <_init>:
 80099e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ea:	bf00      	nop
 80099ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ee:	bc08      	pop	{r3}
 80099f0:	469e      	mov	lr, r3
 80099f2:	4770      	bx	lr

080099f4 <_fini>:
 80099f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f6:	bf00      	nop
 80099f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fa:	bc08      	pop	{r3}
 80099fc:	469e      	mov	lr, r3
 80099fe:	4770      	bx	lr
