
ROBOdebugTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007684  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08007834  08007834  00008834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ab4  08007ab4  00009080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007ab4  08007ab4  00008ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007abc  08007abc  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007abc  08007abc  00008abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ac0  08007ac0  00008ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007ac4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000080  08007b44  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08007b44  00009318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001165e  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb3  00000000  00000000  0001a70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0001d3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d25  00000000  00000000  0001e508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b708  00000000  00000000  0001f22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c2c  00000000  00000000  0004a935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc795  00000000  00000000  00061561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015dcf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e68  00000000  00000000  0015dd3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00162ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800781c 	.word	0x0800781c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800781c 	.word	0x0800781c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b5b0      	push	{r4, r5, r7, lr}
 8000292:	f5ad 6d93 	sub.w	sp, sp, #1176	@ 0x498
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fd37 	bl	8000d0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f90c 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 fa10 	bl	80006c4 <MX_GPIO_Init>
  MX_CAN1_Init();
 80002a4:	f000 f95c 	bl	8000560 <MX_CAN1_Init>
  MX_I2C1_Init();
 80002a8:	f000 f98e 	bl	80005c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80002ac:	f000 f9cc 	bl	8000648 <MX_SPI1_Init>
  MX_FATFS_Init();
 80002b0:	f003 fb62 	bl	8003978 <MX_FATFS_Init>
//  /* USER CODE BEGIN 2 */
printf("SPI SD card test Initialing");
 80002b4:	4873      	ldr	r0, [pc, #460]	@ (8000484 <main+0x1f4>)
 80002b6:	f006 fc93 	bl	8006be0 <iprintf>
fflush(stdout);
 80002ba:	4b73      	ldr	r3, [pc, #460]	@ (8000488 <main+0x1f8>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f006 fbb7 	bl	8006a34 <fflush>
HAL_Delay(1000);
 80002c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ca:	f000 fd93 	bl	8000df4 <HAL_Delay>
FATFS FatFs;	//FatFs handle
FIL fil; 		//File handle
FRESULT fres; //Result after operations

//Open the file system
fres = f_mount(&FatFs, "", 1); //1=mount now
 80002ce:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 80002d2:	2201      	movs	r2, #1
 80002d4:	496d      	ldr	r1, [pc, #436]	@ (800048c <main+0x1fc>)
 80002d6:	4618      	mov	r0, r3
 80002d8:	f005 fdd2 	bl	8005e80 <f_mount>
 80002dc:	4603      	mov	r3, r0
 80002de:	f887 3497 	strb.w	r3, [r7, #1175]	@ 0x497
if (fres != FR_OK) {
 80002e2:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d00d      	beq.n	8000306 <main+0x76>
	printf("f_mount error (%i)\r\n", fres);
 80002ea:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 80002ee:	4619      	mov	r1, r3
 80002f0:	4867      	ldr	r0, [pc, #412]	@ (8000490 <main+0x200>)
 80002f2:	f006 fc75 	bl	8006be0 <iprintf>
	fflush(stdout);
 80002f6:	4b64      	ldr	r3, [pc, #400]	@ (8000488 <main+0x1f8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f006 fb99 	bl	8006a34 <fflush>
	while(1);
 8000302:	bf00      	nop
 8000304:	e7fd      	b.n	8000302 <main+0x72>
}
DWORD free_clusters, free_sectors, total_sectors;

FATFS* getFreeFs;

fres = f_getfree("", &free_clusters, &getFreeFs);
 8000306:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800030a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800030e:	4619      	mov	r1, r3
 8000310:	485e      	ldr	r0, [pc, #376]	@ (800048c <main+0x1fc>)
 8000312:	f006 f9d2 	bl	80066ba <f_getfree>
 8000316:	4603      	mov	r3, r0
 8000318:	f887 3497 	strb.w	r3, [r7, #1175]	@ 0x497
if (fres != FR_OK) {
 800031c:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 8000320:	2b00      	cmp	r3, #0
 8000322:	d00d      	beq.n	8000340 <main+0xb0>
	printf("f_getfree error (%i)\r\n", fres);
 8000324:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 8000328:	4619      	mov	r1, r3
 800032a:	485a      	ldr	r0, [pc, #360]	@ (8000494 <main+0x204>)
 800032c:	f006 fc58 	bl	8006be0 <iprintf>
	fflush(stdout);
 8000330:	4b55      	ldr	r3, [pc, #340]	@ (8000488 <main+0x1f8>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	689b      	ldr	r3, [r3, #8]
 8000336:	4618      	mov	r0, r3
 8000338:	f006 fb7c 	bl	8006a34 <fflush>
	while(1);
 800033c:	bf00      	nop
 800033e:	e7fd      	b.n	800033c <main+0xac>
}

//Formula comes from ChaN's documentation
total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000340:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8000344:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	3b02      	subs	r3, #2
 800034e:	f507 6293 	add.w	r2, r7, #1176	@ 0x498
 8000352:	f2a2 4274 	subw	r2, r2, #1140	@ 0x474
 8000356:	6812      	ldr	r2, [r2, #0]
 8000358:	8952      	ldrh	r2, [r2, #10]
 800035a:	fb02 f303 	mul.w	r3, r2, r3
 800035e:	f8c7 3490 	str.w	r3, [r7, #1168]	@ 0x490
free_sectors = free_clusters * getFreeFs->csize;
 8000362:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8000366:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	895b      	ldrh	r3, [r3, #10]
 800036e:	461a      	mov	r2, r3
 8000370:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8000374:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	fb02 f303 	mul.w	r3, r2, r3
 800037e:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c

printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000382:	f8d7 3490 	ldr.w	r3, [r7, #1168]	@ 0x490
 8000386:	0859      	lsrs	r1, r3, #1
 8000388:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800038c:	085b      	lsrs	r3, r3, #1
 800038e:	461a      	mov	r2, r3
 8000390:	4841      	ldr	r0, [pc, #260]	@ (8000498 <main+0x208>)
 8000392:	f006 fc25 	bl	8006be0 <iprintf>
fflush(stdout);
 8000396:	4b3c      	ldr	r3, [pc, #240]	@ (8000488 <main+0x1f8>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	4618      	mov	r0, r3
 800039e:	f006 fb49 	bl	8006a34 <fflush>
//
//
//f_close(&fil);
//----------------------------------------------------------------------------------
//Now let's try and write a file "write.txt"
fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80003a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80003a6:	221a      	movs	r2, #26
 80003a8:	493c      	ldr	r1, [pc, #240]	@ (800049c <main+0x20c>)
 80003aa:	4618      	mov	r0, r3
 80003ac:	f005 fdae 	bl	8005f0c <f_open>
 80003b0:	4603      	mov	r3, r0
 80003b2:	f887 3497 	strb.w	r3, [r7, #1175]	@ 0x497
if(fres == FR_OK) {
 80003b6:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d109      	bne.n	80003d2 <main+0x142>
	printf("Opened 'write.txt' for writing\r\n");
 80003be:	4838      	ldr	r0, [pc, #224]	@ (80004a0 <main+0x210>)
 80003c0:	f006 fc76 	bl	8006cb0 <puts>
	fflush(stdout);
 80003c4:	4b30      	ldr	r3, [pc, #192]	@ (8000488 <main+0x1f8>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f006 fb32 	bl	8006a34 <fflush>
 80003d0:	e00b      	b.n	80003ea <main+0x15a>
} else {
	printf("f_open error (%i)\r\n", fres);
 80003d2:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 80003d6:	4619      	mov	r1, r3
 80003d8:	4832      	ldr	r0, [pc, #200]	@ (80004a4 <main+0x214>)
 80003da:	f006 fc01 	bl	8006be0 <iprintf>
	fflush(stdout);
 80003de:	4b2a      	ldr	r3, [pc, #168]	@ (8000488 <main+0x1f8>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f006 fb25 	bl	8006a34 <fflush>
}

//Copy in a string
strncpy((char*)readBuf, "a new file created", 19);
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4a2e      	ldr	r2, [pc, #184]	@ (80004a8 <main+0x218>)
 80003ee:	461c      	mov	r4, r3
 80003f0:	4615      	mov	r5, r2
 80003f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f6:	682b      	ldr	r3, [r5, #0]
 80003f8:	461a      	mov	r2, r3
 80003fa:	8022      	strh	r2, [r4, #0]
 80003fc:	3402      	adds	r4, #2
 80003fe:	0c1b      	lsrs	r3, r3, #16
 8000400:	7023      	strb	r3, [r4, #0]
UINT bytesWrote;
fres = f_write(&fil, readBuf, 19, &bytesWrote);
 8000402:	463b      	mov	r3, r7
 8000404:	1d39      	adds	r1, r7, #4
 8000406:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800040a:	2213      	movs	r2, #19
 800040c:	f005 ff38 	bl	8006280 <f_write>
 8000410:	4603      	mov	r3, r0
 8000412:	f887 3497 	strb.w	r3, [r7, #1175]	@ 0x497
if(fres == FR_OK) {
 8000416:	f897 3497 	ldrb.w	r3, [r7, #1175]	@ 0x497
 800041a:	2b00      	cmp	r3, #0
 800041c:	d10f      	bne.n	800043e <main+0x1ae>
	printf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 800041e:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8000422:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4619      	mov	r1, r3
 800042a:	4820      	ldr	r0, [pc, #128]	@ (80004ac <main+0x21c>)
 800042c:	f006 fbd8 	bl	8006be0 <iprintf>
	fflush(stdout);
 8000430:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <main+0x1f8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	4618      	mov	r0, r3
 8000438:	f006 fafc 	bl	8006a34 <fflush>
 800043c:	e008      	b.n	8000450 <main+0x1c0>
} else {
	printf("f_write error (%i)\r\n");
 800043e:	481c      	ldr	r0, [pc, #112]	@ (80004b0 <main+0x220>)
 8000440:	f006 fbce 	bl	8006be0 <iprintf>
	fflush(stdout);
 8000444:	4b10      	ldr	r3, [pc, #64]	@ (8000488 <main+0x1f8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	4618      	mov	r0, r3
 800044c:	f006 faf2 	bl	8006a34 <fflush>
}


f_close(&fil);
 8000450:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000454:	4618      	mov	r0, r3
 8000456:	f006 f906 	bl	8006666 <f_close>

//We're done, so de-mount the drive
f_mount(NULL, "", 0);
 800045a:	2200      	movs	r2, #0
 800045c:	490b      	ldr	r1, [pc, #44]	@ (800048c <main+0x1fc>)
 800045e:	2000      	movs	r0, #0
 8000460:	f005 fd0e 	bl	8005e80 <f_mount>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("You can close the project now");
 8000464:	4813      	ldr	r0, [pc, #76]	@ (80004b4 <main+0x224>)
 8000466:	f006 fbbb 	bl	8006be0 <iprintf>
	  fflush(stdout); //flushes out everything from stdout buffer
 800046a:	4b07      	ldr	r3, [pc, #28]	@ (8000488 <main+0x1f8>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	4618      	mov	r0, r3
 8000472:	f006 fadf 	bl	8006a34 <fflush>
	  HAL_Delay(5000);
 8000476:	f241 3088 	movw	r0, #5000	@ 0x1388
 800047a:	f000 fcbb 	bl	8000df4 <HAL_Delay>
	  printf("You can close the project now");
 800047e:	bf00      	nop
 8000480:	e7f0      	b.n	8000464 <main+0x1d4>
 8000482:	bf00      	nop
 8000484:	08007834 	.word	0x08007834
 8000488:	20000030 	.word	0x20000030
 800048c:	08007850 	.word	0x08007850
 8000490:	08007854 	.word	0x08007854
 8000494:	0800786c 	.word	0x0800786c
 8000498:	08007884 	.word	0x08007884
 800049c:	080078cc 	.word	0x080078cc
 80004a0:	080078d8 	.word	0x080078d8
 80004a4:	080078f8 	.word	0x080078f8
 80004a8:	0800790c 	.word	0x0800790c
 80004ac:	08007920 	.word	0x08007920
 80004b0:	08007944 	.word	0x08007944
 80004b4:	0800795c 	.word	0x0800795c

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b096      	sub	sp, #88	@ 0x58
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	2244      	movs	r2, #68	@ 0x44
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f006 fcd2 	bl	8006e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	463b      	mov	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004de:	f001 f979 	bl	80017d4 <HAL_PWREx_ControlVoltageScaling>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004e8:	f000 f9c8 	bl	800087c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004ec:	2310      	movs	r3, #16
 80004ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004f0:	2301      	movs	r3, #1
 80004f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004f8:	2360      	movs	r3, #96	@ 0x60
 80004fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fc:	2302      	movs	r3, #2
 80004fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000500:	2301      	movs	r3, #1
 8000502:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000504:	2301      	movs	r3, #1
 8000506:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000508:	2320      	movs	r3, #32
 800050a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800050c:	2302      	movs	r3, #2
 800050e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000510:	2302      	movs	r3, #2
 8000512:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000514:	2302      	movs	r3, #2
 8000516:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	4618      	mov	r0, r3
 800051e:	f001 f9bf 	bl	80018a0 <HAL_RCC_OscConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000528:	f000 f9a8 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052c:	230f      	movs	r3, #15
 800052e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000530:	2303      	movs	r3, #3
 8000532:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000538:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800053c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000542:	463b      	mov	r3, r7
 8000544:	2103      	movs	r1, #3
 8000546:	4618      	mov	r0, r3
 8000548:	f001 fdc4 	bl	80020d4 <HAL_RCC_ClockConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000552:	f000 f993 	bl	800087c <Error_Handler>
  }
}
 8000556:	bf00      	nop
 8000558:	3758      	adds	r7, #88	@ 0x58
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000564:	4b16      	ldr	r3, [pc, #88]	@ (80005c0 <MX_CAN1_Init+0x60>)
 8000566:	4a17      	ldr	r2, [pc, #92]	@ (80005c4 <MX_CAN1_Init+0x64>)
 8000568:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800056a:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <MX_CAN1_Init+0x60>)
 800056c:	2210      	movs	r2, #16
 800056e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000570:	4b13      	ldr	r3, [pc, #76]	@ (80005c0 <MX_CAN1_Init+0x60>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000576:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <MX_CAN1_Init+0x60>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800057c:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <MX_CAN1_Init+0x60>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000582:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <MX_CAN1_Init+0x60>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000588:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <MX_CAN1_Init+0x60>)
 800058a:	2200      	movs	r2, #0
 800058c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800058e:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <MX_CAN1_Init+0x60>)
 8000590:	2200      	movs	r2, #0
 8000592:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000594:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <MX_CAN1_Init+0x60>)
 8000596:	2200      	movs	r2, #0
 8000598:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <MX_CAN1_Init+0x60>)
 800059c:	2200      	movs	r2, #0
 800059e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <MX_CAN1_Init+0x60>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <MX_CAN1_Init+0x60>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <MX_CAN1_Init+0x60>)
 80005ae:	f000 fc45 	bl	8000e3c <HAL_CAN_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80005b8:	f000 f960 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000009c 	.word	0x2000009c
 80005c4:	40006400 	.word	0x40006400

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <MX_I2C1_Init+0x74>)
 80005ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000640 <MX_I2C1_Init+0x78>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <MX_I2C1_Init+0x74>)
 80005d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000644 <MX_I2C1_Init+0x7c>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_I2C1_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005de:	4b17      	ldr	r3, [pc, #92]	@ (800063c <MX_I2C1_Init+0x74>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_I2C1_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_I2C1_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_I2C1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_I2C1_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000602:	480e      	ldr	r0, [pc, #56]	@ (800063c <MX_I2C1_Init+0x74>)
 8000604:	f000 ffa6 	bl	8001554 <HAL_I2C_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800060e:	f000 f935 	bl	800087c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000612:	2100      	movs	r1, #0
 8000614:	4809      	ldr	r0, [pc, #36]	@ (800063c <MX_I2C1_Init+0x74>)
 8000616:	f001 f838 	bl	800168a <HAL_I2CEx_ConfigAnalogFilter>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000620:	f000 f92c 	bl	800087c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000624:	2100      	movs	r1, #0
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_I2C1_Init+0x74>)
 8000628:	f001 f87a 	bl	8001720 <HAL_I2CEx_ConfigDigitalFilter>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000632:	f000 f923 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000c4 	.word	0x200000c4
 8000640:	40005400 	.word	0x40005400
 8000644:	00b07cb4 	.word	0x00b07cb4

08000648 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800064c:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <MX_SPI1_Init+0x74>)
 800064e:	4a1c      	ldr	r2, [pc, #112]	@ (80006c0 <MX_SPI1_Init+0x78>)
 8000650:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000652:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <MX_SPI1_Init+0x74>)
 8000654:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000658:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800065a:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <MX_SPI1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000660:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <MX_SPI1_Init+0x74>)
 8000662:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000666:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <MX_SPI1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800066e:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <MX_SPI1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000674:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_SPI1_Init+0x74>)
 8000676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800067a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_SPI1_Init+0x74>)
 800067e:	2238      	movs	r2, #56	@ 0x38
 8000680:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_SPI1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_SPI1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <MX_SPI1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_SPI1_Init+0x74>)
 8000696:	2207      	movs	r2, #7
 8000698:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800069a:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <MX_SPI1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_SPI1_Init+0x74>)
 80006a2:	2208      	movs	r2, #8
 80006a4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	@ (80006bc <MX_SPI1_Init+0x74>)
 80006a8:	f002 fbca 	bl	8002e40 <HAL_SPI_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 f8e3 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000118 	.word	0x20000118
 80006c0:	40013000 	.word	0x40013000

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	@ 0x30
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	4b64      	ldr	r3, [pc, #400]	@ (800086c <MX_GPIO_Init+0x1a8>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	4a63      	ldr	r2, [pc, #396]	@ (800086c <MX_GPIO_Init+0x1a8>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e6:	4b61      	ldr	r3, [pc, #388]	@ (800086c <MX_GPIO_Init+0x1a8>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	4b5e      	ldr	r3, [pc, #376]	@ (800086c <MX_GPIO_Init+0x1a8>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	4a5d      	ldr	r2, [pc, #372]	@ (800086c <MX_GPIO_Init+0x1a8>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fe:	4b5b      	ldr	r3, [pc, #364]	@ (800086c <MX_GPIO_Init+0x1a8>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b58      	ldr	r3, [pc, #352]	@ (800086c <MX_GPIO_Init+0x1a8>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	4a57      	ldr	r2, [pc, #348]	@ (800086c <MX_GPIO_Init+0x1a8>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000716:	4b55      	ldr	r3, [pc, #340]	@ (800086c <MX_GPIO_Init+0x1a8>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b52      	ldr	r3, [pc, #328]	@ (800086c <MX_GPIO_Init+0x1a8>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a51      	ldr	r2, [pc, #324]	@ (800086c <MX_GPIO_Init+0x1a8>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b4f      	ldr	r3, [pc, #316]	@ (800086c <MX_GPIO_Init+0x1a8>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800073a:	4b4c      	ldr	r3, [pc, #304]	@ (800086c <MX_GPIO_Init+0x1a8>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a4b      	ldr	r2, [pc, #300]	@ (800086c <MX_GPIO_Init+0x1a8>)
 8000740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b49      	ldr	r3, [pc, #292]	@ (800086c <MX_GPIO_Init+0x1a8>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000752:	f001 f895 	bl	8001880 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	4b45      	ldr	r3, [pc, #276]	@ (800086c <MX_GPIO_Init+0x1a8>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	4a44      	ldr	r2, [pc, #272]	@ (800086c <MX_GPIO_Init+0x1a8>)
 800075c:	f043 0308 	orr.w	r3, r3, #8
 8000760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000762:	4b42      	ldr	r3, [pc, #264]	@ (800086c <MX_GPIO_Init+0x1a8>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	2120      	movs	r1, #32
 8000772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000776:	f000 fed5 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000780:	483b      	ldr	r0, [pc, #236]	@ (8000870 <MX_GPIO_Init+0x1ac>)
 8000782:	f000 fecf 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2140      	movs	r1, #64	@ 0x40
 800078a:	483a      	ldr	r0, [pc, #232]	@ (8000874 <MX_GPIO_Init+0x1b0>)
 800078c:	f000 feca 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000796:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800079a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4834      	ldr	r0, [pc, #208]	@ (8000878 <MX_GPIO_Init+0x1b4>)
 80007a8:	f000 fd2a 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80007ac:	2320      	movs	r3, #32
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c6:	f000 fd1b 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80007ca:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4823      	ldr	r0, [pc, #140]	@ (8000870 <MX_GPIO_Init+0x1ac>)
 80007e4:	f000 fd0c 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007e8:	2320      	movs	r3, #32
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	481e      	ldr	r0, [pc, #120]	@ (8000874 <MX_GPIO_Init+0x1b0>)
 80007fc:	f000 fd00 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000800:	2340      	movs	r3, #64	@ 0x40
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4817      	ldr	r0, [pc, #92]	@ (8000874 <MX_GPIO_Init+0x1b0>)
 8000818:	f000 fcf2 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800081c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800082e:	2308      	movs	r3, #8
 8000830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	480e      	ldr	r0, [pc, #56]	@ (8000874 <MX_GPIO_Init+0x1b0>)
 800083a:	f000 fce1 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800083e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000850:	230a      	movs	r3, #10
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085e:	f000 fccf 	bl	8001200 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000862:	bf00      	nop
 8000864:	3730      	adds	r7, #48	@ 0x30
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000
 8000870:	48000400 	.word	0x48000400
 8000874:	48001800 	.word	0x48001800
 8000878:	48000800 	.word	0x48000800

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <Error_Handler+0x8>

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <HAL_MspInit+0x44>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000892:	4a0e      	ldr	r2, [pc, #56]	@ (80008cc <HAL_MspInit+0x44>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6613      	str	r3, [r2, #96]	@ 0x60
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <HAL_MspInit+0x44>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <HAL_MspInit+0x44>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008aa:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <HAL_MspInit+0x44>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_MspInit+0x44>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a17      	ldr	r2, [pc, #92]	@ (800094c <HAL_CAN_MspInit+0x7c>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d127      	bne.n	8000942 <HAL_CAN_MspInit+0x72>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <HAL_CAN_MspInit+0x80>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f6:	4a16      	ldr	r2, [pc, #88]	@ (8000950 <HAL_CAN_MspInit+0x80>)
 80008f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <HAL_CAN_MspInit+0x80>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <HAL_CAN_MspInit+0x80>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a10      	ldr	r2, [pc, #64]	@ (8000950 <HAL_CAN_MspInit+0x80>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <HAL_CAN_MspInit+0x80>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000922:	2303      	movs	r3, #3
 8000924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000932:	2309      	movs	r3, #9
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	@ (8000954 <HAL_CAN_MspInit+0x84>)
 800093e:	f000 fc5f 	bl	8001200 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000942:	bf00      	nop
 8000944:	3728      	adds	r7, #40	@ 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40006400 	.word	0x40006400
 8000950:	40021000 	.word	0x40021000
 8000954:	48000c00 	.word	0x48000c00

08000958 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b0ac      	sub	sp, #176	@ 0xb0
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	228c      	movs	r2, #140	@ 0x8c
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f006 fa79 	bl	8006e70 <memset>
  if(hi2c->Instance==I2C1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a22      	ldr	r2, [pc, #136]	@ (8000a0c <HAL_I2C_MspInit+0xb4>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d13d      	bne.n	8000a04 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000988:	2340      	movs	r3, #64	@ 0x40
 800098a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800098c:	2300      	movs	r3, #0
 800098e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fd89 	bl	80024ac <HAL_RCCEx_PeriphCLKConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009a0:	f7ff ff6c 	bl	800087c <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <HAL_I2C_MspInit+0xb8>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a8:	4a19      	ldr	r2, [pc, #100]	@ (8000a10 <HAL_I2C_MspInit+0xb8>)
 80009aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b0:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <HAL_I2C_MspInit+0xb8>)
 80009b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80009bc:	f000 ff60 	bl	8001880 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80009c0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80009c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c8:	2312      	movs	r3, #18
 80009ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009da:	2304      	movs	r3, #4
 80009dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009e4:	4619      	mov	r1, r3
 80009e6:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <HAL_I2C_MspInit+0xbc>)
 80009e8:	f000 fc0a 	bl	8001200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <HAL_I2C_MspInit+0xb8>)
 80009ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <HAL_I2C_MspInit+0xb8>)
 80009f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <HAL_I2C_MspInit+0xb8>)
 80009fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a04:	bf00      	nop
 8000a06:	37b0      	adds	r7, #176	@ 0xb0
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48001800 	.word	0x48001800

08000a18 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <HAL_SPI_MspInit+0x7c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d128      	bne.n	8000a8c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <HAL_SPI_MspInit+0x80>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3e:	4a16      	ldr	r2, [pc, #88]	@ (8000a98 <HAL_SPI_MspInit+0x80>)
 8000a40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <HAL_SPI_MspInit+0x80>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <HAL_SPI_MspInit+0x80>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a10      	ldr	r2, [pc, #64]	@ (8000a98 <HAL_SPI_MspInit+0x80>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <HAL_SPI_MspInit+0x80>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000a6a:	23c2      	movs	r3, #194	@ 0xc2
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a88:	f000 fbba 	bl	8001200 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	@ 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40013000 	.word	0x40013000
 8000a98:	40021000 	.word	0x40021000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af2:	f000 f95f 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <ITM_SendChar>:

//ITM Register Address
#define ITM_STIMULUS_PORT0		*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN			*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch){
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	// Enable TRCENA
	DEMCR |= (1<<24);
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <ITM_SendChar+0x48>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b44 <ITM_SendChar+0x48>)
 8000b0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b10:	6013      	str	r3, [r2, #0]

	// Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <ITM_SendChar+0x4c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0c      	ldr	r2, [pc, #48]	@ (8000b48 <ITM_SendChar+0x4c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6013      	str	r3, [r2, #0]

	//Read FIFO Status in bit[0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b1e:	bf00      	nop
 8000b20:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0f8      	beq.n	8000b20 <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 8000b2e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	6013      	str	r3, [r2, #0]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000edfc 	.word	0xe000edfc
 8000b48:	e0000e00 	.word	0xe0000e00

08000b4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	e00a      	b.n	8000b74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b5e:	f3af 8000 	nop.w
 8000b62:	4601      	mov	r1, r0
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	b2ca      	uxtb	r2, r1
 8000b6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf0      	blt.n	8000b5e <_read+0x12>
  }

  return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e009      	b.n	8000bac <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	60ba      	str	r2, [r7, #8]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ffab 	bl	8000afc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbf1      	blt.n	8000b98 <_write+0x12>
  }
  return len;
 8000bb4:	687b      	ldr	r3, [r7, #4]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_close>:

int _close(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000be6:	605a      	str	r2, [r3, #4]
  return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_isatty>:

int _isatty(int file)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	@ (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	@ (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c58:	f006 f958 	bl	8006f0c <__errno>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	220c      	movs	r2, #12
 8000c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	e009      	b.n	8000c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c68:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a05      	ldr	r2, [pc, #20]	@ (8000c8c <_sbrk+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20040000 	.word	0x20040000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	2000017c 	.word	0x2000017c
 8000c90:	20000318 	.word	0x20000318

08000c94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cbc:	f7ff ffea 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	@ (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f006 f917 	bl	8006f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cea:	f7ff fad1 	bl	8000290 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000cfc:	08007ac4 	.word	0x08007ac4
  ldr r2, =_sbss
 8000d00:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d04:	20000318 	.word	0x20000318

08000d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_2_IRQHandler>

08000d0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 fa3f 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f80e 	bl	8000d3c <HAL_InitTick>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	e001      	b.n	8000d30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d2c:	f7ff fdac 	bl	8000888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d30:	79fb      	ldrb	r3, [r7, #7]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d48:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <HAL_InitTick+0x6c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d023      	beq.n	8000d98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d50:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <HAL_InitTick+0x70>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <HAL_InitTick+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fa3d 	bl	80011e6 <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10f      	bne.n	8000d92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b0f      	cmp	r3, #15
 8000d76:	d809      	bhi.n	8000d8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f000 fa15 	bl	80011ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d84:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <HAL_InitTick+0x74>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e007      	b.n	8000d9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
 8000d90:	e004      	b.n	8000d9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e001      	b.n	8000d9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000180 	.word	0x20000180

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	@ (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000180 	.word	0x20000180

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff ffee 	bl	8000ddc <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d005      	beq.n	8000e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <HAL_Delay+0x44>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1a:	bf00      	nop
 8000e1c:	f7ff ffde 	bl	8000ddc <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8f7      	bhi.n	8000e1c <HAL_Delay+0x28>
  {
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008

08000e3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e0ed      	b.n	800102a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d102      	bne.n	8000e60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fd38 	bl	80008d0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 0201 	orr.w	r2, r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e70:	f7ff ffb4 	bl	8000ddc <HAL_GetTick>
 8000e74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e76:	e012      	b.n	8000e9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e78:	f7ff ffb0 	bl	8000ddc <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b0a      	cmp	r3, #10
 8000e84:	d90b      	bls.n	8000e9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2205      	movs	r2, #5
 8000e96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e0c5      	b.n	800102a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0e5      	beq.n	8000e78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0202 	bic.w	r2, r2, #2
 8000eba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ebc:	f7ff ff8e 	bl	8000ddc <HAL_GetTick>
 8000ec0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ec2:	e012      	b.n	8000eea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ec4:	f7ff ff8a 	bl	8000ddc <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b0a      	cmp	r3, #10
 8000ed0:	d90b      	bls.n	8000eea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2205      	movs	r2, #5
 8000ee2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e09f      	b.n	800102a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1e5      	bne.n	8000ec4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7e1b      	ldrb	r3, [r3, #24]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d108      	bne.n	8000f12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	e007      	b.n	8000f22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7e5b      	ldrb	r3, [r3, #25]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d108      	bne.n	8000f3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	e007      	b.n	8000f4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7e9b      	ldrb	r3, [r3, #26]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d108      	bne.n	8000f66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0220 	orr.w	r2, r2, #32
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	e007      	b.n	8000f76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0220 	bic.w	r2, r2, #32
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7edb      	ldrb	r3, [r3, #27]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d108      	bne.n	8000f90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0210 	bic.w	r2, r2, #16
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	e007      	b.n	8000fa0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0210 	orr.w	r2, r2, #16
 8000f9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7f1b      	ldrb	r3, [r3, #28]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d108      	bne.n	8000fba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f042 0208 	orr.w	r2, r2, #8
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	e007      	b.n	8000fca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 0208 	bic.w	r2, r2, #8
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7f5b      	ldrb	r3, [r3, #29]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d108      	bne.n	8000fe4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f042 0204 	orr.w	r2, r2, #4
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e007      	b.n	8000ff4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0204 	bic.w	r2, r2, #4
 8000ff2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	ea42 0103 	orr.w	r1, r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	1e5a      	subs	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	@ (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	@ (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	@ 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	@ 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f7ff ff8e 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff47 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff5c 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff8e 	bl	80010ec <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5d 	bl	8001098 <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffb0 	bl	8001154 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120e:	e166      	b.n	80014de <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8158 	beq.w	80014d8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d005      	beq.n	8001240 <HAL_GPIO_Init+0x40>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d130      	bne.n	80012a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001276:	2201      	movs	r2, #1
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	091b      	lsrs	r3, r3, #4
 800128c:	f003 0201 	and.w	r2, r3, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d017      	beq.n	80012de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	2203      	movs	r2, #3
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d123      	bne.n	8001332 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	220f      	movs	r2, #15
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	08da      	lsrs	r2, r3, #3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3208      	adds	r2, #8
 800132c:	6939      	ldr	r1, [r7, #16]
 800132e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0203 	and.w	r2, r3, #3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 80b2 	beq.w	80014d8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001374:	4b61      	ldr	r3, [pc, #388]	@ (80014fc <HAL_GPIO_Init+0x2fc>)
 8001376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001378:	4a60      	ldr	r2, [pc, #384]	@ (80014fc <HAL_GPIO_Init+0x2fc>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001380:	4b5e      	ldr	r3, [pc, #376]	@ (80014fc <HAL_GPIO_Init+0x2fc>)
 8001382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800138c:	4a5c      	ldr	r2, [pc, #368]	@ (8001500 <HAL_GPIO_Init+0x300>)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013b6:	d02b      	beq.n	8001410 <HAL_GPIO_Init+0x210>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a52      	ldr	r2, [pc, #328]	@ (8001504 <HAL_GPIO_Init+0x304>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d025      	beq.n	800140c <HAL_GPIO_Init+0x20c>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a51      	ldr	r2, [pc, #324]	@ (8001508 <HAL_GPIO_Init+0x308>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d01f      	beq.n	8001408 <HAL_GPIO_Init+0x208>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a50      	ldr	r2, [pc, #320]	@ (800150c <HAL_GPIO_Init+0x30c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d019      	beq.n	8001404 <HAL_GPIO_Init+0x204>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a4f      	ldr	r2, [pc, #316]	@ (8001510 <HAL_GPIO_Init+0x310>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d013      	beq.n	8001400 <HAL_GPIO_Init+0x200>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a4e      	ldr	r2, [pc, #312]	@ (8001514 <HAL_GPIO_Init+0x314>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d00d      	beq.n	80013fc <HAL_GPIO_Init+0x1fc>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a4d      	ldr	r2, [pc, #308]	@ (8001518 <HAL_GPIO_Init+0x318>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d007      	beq.n	80013f8 <HAL_GPIO_Init+0x1f8>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a4c      	ldr	r2, [pc, #304]	@ (800151c <HAL_GPIO_Init+0x31c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_GPIO_Init+0x1f4>
 80013f0:	2307      	movs	r3, #7
 80013f2:	e00e      	b.n	8001412 <HAL_GPIO_Init+0x212>
 80013f4:	2308      	movs	r3, #8
 80013f6:	e00c      	b.n	8001412 <HAL_GPIO_Init+0x212>
 80013f8:	2306      	movs	r3, #6
 80013fa:	e00a      	b.n	8001412 <HAL_GPIO_Init+0x212>
 80013fc:	2305      	movs	r3, #5
 80013fe:	e008      	b.n	8001412 <HAL_GPIO_Init+0x212>
 8001400:	2304      	movs	r3, #4
 8001402:	e006      	b.n	8001412 <HAL_GPIO_Init+0x212>
 8001404:	2303      	movs	r3, #3
 8001406:	e004      	b.n	8001412 <HAL_GPIO_Init+0x212>
 8001408:	2302      	movs	r3, #2
 800140a:	e002      	b.n	8001412 <HAL_GPIO_Init+0x212>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <HAL_GPIO_Init+0x212>
 8001410:	2300      	movs	r3, #0
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	f002 0203 	and.w	r2, r2, #3
 8001418:	0092      	lsls	r2, r2, #2
 800141a:	4093      	lsls	r3, r2
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001422:	4937      	ldr	r1, [pc, #220]	@ (8001500 <HAL_GPIO_Init+0x300>)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3302      	adds	r3, #2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001430:	4b3b      	ldr	r3, [pc, #236]	@ (8001520 <HAL_GPIO_Init+0x320>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001454:	4a32      	ldr	r2, [pc, #200]	@ (8001520 <HAL_GPIO_Init+0x320>)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800145a:	4b31      	ldr	r3, [pc, #196]	@ (8001520 <HAL_GPIO_Init+0x320>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800147e:	4a28      	ldr	r2, [pc, #160]	@ (8001520 <HAL_GPIO_Init+0x320>)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001484:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <HAL_GPIO_Init+0x320>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001520 <HAL_GPIO_Init+0x320>)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <HAL_GPIO_Init+0x320>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014d2:	4a13      	ldr	r2, [pc, #76]	@ (8001520 <HAL_GPIO_Init+0x320>)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3301      	adds	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f47f ae91 	bne.w	8001210 <HAL_GPIO_Init+0x10>
  }
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010000 	.word	0x40010000
 8001504:	48000400 	.word	0x48000400
 8001508:	48000800 	.word	0x48000800
 800150c:	48000c00 	.word	0x48000c00
 8001510:	48001000 	.word	0x48001000
 8001514:	48001400 	.word	0x48001400
 8001518:	48001800 	.word	0x48001800
 800151c:	48001c00 	.word	0x48001c00
 8001520:	40010400 	.word	0x40010400

08001524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
 8001530:	4613      	mov	r3, r2
 8001532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001534:	787b      	ldrb	r3, [r7, #1]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001540:	e002      	b.n	8001548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e08d      	b.n	8001682 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d106      	bne.n	8001580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff f9ec 	bl	8000958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2224      	movs	r2, #36	@ 0x24
 8001584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0201 	bic.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d107      	bne.n	80015ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	e006      	b.n	80015dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80015da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d108      	bne.n	80015f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	e007      	b.n	8001606 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001604:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001614:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001618:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001628:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69d9      	ldr	r1, [r3, #28]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1a      	ldr	r2, [r3, #32]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2220      	movs	r2, #32
 800166e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b20      	cmp	r3, #32
 800169e:	d138      	bne.n	8001712 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e032      	b.n	8001714 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2224      	movs	r2, #36	@ 0x24
 80016ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0201 	bic.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80016dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0201 	orr.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2220      	movs	r2, #32
 8001702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001712:	2302      	movs	r3, #2
  }
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b20      	cmp	r3, #32
 8001734:	d139      	bne.n	80017aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001740:	2302      	movs	r3, #2
 8001742:	e033      	b.n	80017ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2224      	movs	r2, #36	@ 0x24
 8001750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001772:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0201 	orr.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2220      	movs	r2, #32
 800179a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e000      	b.n	80017ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017aa:	2302      	movs	r3, #2
  }
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017bc:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40007000 	.word	0x40007000

080017d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017e2:	d130      	bne.n	8001846 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017e4:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017f0:	d038      	beq.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001800:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001802:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2232      	movs	r2, #50	@ 0x32
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	4a1b      	ldr	r2, [pc, #108]	@ (800187c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	0c9b      	lsrs	r3, r3, #18
 8001814:	3301      	adds	r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001818:	e002      	b.n	8001820 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3b01      	subs	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001820:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800182c:	d102      	bne.n	8001834 <HAL_PWREx_ControlVoltageScaling+0x60>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f2      	bne.n	800181a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800183c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001840:	d110      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e00f      	b.n	8001866 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001846:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800184e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001852:	d007      	beq.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001854:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800185c:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001862:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40007000 	.word	0x40007000
 8001878:	20000000 	.word	0x20000000
 800187c:	431bde83 	.word	0x431bde83

08001880 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_PWREx_EnableVddIO2+0x1c>)
 800188a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800188e:	6053      	str	r3, [r2, #4]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40007000 	.word	0x40007000

080018a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	f000 bc08 	b.w	80020c4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018b4:	4b96      	ldr	r3, [pc, #600]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018be:	4b94      	ldr	r3, [pc, #592]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80e4 	beq.w	8001a9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d007      	beq.n	80018ec <HAL_RCC_OscConfig+0x4c>
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	f040 808b 	bne.w	80019fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	f040 8087 	bne.w	80019fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ec:	4b88      	ldr	r3, [pc, #544]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_OscConfig+0x64>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e3df      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1a      	ldr	r2, [r3, #32]
 8001908:	4b81      	ldr	r3, [pc, #516]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d004      	beq.n	800191e <HAL_RCC_OscConfig+0x7e>
 8001914:	4b7e      	ldr	r3, [pc, #504]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800191c:	e005      	b.n	800192a <HAL_RCC_OscConfig+0x8a>
 800191e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800192a:	4293      	cmp	r3, r2
 800192c:	d223      	bcs.n	8001976 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fd5a 	bl	80023ec <RCC_SetFlashLatencyFromMSIRange>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e3c0      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001942:	4b73      	ldr	r3, [pc, #460]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a72      	ldr	r2, [pc, #456]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b70      	ldr	r3, [pc, #448]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	496d      	ldr	r1, [pc, #436]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001960:	4b6b      	ldr	r3, [pc, #428]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	4968      	ldr	r1, [pc, #416]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
 8001974:	e025      	b.n	80019c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001976:	4b66      	ldr	r3, [pc, #408]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a65      	ldr	r2, [pc, #404]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 800197c:	f043 0308 	orr.w	r3, r3, #8
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b63      	ldr	r3, [pc, #396]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4960      	ldr	r1, [pc, #384]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001994:	4b5e      	ldr	r3, [pc, #376]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	495b      	ldr	r1, [pc, #364]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fd1a 	bl	80023ec <RCC_SetFlashLatencyFromMSIRange>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e380      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019c2:	f000 fc87 	bl	80022d4 <HAL_RCC_GetSysClockFreq>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b51      	ldr	r3, [pc, #324]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	4950      	ldr	r1, [pc, #320]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 80019d4:	5ccb      	ldrb	r3, [r1, r3]
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	4a4e      	ldr	r2, [pc, #312]	@ (8001b18 <HAL_RCC_OscConfig+0x278>)
 80019e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019e2:	4b4e      	ldr	r3, [pc, #312]	@ (8001b1c <HAL_RCC_OscConfig+0x27c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f9a8 	bl	8000d3c <HAL_InitTick>
 80019ec:	4603      	mov	r3, r0
 80019ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d052      	beq.n	8001a9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	e364      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d032      	beq.n	8001a68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a02:	4b43      	ldr	r3, [pc, #268]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a42      	ldr	r2, [pc, #264]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f9e5 	bl	8000ddc <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a16:	f7ff f9e1 	bl	8000ddc <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e34d      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a28:	4b39      	ldr	r3, [pc, #228]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a34:	4b36      	ldr	r3, [pc, #216]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a35      	ldr	r2, [pc, #212]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	f043 0308 	orr.w	r3, r3, #8
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b33      	ldr	r3, [pc, #204]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4930      	ldr	r1, [pc, #192]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a52:	4b2f      	ldr	r3, [pc, #188]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	492b      	ldr	r1, [pc, #172]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
 8001a66:	e01a      	b.n	8001a9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a68:	4b29      	ldr	r3, [pc, #164]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a28      	ldr	r2, [pc, #160]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a74:	f7ff f9b2 	bl	8000ddc <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a7c:	f7ff f9ae 	bl	8000ddc <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e31a      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a8e:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x1dc>
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d073      	beq.n	8001b92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_OscConfig+0x21c>
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d10e      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d10b      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d063      	beq.n	8001b90 <HAL_RCC_OscConfig+0x2f0>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d15f      	bne.n	8001b90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e2f7      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001adc:	d106      	bne.n	8001aec <HAL_RCC_OscConfig+0x24c>
 8001ade:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e025      	b.n	8001b38 <HAL_RCC_OscConfig+0x298>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001af4:	d114      	bne.n	8001b20 <HAL_RCC_OscConfig+0x280>
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b03      	ldr	r3, [pc, #12]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a02      	ldr	r2, [pc, #8]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e013      	b.n	8001b38 <HAL_RCC_OscConfig+0x298>
 8001b10:	40021000 	.word	0x40021000
 8001b14:	080079c0 	.word	0x080079c0
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	4ba0      	ldr	r3, [pc, #640]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a9f      	ldr	r2, [pc, #636]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b9d      	ldr	r3, [pc, #628]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a9c      	ldr	r2, [pc, #624]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f94c 	bl	8000ddc <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff f948 	bl	8000ddc <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	@ 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e2b4      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b5a:	4b92      	ldr	r3, [pc, #584]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x2a8>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f938 	bl	8000ddc <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff f934 	bl	8000ddc <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	@ 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e2a0      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b82:	4b88      	ldr	r3, [pc, #544]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x2d0>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d060      	beq.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x310>
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2b0c      	cmp	r3, #12
 8001ba8:	d119      	bne.n	8001bde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d116      	bne.n	8001bde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb0:	4b7c      	ldr	r3, [pc, #496]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x328>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e27d      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b76      	ldr	r3, [pc, #472]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	4973      	ldr	r1, [pc, #460]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bdc:	e040      	b.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d023      	beq.n	8001c2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be6:	4b6f      	ldr	r3, [pc, #444]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6e      	ldr	r2, [pc, #440]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7ff f8f3 	bl	8000ddc <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff f8ef 	bl	8000ddc <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e25b      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0c:	4b65      	ldr	r3, [pc, #404]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c18:	4b62      	ldr	r3, [pc, #392]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	495f      	ldr	r1, [pc, #380]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
 8001c2c:	e018      	b.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a5c      	ldr	r2, [pc, #368]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff f8cf 	bl	8000ddc <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c42:	f7ff f8cb 	bl	8000ddc <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e237      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c54:	4b53      	ldr	r3, [pc, #332]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f0      	bne.n	8001c42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d03c      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d01c      	beq.n	8001cae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c74:	4b4b      	ldr	r3, [pc, #300]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c7a:	4a4a      	ldr	r2, [pc, #296]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff f8aa 	bl	8000ddc <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7ff f8a6 	bl	8000ddc <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e212      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c9e:	4b41      	ldr	r3, [pc, #260]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ef      	beq.n	8001c8c <HAL_RCC_OscConfig+0x3ec>
 8001cac:	e01b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	4b3d      	ldr	r3, [pc, #244]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb4:	4a3b      	ldr	r2, [pc, #236]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001cb6:	f023 0301 	bic.w	r3, r3, #1
 8001cba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f88d 	bl	8000ddc <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc6:	f7ff f889 	bl	8000ddc <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e1f5      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd8:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ef      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 80a6 	beq.w	8001e40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10d      	bne.n	8001d20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d04:	4b27      	ldr	r3, [pc, #156]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d08:	4a26      	ldr	r2, [pc, #152]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d10:	4b24      	ldr	r3, [pc, #144]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d20:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <HAL_RCC_OscConfig+0x508>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d118      	bne.n	8001d5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001da8 <HAL_RCC_OscConfig+0x508>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1d      	ldr	r2, [pc, #116]	@ (8001da8 <HAL_RCC_OscConfig+0x508>)
 8001d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d38:	f7ff f850 	bl	8000ddc <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d40:	f7ff f84c 	bl	8000ddc <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e1b8      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <HAL_RCC_OscConfig+0x508>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d108      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4d8>
 8001d66:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d76:	e029      	b.n	8001dcc <HAL_RCC_OscConfig+0x52c>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d115      	bne.n	8001dac <HAL_RCC_OscConfig+0x50c>
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d86:	4a07      	ldr	r2, [pc, #28]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d90:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d96:	4a03      	ldr	r2, [pc, #12]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001da0:	e014      	b.n	8001dcc <HAL_RCC_OscConfig+0x52c>
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40007000 	.word	0x40007000
 8001dac:	4b9d      	ldr	r3, [pc, #628]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db2:	4a9c      	ldr	r2, [pc, #624]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dbc:	4b99      	ldr	r3, [pc, #612]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc2:	4a98      	ldr	r2, [pc, #608]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d016      	beq.n	8001e02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff f802 	bl	8000ddc <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7fe fffe 	bl	8000ddc <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e168      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df2:	4b8c      	ldr	r3, [pc, #560]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ed      	beq.n	8001ddc <HAL_RCC_OscConfig+0x53c>
 8001e00:	e015      	b.n	8001e2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e02:	f7fe ffeb 	bl	8000ddc <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe ffe7 	bl	8000ddc <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e151      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e20:	4b80      	ldr	r3, [pc, #512]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ed      	bne.n	8001e0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e2e:	7ffb      	ldrb	r3, [r7, #31]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e34:	4b7b      	ldr	r3, [pc, #492]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e38:	4a7a      	ldr	r2, [pc, #488]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d03c      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01c      	beq.n	8001e8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e54:	4b73      	ldr	r3, [pc, #460]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e5a:	4a72      	ldr	r2, [pc, #456]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e64:	f7fe ffba 	bl	8000ddc <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e6c:	f7fe ffb6 	bl	8000ddc <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e122      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e7e:	4b69      	ldr	r3, [pc, #420]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0ef      	beq.n	8001e6c <HAL_RCC_OscConfig+0x5cc>
 8001e8c:	e01b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e8e:	4b65      	ldr	r3, [pc, #404]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e94:	4a63      	ldr	r2, [pc, #396]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9e:	f7fe ff9d 	bl	8000ddc <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ea6:	f7fe ff99 	bl	8000ddc <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e105      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001eb8:	4b5a      	ldr	r3, [pc, #360]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1ef      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80f9 	beq.w	80020c2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	f040 80cf 	bne.w	8002078 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001eda:	4b52      	ldr	r3, [pc, #328]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f003 0203 	and.w	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d12c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d123      	bne.n	8001f48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d11b      	bne.n	8001f48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d113      	bne.n	8001f48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d109      	bne.n	8001f48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	085b      	lsrs	r3, r3, #1
 8001f40:	3b01      	subs	r3, #1
 8001f42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d071      	beq.n	800202c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b0c      	cmp	r3, #12
 8001f4c:	d068      	beq.n	8002020 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f4e:	4b35      	ldr	r3, [pc, #212]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d105      	bne.n	8001f66 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f5a:	4b32      	ldr	r3, [pc, #200]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0ac      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001f70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f76:	f7fe ff31 	bl	8000ddc <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7fe ff2d 	bl	8000ddc <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e099      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f90:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9c:	4b21      	ldr	r3, [pc, #132]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	4b21      	ldr	r3, [pc, #132]	@ (8002028 <HAL_RCC_OscConfig+0x788>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001fac:	3a01      	subs	r2, #1
 8001fae:	0112      	lsls	r2, r2, #4
 8001fb0:	4311      	orrs	r1, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001fb6:	0212      	lsls	r2, r2, #8
 8001fb8:	4311      	orrs	r1, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fbe:	0852      	lsrs	r2, r2, #1
 8001fc0:	3a01      	subs	r2, #1
 8001fc2:	0552      	lsls	r2, r2, #21
 8001fc4:	4311      	orrs	r1, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fca:	0852      	lsrs	r2, r2, #1
 8001fcc:	3a01      	subs	r2, #1
 8001fce:	0652      	lsls	r2, r2, #25
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fd6:	06d2      	lsls	r2, r2, #27
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	4912      	ldr	r1, [pc, #72]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fe0:	4b10      	ldr	r3, [pc, #64]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fec:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001ff2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ff6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ff8:	f7fe fef0 	bl	8000ddc <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002000:	f7fe feec 	bl	8000ddc <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e058      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002012:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800201e:	e050      	b.n	80020c2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e04f      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
 8002024:	40021000 	.word	0x40021000
 8002028:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202c:	4b27      	ldr	r3, [pc, #156]	@ (80020cc <HAL_RCC_OscConfig+0x82c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d144      	bne.n	80020c2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002038:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <HAL_RCC_OscConfig+0x82c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a23      	ldr	r2, [pc, #140]	@ (80020cc <HAL_RCC_OscConfig+0x82c>)
 800203e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002042:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002044:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <HAL_RCC_OscConfig+0x82c>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4a20      	ldr	r2, [pc, #128]	@ (80020cc <HAL_RCC_OscConfig+0x82c>)
 800204a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800204e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002050:	f7fe fec4 	bl	8000ddc <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002058:	f7fe fec0 	bl	8000ddc <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e02c      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206a:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <HAL_RCC_OscConfig+0x82c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x7b8>
 8002076:	e024      	b.n	80020c2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2b0c      	cmp	r3, #12
 800207c:	d01f      	beq.n	80020be <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <HAL_RCC_OscConfig+0x82c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a12      	ldr	r2, [pc, #72]	@ (80020cc <HAL_RCC_OscConfig+0x82c>)
 8002084:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7fe fea7 	bl	8000ddc <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7fe fea3 	bl	8000ddc <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e00f      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a4:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <HAL_RCC_OscConfig+0x82c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f0      	bne.n	8002092 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_RCC_OscConfig+0x82c>)
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	4905      	ldr	r1, [pc, #20]	@ (80020cc <HAL_RCC_OscConfig+0x82c>)
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_RCC_OscConfig+0x830>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	60cb      	str	r3, [r1, #12]
 80020bc:	e001      	b.n	80020c2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3720      	adds	r7, #32
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	feeefffc 	.word	0xfeeefffc

080020d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0e7      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e8:	4b75      	ldr	r3, [pc, #468]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d910      	bls.n	8002118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b72      	ldr	r3, [pc, #456]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 0207 	bic.w	r2, r3, #7
 80020fe:	4970      	ldr	r1, [pc, #448]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b6e      	ldr	r3, [pc, #440]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0cf      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d010      	beq.n	8002146 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	4b66      	ldr	r3, [pc, #408]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002130:	429a      	cmp	r2, r3
 8002132:	d908      	bls.n	8002146 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b63      	ldr	r3, [pc, #396]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4960      	ldr	r1, [pc, #384]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d04c      	beq.n	80021ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215a:	4b5a      	ldr	r3, [pc, #360]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d121      	bne.n	80021aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0a6      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002172:	4b54      	ldr	r3, [pc, #336]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d115      	bne.n	80021aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e09a      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800218a:	4b4e      	ldr	r3, [pc, #312]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e08e      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219a:	4b4a      	ldr	r3, [pc, #296]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e086      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021aa:	4b46      	ldr	r3, [pc, #280]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f023 0203 	bic.w	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4943      	ldr	r1, [pc, #268]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021bc:	f7fe fe0e 	bl	8000ddc <HAL_GetTick>
 80021c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	e00a      	b.n	80021da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7fe fe0a 	bl	8000ddc <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e06e      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	4b3a      	ldr	r3, [pc, #232]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 020c 	and.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1eb      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d010      	beq.n	800221a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	4b31      	ldr	r3, [pc, #196]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002204:	429a      	cmp	r2, r3
 8002206:	d208      	bcs.n	800221a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002208:	4b2e      	ldr	r3, [pc, #184]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	492b      	ldr	r1, [pc, #172]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800221a:	4b29      	ldr	r3, [pc, #164]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d210      	bcs.n	800224a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002228:	4b25      	ldr	r3, [pc, #148]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 0207 	bic.w	r2, r3, #7
 8002230:	4923      	ldr	r1, [pc, #140]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002238:	4b21      	ldr	r3, [pc, #132]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d001      	beq.n	800224a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e036      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002256:	4b1b      	ldr	r3, [pc, #108]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	4918      	ldr	r1, [pc, #96]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002274:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4910      	ldr	r1, [pc, #64]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002284:	4313      	orrs	r3, r2
 8002286:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002288:	f000 f824 	bl	80022d4 <HAL_RCC_GetSysClockFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	490b      	ldr	r1, [pc, #44]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f4>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
 80022a4:	4a09      	ldr	r2, [pc, #36]	@ (80022cc <HAL_RCC_ClockConfig+0x1f8>)
 80022a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022a8:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <HAL_RCC_ClockConfig+0x1fc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe fd45 	bl	8000d3c <HAL_InitTick>
 80022b2:	4603      	mov	r3, r0
 80022b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80022b6:	7afb      	ldrb	r3, [r7, #11]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40022000 	.word	0x40022000
 80022c4:	40021000 	.word	0x40021000
 80022c8:	080079c0 	.word	0x080079c0
 80022cc:	20000000 	.word	0x20000000
 80022d0:	20000004 	.word	0x20000004

080022d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	@ 0x24
 80022d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e2:	4b3e      	ldr	r3, [pc, #248]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x108>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ec:	4b3b      	ldr	r3, [pc, #236]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x108>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x34>
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	d121      	bne.n	8002346 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d11e      	bne.n	8002346 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002308:	4b34      	ldr	r3, [pc, #208]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x108>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002314:	4b31      	ldr	r3, [pc, #196]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	e005      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002324:	4b2d      	ldr	r3, [pc, #180]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002330:	4a2b      	ldr	r2, [pc, #172]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002338:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10d      	bne.n	800235c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002344:	e00a      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d102      	bne.n	8002352 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800234c:	4b25      	ldr	r3, [pc, #148]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	e004      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b08      	cmp	r3, #8
 8002356:	d101      	bne.n	800235c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002358:	4b23      	ldr	r3, [pc, #140]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800235a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d134      	bne.n	80023cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002362:	4b1e      	ldr	r3, [pc, #120]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d003      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0xa6>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d003      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0xac>
 8002378:	e005      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800237a:	4b1a      	ldr	r3, [pc, #104]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800237c:	617b      	str	r3, [r7, #20]
      break;
 800237e:	e005      	b.n	800238c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002380:	4b19      	ldr	r3, [pc, #100]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002382:	617b      	str	r3, [r7, #20]
      break;
 8002384:	e002      	b.n	800238c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	617b      	str	r3, [r7, #20]
      break;
 800238a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800238c:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x108>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	3301      	adds	r3, #1
 8002398:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800239a:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x108>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	fb03 f202 	mul.w	r2, r3, r2
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023b2:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x108>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	0e5b      	lsrs	r3, r3, #25
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	3301      	adds	r3, #1
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023cc:	69bb      	ldr	r3, [r7, #24]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3724      	adds	r7, #36	@ 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	080079d0 	.word	0x080079d0
 80023e4:	00f42400 	.word	0x00f42400
 80023e8:	007a1200 	.word	0x007a1200

080023ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023f8:	4b2a      	ldr	r3, [pc, #168]	@ (80024a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002404:	f7ff f9d8 	bl	80017b8 <HAL_PWREx_GetVoltageRange>
 8002408:	6178      	str	r0, [r7, #20]
 800240a:	e014      	b.n	8002436 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800240c:	4b25      	ldr	r3, [pc, #148]	@ (80024a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002410:	4a24      	ldr	r2, [pc, #144]	@ (80024a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002416:	6593      	str	r3, [r2, #88]	@ 0x58
 8002418:	4b22      	ldr	r3, [pc, #136]	@ (80024a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800241a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002424:	f7ff f9c8 	bl	80017b8 <HAL_PWREx_GetVoltageRange>
 8002428:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800242a:	4b1e      	ldr	r3, [pc, #120]	@ (80024a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242e:	4a1d      	ldr	r2, [pc, #116]	@ (80024a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002430:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002434:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800243c:	d10b      	bne.n	8002456 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b80      	cmp	r3, #128	@ 0x80
 8002442:	d919      	bls.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2ba0      	cmp	r3, #160	@ 0xa0
 8002448:	d902      	bls.n	8002450 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800244a:	2302      	movs	r3, #2
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	e013      	b.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002450:	2301      	movs	r3, #1
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e010      	b.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b80      	cmp	r3, #128	@ 0x80
 800245a:	d902      	bls.n	8002462 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800245c:	2303      	movs	r3, #3
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	e00a      	b.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b80      	cmp	r3, #128	@ 0x80
 8002466:	d102      	bne.n	800246e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002468:	2302      	movs	r3, #2
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	e004      	b.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b70      	cmp	r3, #112	@ 0x70
 8002472:	d101      	bne.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002474:	2301      	movs	r3, #1
 8002476:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002478:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f023 0207 	bic.w	r2, r3, #7
 8002480:	4909      	ldr	r1, [pc, #36]	@ (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002488:	4b07      	ldr	r3, [pc, #28]	@ (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	429a      	cmp	r2, r3
 8002494:	d001      	beq.n	800249a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40022000 	.word	0x40022000

080024ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024b4:	2300      	movs	r3, #0
 80024b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024b8:	2300      	movs	r3, #0
 80024ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d041      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024d0:	d02a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024d6:	d824      	bhi.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024dc:	d008      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024e2:	d81e      	bhi.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024ec:	d010      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024ee:	e018      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024f0:	4b86      	ldr	r3, [pc, #536]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a85      	ldr	r2, [pc, #532]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024fc:	e015      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3304      	adds	r3, #4
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f000 facd 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 800250a:	4603      	mov	r3, r0
 800250c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800250e:	e00c      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3320      	adds	r3, #32
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fbb6 	bl	8002c88 <RCCEx_PLLSAI2_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002520:	e003      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	74fb      	strb	r3, [r7, #19]
      break;
 8002526:	e000      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002530:	4b76      	ldr	r3, [pc, #472]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002536:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800253e:	4973      	ldr	r1, [pc, #460]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002546:	e001      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d041      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800255c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002560:	d02a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002562:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002566:	d824      	bhi.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002568:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800256c:	d008      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800256e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002572:	d81e      	bhi.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002578:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800257c:	d010      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800257e:	e018      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002580:	4b62      	ldr	r3, [pc, #392]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a61      	ldr	r2, [pc, #388]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800258c:	e015      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3304      	adds	r3, #4
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fa85 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800259e:	e00c      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3320      	adds	r3, #32
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fb6e 	bl	8002c88 <RCCEx_PLLSAI2_Config>
 80025ac:	4603      	mov	r3, r0
 80025ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b0:	e003      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	74fb      	strb	r3, [r7, #19]
      break;
 80025b6:	e000      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10b      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025c0:	4b52      	ldr	r3, [pc, #328]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ce:	494f      	ldr	r1, [pc, #316]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80025d6:	e001      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80a0 	beq.w	800272a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025ee:	4b47      	ldr	r3, [pc, #284]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025fe:	2300      	movs	r3, #0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00d      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002604:	4b41      	ldr	r3, [pc, #260]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002608:	4a40      	ldr	r2, [pc, #256]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800260e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002610:	4b3e      	ldr	r3, [pc, #248]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261c:	2301      	movs	r3, #1
 800261e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002620:	4b3b      	ldr	r3, [pc, #236]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3a      	ldr	r2, [pc, #232]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800262c:	f7fe fbd6 	bl	8000ddc <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002632:	e009      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002634:	f7fe fbd2 	bl	8000ddc <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d902      	bls.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	74fb      	strb	r3, [r7, #19]
        break;
 8002646:	e005      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002648:	4b31      	ldr	r3, [pc, #196]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ef      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d15c      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800265a:	4b2c      	ldr	r3, [pc, #176]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002660:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002664:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01f      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	429a      	cmp	r2, r3
 8002676:	d019      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002678:	4b24      	ldr	r3, [pc, #144]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002682:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002684:	4b21      	ldr	r3, [pc, #132]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268a:	4a20      	ldr	r2, [pc, #128]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002694:	4b1d      	ldr	r3, [pc, #116]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269a:	4a1c      	ldr	r2, [pc, #112]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026a4:	4a19      	ldr	r2, [pc, #100]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d016      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7fe fb91 	bl	8000ddc <HAL_GetTick>
 80026ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026bc:	e00b      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe fb8d 	bl	8000ddc <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d902      	bls.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	74fb      	strb	r3, [r7, #19]
            break;
 80026d4:	e006      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d6:	4b0d      	ldr	r3, [pc, #52]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0ec      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026e4:	7cfb      	ldrb	r3, [r7, #19]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ea:	4b08      	ldr	r3, [pc, #32]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fa:	4904      	ldr	r1, [pc, #16]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002702:	e009      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	74bb      	strb	r3, [r7, #18]
 8002708:	e006      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000
 8002710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002718:	7c7b      	ldrb	r3, [r7, #17]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d105      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271e:	4ba6      	ldr	r3, [pc, #664]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002722:	4aa5      	ldr	r2, [pc, #660]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002724:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002728:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002736:	4ba0      	ldr	r3, [pc, #640]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273c:	f023 0203 	bic.w	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002744:	499c      	ldr	r1, [pc, #624]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002758:	4b97      	ldr	r3, [pc, #604]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275e:	f023 020c 	bic.w	r2, r3, #12
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002766:	4994      	ldr	r1, [pc, #592]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800277a:	4b8f      	ldr	r3, [pc, #572]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002780:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	498b      	ldr	r1, [pc, #556]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800279c:	4b86      	ldr	r3, [pc, #536]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027aa:	4983      	ldr	r1, [pc, #524]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027be:	4b7e      	ldr	r3, [pc, #504]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027cc:	497a      	ldr	r1, [pc, #488]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027e0:	4b75      	ldr	r3, [pc, #468]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ee:	4972      	ldr	r1, [pc, #456]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002802:	4b6d      	ldr	r3, [pc, #436]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002808:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002810:	4969      	ldr	r1, [pc, #420]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002824:	4b64      	ldr	r3, [pc, #400]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002832:	4961      	ldr	r1, [pc, #388]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002846:	4b5c      	ldr	r3, [pc, #368]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002854:	4958      	ldr	r1, [pc, #352]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002868:	4b53      	ldr	r3, [pc, #332]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002876:	4950      	ldr	r1, [pc, #320]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800288a:	4b4b      	ldr	r3, [pc, #300]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002890:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002898:	4947      	ldr	r1, [pc, #284]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028ac:	4b42      	ldr	r3, [pc, #264]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ba:	493f      	ldr	r1, [pc, #252]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d028      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ce:	4b3a      	ldr	r3, [pc, #232]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028dc:	4936      	ldr	r1, [pc, #216]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028ec:	d106      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ee:	4b32      	ldr	r3, [pc, #200]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	4a31      	ldr	r2, [pc, #196]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028f8:	60d3      	str	r3, [r2, #12]
 80028fa:	e011      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002900:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002904:	d10c      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3304      	adds	r3, #4
 800290a:	2101      	movs	r1, #1
 800290c:	4618      	mov	r0, r3
 800290e:	f000 f8c9 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 8002912:	4603      	mov	r3, r0
 8002914:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d028      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800292c:	4b22      	ldr	r3, [pc, #136]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002932:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800293a:	491f      	ldr	r1, [pc, #124]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002946:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800294a:	d106      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800294c:	4b1a      	ldr	r3, [pc, #104]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a19      	ldr	r2, [pc, #100]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002952:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002956:	60d3      	str	r3, [r2, #12]
 8002958:	e011      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800295e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002962:	d10c      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3304      	adds	r3, #4
 8002968:	2101      	movs	r1, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f89a 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 8002970:	4603      	mov	r3, r0
 8002972:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800297a:	7cfb      	ldrb	r3, [r7, #19]
 800297c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d02a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800298a:	4b0b      	ldr	r3, [pc, #44]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002990:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002998:	4907      	ldr	r1, [pc, #28]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029a8:	d108      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029aa:	4b03      	ldr	r3, [pc, #12]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	4a02      	ldr	r2, [pc, #8]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029b4:	60d3      	str	r3, [r2, #12]
 80029b6:	e013      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80029b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2101      	movs	r1, #1
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 f869 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029d6:	7cfb      	ldrb	r3, [r7, #19]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d02f      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029ec:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029fa:	4929      	ldr	r1, [pc, #164]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a0a:	d10d      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	2102      	movs	r1, #2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f846 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d014      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	74bb      	strb	r3, [r7, #18]
 8002a26:	e011      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3320      	adds	r3, #32
 8002a36:	2102      	movs	r1, #2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 f925 	bl	8002c88 <RCCEx_PLLSAI2_Config>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a42:	7cfb      	ldrb	r3, [r7, #19]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a68:	490d      	ldr	r1, [pc, #52]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00b      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a7c:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a8c:	4904      	ldr	r1, [pc, #16]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a94:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ab2:	4b74      	ldr	r3, [pc, #464]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d018      	beq.n	8002af0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002abe:	4b71      	ldr	r3, [pc, #452]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 0203 	and.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d10d      	bne.n	8002aea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ad6:	4b6b      	ldr	r3, [pc, #428]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d047      	beq.n	8002b7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
 8002aee:	e044      	b.n	8002b7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d018      	beq.n	8002b2a <RCCEx_PLLSAI1_Config+0x86>
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d825      	bhi.n	8002b48 <RCCEx_PLLSAI1_Config+0xa4>
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d002      	beq.n	8002b06 <RCCEx_PLLSAI1_Config+0x62>
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d009      	beq.n	8002b18 <RCCEx_PLLSAI1_Config+0x74>
 8002b04:	e020      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b06:	4b5f      	ldr	r3, [pc, #380]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d11d      	bne.n	8002b4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b16:	e01a      	b.n	8002b4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b18:	4b5a      	ldr	r3, [pc, #360]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d116      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b28:	e013      	b.n	8002b52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b2a:	4b56      	ldr	r3, [pc, #344]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10f      	bne.n	8002b56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b36:	4b53      	ldr	r3, [pc, #332]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b46:	e006      	b.n	8002b56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4c:	e004      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e002      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b52:	bf00      	nop
 8002b54:	e000      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b56:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10d      	bne.n	8002b7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b5e:	4b49      	ldr	r3, [pc, #292]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	430b      	orrs	r3, r1
 8002b74:	4943      	ldr	r1, [pc, #268]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d17c      	bne.n	8002c7a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b80:	4b40      	ldr	r3, [pc, #256]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a3f      	ldr	r2, [pc, #252]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b8c:	f7fe f926 	bl	8000ddc <HAL_GetTick>
 8002b90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b92:	e009      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b94:	f7fe f922 	bl	8000ddc <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d902      	bls.n	8002ba8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ba6:	e005      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ba8:	4b36      	ldr	r3, [pc, #216]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ef      	bne.n	8002b94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d15f      	bne.n	8002c7a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d110      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bc0:	4b30      	ldr	r3, [pc, #192]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002bc8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6892      	ldr	r2, [r2, #8]
 8002bd0:	0211      	lsls	r1, r2, #8
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68d2      	ldr	r2, [r2, #12]
 8002bd6:	06d2      	lsls	r2, r2, #27
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	492a      	ldr	r1, [pc, #168]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	610b      	str	r3, [r1, #16]
 8002be0:	e027      	b.n	8002c32 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d112      	bne.n	8002c0e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002be8:	4b26      	ldr	r3, [pc, #152]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002bf0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6892      	ldr	r2, [r2, #8]
 8002bf8:	0211      	lsls	r1, r2, #8
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6912      	ldr	r2, [r2, #16]
 8002bfe:	0852      	lsrs	r2, r2, #1
 8002c00:	3a01      	subs	r2, #1
 8002c02:	0552      	lsls	r2, r2, #21
 8002c04:	430a      	orrs	r2, r1
 8002c06:	491f      	ldr	r1, [pc, #124]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	610b      	str	r3, [r1, #16]
 8002c0c:	e011      	b.n	8002c32 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6892      	ldr	r2, [r2, #8]
 8002c1e:	0211      	lsls	r1, r2, #8
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6952      	ldr	r2, [r2, #20]
 8002c24:	0852      	lsrs	r2, r2, #1
 8002c26:	3a01      	subs	r2, #1
 8002c28:	0652      	lsls	r2, r2, #25
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	4915      	ldr	r1, [pc, #84]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c32:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a13      	ldr	r2, [pc, #76]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3e:	f7fe f8cd 	bl	8000ddc <HAL_GetTick>
 8002c42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c44:	e009      	b.n	8002c5a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c46:	f7fe f8c9 	bl	8000ddc <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d902      	bls.n	8002c5a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	73fb      	strb	r3, [r7, #15]
          break;
 8002c58:	e005      	b.n	8002c66 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0ef      	beq.n	8002c46 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d106      	bne.n	8002c7a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c6c:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4903      	ldr	r1, [pc, #12]	@ (8002c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000

08002c88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c96:	4b69      	ldr	r3, [pc, #420]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d018      	beq.n	8002cd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ca2:	4b66      	ldr	r3, [pc, #408]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0203 	and.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d10d      	bne.n	8002cce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cba:	4b60      	ldr	r3, [pc, #384]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
       ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d047      	beq.n	8002d5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e044      	b.n	8002d5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d018      	beq.n	8002d0e <RCCEx_PLLSAI2_Config+0x86>
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d825      	bhi.n	8002d2c <RCCEx_PLLSAI2_Config+0xa4>
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d002      	beq.n	8002cea <RCCEx_PLLSAI2_Config+0x62>
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d009      	beq.n	8002cfc <RCCEx_PLLSAI2_Config+0x74>
 8002ce8:	e020      	b.n	8002d2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cea:	4b54      	ldr	r3, [pc, #336]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11d      	bne.n	8002d32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfa:	e01a      	b.n	8002d32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d116      	bne.n	8002d36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0c:	e013      	b.n	8002d36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d0e:	4b4b      	ldr	r3, [pc, #300]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d1a:	4b48      	ldr	r3, [pc, #288]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d2a:	e006      	b.n	8002d3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d30:	e004      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d32:	bf00      	nop
 8002d34:	e002      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d36:	bf00      	nop
 8002d38:	e000      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10d      	bne.n	8002d5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d42:	4b3e      	ldr	r3, [pc, #248]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	430b      	orrs	r3, r1
 8002d58:	4938      	ldr	r1, [pc, #224]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d166      	bne.n	8002e32 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d64:	4b35      	ldr	r3, [pc, #212]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a34      	ldr	r2, [pc, #208]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d70:	f7fe f834 	bl	8000ddc <HAL_GetTick>
 8002d74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d76:	e009      	b.n	8002d8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d78:	f7fe f830 	bl	8000ddc <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d902      	bls.n	8002d8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	73fb      	strb	r3, [r7, #15]
        break;
 8002d8a:	e005      	b.n	8002d98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ef      	bne.n	8002d78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d149      	bne.n	8002e32 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d110      	bne.n	8002dc6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002da4:	4b25      	ldr	r3, [pc, #148]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002dac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6892      	ldr	r2, [r2, #8]
 8002db4:	0211      	lsls	r1, r2, #8
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68d2      	ldr	r2, [r2, #12]
 8002dba:	06d2      	lsls	r2, r2, #27
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	491f      	ldr	r1, [pc, #124]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	614b      	str	r3, [r1, #20]
 8002dc4:	e011      	b.n	8002dea <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002dce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6892      	ldr	r2, [r2, #8]
 8002dd6:	0211      	lsls	r1, r2, #8
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6912      	ldr	r2, [r2, #16]
 8002ddc:	0852      	lsrs	r2, r2, #1
 8002dde:	3a01      	subs	r2, #1
 8002de0:	0652      	lsls	r2, r2, #25
 8002de2:	430a      	orrs	r2, r1
 8002de4:	4915      	ldr	r1, [pc, #84]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dea:	4b14      	ldr	r3, [pc, #80]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a13      	ldr	r2, [pc, #76]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fd fff1 	bl	8000ddc <HAL_GetTick>
 8002dfa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dfc:	e009      	b.n	8002e12 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dfe:	f7fd ffed 	bl	8000ddc <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d902      	bls.n	8002e12 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	73fb      	strb	r3, [r7, #15]
          break;
 8002e10:	e005      	b.n	8002e1e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e12:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0ef      	beq.n	8002dfe <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d106      	bne.n	8002e32 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e24:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e26:	695a      	ldr	r2, [r3, #20]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	4903      	ldr	r1, [pc, #12]	@ (8002e3c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021000 	.word	0x40021000

08002e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e095      	b.n	8002f7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d108      	bne.n	8002e6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e62:	d009      	beq.n	8002e78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
 8002e6a:	e005      	b.n	8002e78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd fdc0 	bl	8000a18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002eb8:	d902      	bls.n	8002ec0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	e002      	b.n	8002ec6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ec4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002ece:	d007      	beq.n	8002ee0 <HAL_SPI_Init+0xa0>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ed8:	d002      	beq.n	8002ee0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f22:	ea42 0103 	orr.w	r1, r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	0c1b      	lsrs	r3, r3, #16
 8002f3c:	f003 0204 	and.w	r2, r3, #4
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f5c:	ea42 0103 	orr.w	r1, r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b088      	sub	sp, #32
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	4613      	mov	r3, r2
 8002f94:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f96:	f7fd ff21 	bl	8000ddc <HAL_GetTick>
 8002f9a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d001      	beq.n	8002fb0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002fac:	2302      	movs	r3, #2
 8002fae:	e15c      	b.n	800326a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_SPI_Transmit+0x36>
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e154      	b.n	800326a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_SPI_Transmit+0x48>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e14d      	b.n	800326a <HAL_SPI_Transmit+0x2e4>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2203      	movs	r2, #3
 8002fda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	88fa      	ldrh	r2, [r7, #6]
 8002fee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	88fa      	ldrh	r2, [r7, #6]
 8002ff4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003020:	d10f      	bne.n	8003042 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003030:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003040:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304c:	2b40      	cmp	r3, #64	@ 0x40
 800304e:	d007      	beq.n	8003060 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003068:	d952      	bls.n	8003110 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_SPI_Transmit+0xf2>
 8003072:	8b7b      	ldrh	r3, [r7, #26]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d145      	bne.n	8003104 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307c:	881a      	ldrh	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003088:	1c9a      	adds	r2, r3, #2
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800309c:	e032      	b.n	8003104 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d112      	bne.n	80030d2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b0:	881a      	ldrh	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030bc:	1c9a      	adds	r2, r3, #2
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030d0:	e018      	b.n	8003104 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030d2:	f7fd fe83 	bl	8000ddc <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d803      	bhi.n	80030ea <HAL_SPI_Transmit+0x164>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d102      	bne.n	80030f0 <HAL_SPI_Transmit+0x16a>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e0b2      	b.n	800326a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1c7      	bne.n	800309e <HAL_SPI_Transmit+0x118>
 800310e:	e083      	b.n	8003218 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <HAL_SPI_Transmit+0x198>
 8003118:	8b7b      	ldrh	r3, [r7, #26]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d177      	bne.n	800320e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d912      	bls.n	800314e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312c:	881a      	ldrh	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003138:	1c9a      	adds	r2, r3, #2
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b02      	subs	r3, #2
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800314c:	e05f      	b.n	800320e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	330c      	adds	r3, #12
 8003158:	7812      	ldrb	r2, [r2, #0]
 800315a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003174:	e04b      	b.n	800320e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b02      	cmp	r3, #2
 8003182:	d12b      	bne.n	80031dc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b01      	cmp	r3, #1
 800318c:	d912      	bls.n	80031b4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003192:	881a      	ldrh	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319e:	1c9a      	adds	r2, r3, #2
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b02      	subs	r3, #2
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031b2:	e02c      	b.n	800320e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	330c      	adds	r3, #12
 80031be:	7812      	ldrb	r2, [r2, #0]
 80031c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031da:	e018      	b.n	800320e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031dc:	f7fd fdfe 	bl	8000ddc <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d803      	bhi.n	80031f4 <HAL_SPI_Transmit+0x26e>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d102      	bne.n	80031fa <HAL_SPI_Transmit+0x274>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e02d      	b.n	800326a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ae      	bne.n	8003176 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	6839      	ldr	r1, [r7, #0]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fb65 	bl	80038ec <SPI_EndRxTxTransaction>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10a      	bne.n	800324c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003268:	2300      	movs	r3, #0
  }
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b08a      	sub	sp, #40	@ 0x28
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003280:	2301      	movs	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003284:	f7fd fdaa 	bl	8000ddc <HAL_GetTick>
 8003288:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003290:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003298:	887b      	ldrh	r3, [r7, #2]
 800329a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032a0:	7ffb      	ldrb	r3, [r7, #31]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d00c      	beq.n	80032c0 <HAL_SPI_TransmitReceive+0x4e>
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032ac:	d106      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x4a>
 80032b6:	7ffb      	ldrb	r3, [r7, #31]
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d001      	beq.n	80032c0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
 80032be:	e1f3      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d005      	beq.n	80032d2 <HAL_SPI_TransmitReceive+0x60>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_SPI_TransmitReceive+0x60>
 80032cc:	887b      	ldrh	r3, [r7, #2]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e1e8      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x72>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e1e1      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x436>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d003      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2205      	movs	r2, #5
 80032fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	887a      	ldrh	r2, [r7, #2]
 8003310:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	887a      	ldrh	r2, [r7, #2]
 8003318:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	887a      	ldrh	r2, [r7, #2]
 8003326:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003342:	d802      	bhi.n	800334a <HAL_SPI_TransmitReceive+0xd8>
 8003344:	8abb      	ldrh	r3, [r7, #20]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d908      	bls.n	800335c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	e007      	b.n	800336c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800336a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003376:	2b40      	cmp	r3, #64	@ 0x40
 8003378:	d007      	beq.n	800338a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003388:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003392:	f240 8083 	bls.w	800349c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_SPI_TransmitReceive+0x132>
 800339e:	8afb      	ldrh	r3, [r7, #22]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d16f      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a8:	881a      	ldrh	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b4:	1c9a      	adds	r2, r3, #2
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033c8:	e05c      	b.n	8003484 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d11b      	bne.n	8003410 <HAL_SPI_TransmitReceive+0x19e>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <HAL_SPI_TransmitReceive+0x19e>
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d113      	bne.n	8003410 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ec:	881a      	ldrh	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	1c9a      	adds	r2, r3, #2
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	d11c      	bne.n	8003458 <HAL_SPI_TransmitReceive+0x1e6>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d016      	beq.n	8003458 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	b292      	uxth	r2, r2
 8003436:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343c:	1c9a      	adds	r2, r3, #2
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003454:	2301      	movs	r3, #1
 8003456:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003458:	f7fd fcc0 	bl	8000ddc <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003464:	429a      	cmp	r2, r3
 8003466:	d80d      	bhi.n	8003484 <HAL_SPI_TransmitReceive+0x212>
 8003468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d009      	beq.n	8003484 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e111      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d19d      	bne.n	80033ca <HAL_SPI_TransmitReceive+0x158>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d197      	bne.n	80033ca <HAL_SPI_TransmitReceive+0x158>
 800349a:	e0e5      	b.n	8003668 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_SPI_TransmitReceive+0x23a>
 80034a4:	8afb      	ldrh	r3, [r7, #22]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	f040 80d1 	bne.w	800364e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d912      	bls.n	80034dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ba:	881a      	ldrh	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c6:	1c9a      	adds	r2, r3, #2
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b02      	subs	r3, #2
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034da:	e0b8      	b.n	800364e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	330c      	adds	r3, #12
 80034e6:	7812      	ldrb	r2, [r2, #0]
 80034e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003502:	e0a4      	b.n	800364e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b02      	cmp	r3, #2
 8003510:	d134      	bne.n	800357c <HAL_SPI_TransmitReceive+0x30a>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d02f      	beq.n	800357c <HAL_SPI_TransmitReceive+0x30a>
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	2b01      	cmp	r3, #1
 8003520:	d12c      	bne.n	800357c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d912      	bls.n	8003552 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003530:	881a      	ldrh	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	1c9a      	adds	r2, r3, #2
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b02      	subs	r3, #2
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003550:	e012      	b.n	8003578 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	330c      	adds	r3, #12
 800355c:	7812      	ldrb	r2, [r2, #0]
 800355e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d148      	bne.n	800361c <HAL_SPI_TransmitReceive+0x3aa>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d042      	beq.n	800361c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d923      	bls.n	80035ea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	b292      	uxth	r2, r2
 80035ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b4:	1c9a      	adds	r2, r3, #2
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b02      	subs	r3, #2
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d81f      	bhi.n	8003618 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	e016      	b.n	8003618 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f103 020c 	add.w	r2, r3, #12
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	7812      	ldrb	r2, [r2, #0]
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003618:	2301      	movs	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800361c:	f7fd fbde 	bl	8000ddc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003628:	429a      	cmp	r2, r3
 800362a:	d803      	bhi.n	8003634 <HAL_SPI_TransmitReceive+0x3c2>
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003632:	d102      	bne.n	800363a <HAL_SPI_TransmitReceive+0x3c8>
 8003634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e02c      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	f47f af55 	bne.w	8003504 <HAL_SPI_TransmitReceive+0x292>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	f47f af4e 	bne.w	8003504 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003668:	6a3a      	ldr	r2, [r7, #32]
 800366a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f93d 	bl	80038ec <SPI_EndRxTxTransaction>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e00e      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80036a6:	2300      	movs	r3, #0
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3728      	adds	r7, #40	@ 0x28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	4613      	mov	r3, r2
 80036be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036c0:	f7fd fb8c 	bl	8000ddc <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	4413      	add	r3, r2
 80036ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036d0:	f7fd fb84 	bl	8000ddc <HAL_GetTick>
 80036d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036d6:	4b39      	ldr	r3, [pc, #228]	@ (80037bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	015b      	lsls	r3, r3, #5
 80036dc:	0d1b      	lsrs	r3, r3, #20
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	fb02 f303 	mul.w	r3, r2, r3
 80036e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036e6:	e054      	b.n	8003792 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ee:	d050      	beq.n	8003792 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036f0:	f7fd fb74 	bl	8000ddc <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d902      	bls.n	8003706 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d13d      	bne.n	8003782 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003714:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800371e:	d111      	bne.n	8003744 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003728:	d004      	beq.n	8003734 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003732:	d107      	bne.n	8003744 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003742:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800374c:	d10f      	bne.n	800376e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800376c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e017      	b.n	80037b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	3b01      	subs	r3, #1
 8003790:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4013      	ands	r3, r2
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d19b      	bne.n	80036e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000000 	.word	0x20000000

080037c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	@ 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037d2:	f7fd fb03 	bl	8000ddc <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	4413      	add	r3, r2
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80037e2:	f7fd fafb 	bl	8000ddc <HAL_GetTick>
 80037e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330c      	adds	r3, #12
 80037ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037f0:	4b3d      	ldr	r3, [pc, #244]	@ (80038e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	00da      	lsls	r2, r3, #3
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	0d1b      	lsrs	r3, r3, #20
 8003800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003808:	e060      	b.n	80038cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003810:	d107      	bne.n	8003822 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d104      	bne.n	8003822 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003820:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d050      	beq.n	80038cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800382a:	f7fd fad7 	bl	8000ddc <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003836:	429a      	cmp	r2, r3
 8003838:	d902      	bls.n	8003840 <SPI_WaitFifoStateUntilTimeout+0x80>
 800383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383c:	2b00      	cmp	r3, #0
 800383e:	d13d      	bne.n	80038bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800384e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003858:	d111      	bne.n	800387e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003862:	d004      	beq.n	800386e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800386c:	d107      	bne.n	800387e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800387c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003886:	d10f      	bne.n	80038a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e010      	b.n	80038de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4013      	ands	r3, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d196      	bne.n	800380a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3728      	adds	r7, #40	@ 0x28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000000 	.word	0x20000000

080038ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2200      	movs	r2, #0
 8003900:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff ff5b 	bl	80037c0 <SPI_WaitFifoStateUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e027      	b.n	8003970 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2200      	movs	r2, #0
 8003928:	2180      	movs	r1, #128	@ 0x80
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff fec0 	bl	80036b0 <SPI_WaitFlagStateUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393a:	f043 0220 	orr.w	r2, r3, #32
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e014      	b.n	8003970 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2200      	movs	r2, #0
 800394e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7ff ff34 	bl	80037c0 <SPI_WaitFifoStateUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003962:	f043 0220 	orr.w	r2, r3, #32
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e000      	b.n	8003970 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800397c:	4904      	ldr	r1, [pc, #16]	@ (8003990 <MX_FATFS_Init+0x18>)
 800397e:	4805      	ldr	r0, [pc, #20]	@ (8003994 <MX_FATFS_Init+0x1c>)
 8003980:	f002 ff9c 	bl	80068bc <FATFS_LinkDriver>
 8003984:	4603      	mov	r3, r0
 8003986:	461a      	mov	r2, r3
 8003988:	4b03      	ldr	r3, [pc, #12]	@ (8003998 <MX_FATFS_Init+0x20>)
 800398a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000188 	.word	0x20000188
 8003994:	2000000c 	.word	0x2000000c
 8003998:	20000184 	.word	0x20000184

0800399c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80039a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_initialize(pdrv);
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 f9d1 	bl	8003d60 <USER_SPI_initialize>
 80039be:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_status(pdrv);
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 faaf 	bl	8003f38 <USER_SPI_status>
 80039da:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	4603      	mov	r3, r0
 80039f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80039f4:	7bf8      	ldrb	r0, [r7, #15]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	f000 fab2 	bl	8003f64 <USER_SPI_read>
 8003a00:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	4603      	mov	r3, r0
 8003a18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8003a1a:	7bf8      	ldrb	r0, [r7, #15]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	f000 fb05 	bl	8004030 <USER_SPI_write>
 8003a26:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	603a      	str	r2, [r7, #0]
 8003a3a:	71fb      	strb	r3, [r7, #7]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8003a40:	79b9      	ldrb	r1, [r7, #6]
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fb6e 	bl	8004128 <USER_SPI_ioctl>
 8003a4c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003a60:	f7fd f9bc 	bl	8000ddc <HAL_GetTick>
 8003a64:	4603      	mov	r3, r0
 8003a66:	4a04      	ldr	r2, [pc, #16]	@ (8003a78 <SPI_Timer_On+0x20>)
 8003a68:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003a6a:	4a04      	ldr	r2, [pc, #16]	@ (8003a7c <SPI_Timer_On+0x24>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000190 	.word	0x20000190
 8003a7c:	20000194 	.word	0x20000194

08003a80 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003a84:	f7fd f9aa 	bl	8000ddc <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <SPI_Timer_Status+0x24>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	1ad2      	subs	r2, r2, r3
 8003a90:	4b05      	ldr	r3, [pc, #20]	@ (8003aa8 <SPI_Timer_Status+0x28>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	bf34      	ite	cc
 8003a98:	2301      	movcc	r3, #1
 8003a9a:	2300      	movcs	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000190 	.word	0x20000190
 8003aa8:	20000194 	.word	0x20000194

08003aac <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003ab6:	f107 020f 	add.w	r2, r7, #15
 8003aba:	1df9      	adds	r1, r7, #7
 8003abc:	2332      	movs	r3, #50	@ 0x32
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	4804      	ldr	r0, [pc, #16]	@ (8003ad4 <xchg_spi+0x28>)
 8003ac4:	f7ff fbd5 	bl	8003272 <HAL_SPI_TransmitReceive>
    return rxDat;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000118 	.word	0x20000118

08003ad8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	e00a      	b.n	8003afe <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	18d4      	adds	r4, r2, r3
 8003aee:	20ff      	movs	r0, #255	@ 0xff
 8003af0:	f7ff ffdc 	bl	8003aac <xchg_spi>
 8003af4:	4603      	mov	r3, r0
 8003af6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3301      	adds	r3, #1
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d3f0      	bcc.n	8003ae8 <rcvr_spi_multi+0x10>
	}
}
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd90      	pop	{r4, r7, pc}

08003b10 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4803      	ldr	r0, [pc, #12]	@ (8003b34 <xmit_spi_multi+0x24>)
 8003b26:	f7ff fa2e 	bl	8002f86 <HAL_SPI_Transmit>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000118 	.word	0x20000118

08003b38 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003b40:	f7fd f94c 	bl	8000ddc <HAL_GetTick>
 8003b44:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003b4a:	20ff      	movs	r0, #255	@ 0xff
 8003b4c:	f7ff ffae 	bl	8003aac <xchg_spi>
 8003b50:	4603      	mov	r3, r0
 8003b52:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2bff      	cmp	r3, #255	@ 0xff
 8003b58:	d007      	beq.n	8003b6a <wait_ready+0x32>
 8003b5a:	f7fd f93f 	bl	8000ddc <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d8ef      	bhi.n	8003b4a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	2bff      	cmp	r3, #255	@ 0xff
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003b82:	2201      	movs	r2, #1
 8003b84:	2120      	movs	r1, #32
 8003b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b8a:	f7fd fccb 	bl	8001524 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003b8e:	20ff      	movs	r0, #255	@ 0xff
 8003b90:	f7ff ff8c 	bl	8003aac <xchg_spi>

}
 8003b94:	bf00      	nop
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2120      	movs	r1, #32
 8003ba0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ba4:	f7fd fcbe 	bl	8001524 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003ba8:	20ff      	movs	r0, #255	@ 0xff
 8003baa:	f7ff ff7f 	bl	8003aac <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003bae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003bb2:	f7ff ffc1 	bl	8003b38 <wait_ready>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <spiselect+0x28>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e002      	b.n	8003bc6 <spiselect+0x2e>

	despiselect();
 8003bc0:	f7ff ffdd 	bl	8003b7e <despiselect>
	return 0;	/* Timeout */
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003bd4:	20c8      	movs	r0, #200	@ 0xc8
 8003bd6:	f7ff ff3f 	bl	8003a58 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003bda:	20ff      	movs	r0, #255	@ 0xff
 8003bdc:	f7ff ff66 	bl	8003aac <xchg_spi>
 8003be0:	4603      	mov	r3, r0
 8003be2:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	2bff      	cmp	r3, #255	@ 0xff
 8003be8:	d104      	bne.n	8003bf4 <rcvr_datablock+0x2a>
 8003bea:	f7ff ff49 	bl	8003a80 <SPI_Timer_Status>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f2      	bne.n	8003bda <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2bfe      	cmp	r3, #254	@ 0xfe
 8003bf8:	d001      	beq.n	8003bfe <rcvr_datablock+0x34>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e00a      	b.n	8003c14 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003bfe:	6839      	ldr	r1, [r7, #0]
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ff69 	bl	8003ad8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003c06:	20ff      	movs	r0, #255	@ 0xff
 8003c08:	f7ff ff50 	bl	8003aac <xchg_spi>
 8003c0c:	20ff      	movs	r0, #255	@ 0xff
 8003c0e:	f7ff ff4d 	bl	8003aac <xchg_spi>

	return 1;						/* Function succeeded */
 8003c12:	2301      	movs	r3, #1
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003c28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c2c:	f7ff ff84 	bl	8003b38 <wait_ready>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <xmit_datablock+0x1e>
 8003c36:	2300      	movs	r3, #0
 8003c38:	e01e      	b.n	8003c78 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff ff35 	bl	8003aac <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	2bfd      	cmp	r3, #253	@ 0xfd
 8003c46:	d016      	beq.n	8003c76 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003c48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ff5f 	bl	8003b10 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003c52:	20ff      	movs	r0, #255	@ 0xff
 8003c54:	f7ff ff2a 	bl	8003aac <xchg_spi>
 8003c58:	20ff      	movs	r0, #255	@ 0xff
 8003c5a:	f7ff ff27 	bl	8003aac <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003c5e:	20ff      	movs	r0, #255	@ 0xff
 8003c60:	f7ff ff24 	bl	8003aac <xchg_spi>
 8003c64:	4603      	mov	r3, r0
 8003c66:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d001      	beq.n	8003c76 <xmit_datablock+0x5a>
 8003c72:	2300      	movs	r3, #0
 8003c74:	e000      	b.n	8003c78 <xmit_datablock+0x5c>
	}
	return 1;
 8003c76:	2301      	movs	r3, #1
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	6039      	str	r1, [r7, #0]
 8003c8a:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	da0e      	bge.n	8003cb2 <send_cmd+0x32>
		cmd &= 0x7F;
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c9a:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	2037      	movs	r0, #55	@ 0x37
 8003ca0:	f7ff ffee 	bl	8003c80 <send_cmd>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003ca8:	7bbb      	ldrb	r3, [r7, #14]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d901      	bls.n	8003cb2 <send_cmd+0x32>
 8003cae:	7bbb      	ldrb	r3, [r7, #14]
 8003cb0:	e051      	b.n	8003d56 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	d008      	beq.n	8003cca <send_cmd+0x4a>
		despiselect();
 8003cb8:	f7ff ff61 	bl	8003b7e <despiselect>
		if (!spiselect()) return 0xFF;
 8003cbc:	f7ff ff6c 	bl	8003b98 <spiselect>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <send_cmd+0x4a>
 8003cc6:	23ff      	movs	r3, #255	@ 0xff
 8003cc8:	e045      	b.n	8003d56 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff feea 	bl	8003aac <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	0e1b      	lsrs	r3, r3, #24
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fee4 	bl	8003aac <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	0c1b      	lsrs	r3, r3, #16
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fede 	bl	8003aac <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fed8 	bl	8003aac <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fed3 	bl	8003aac <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <send_cmd+0x94>
 8003d10:	2395      	movs	r3, #149	@ 0x95
 8003d12:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d101      	bne.n	8003d1e <send_cmd+0x9e>
 8003d1a:	2387      	movs	r3, #135	@ 0x87
 8003d1c:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fec3 	bl	8003aac <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	2b0c      	cmp	r3, #12
 8003d2a:	d102      	bne.n	8003d32 <send_cmd+0xb2>
 8003d2c:	20ff      	movs	r0, #255	@ 0xff
 8003d2e:	f7ff febd 	bl	8003aac <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003d32:	230a      	movs	r3, #10
 8003d34:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003d36:	20ff      	movs	r0, #255	@ 0xff
 8003d38:	f7ff feb8 	bl	8003aac <xchg_spi>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	da05      	bge.n	8003d54 <send_cmd+0xd4>
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f0      	bne.n	8003d36 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <USER_SPI_initialize+0x14>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0d6      	b.n	8003f22 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003d74:	4b6d      	ldr	r3, [pc, #436]	@ (8003f2c <USER_SPI_initialize+0x1cc>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <USER_SPI_initialize+0x2a>
 8003d82:	4b6a      	ldr	r3, [pc, #424]	@ (8003f2c <USER_SPI_initialize+0x1cc>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	e0cb      	b.n	8003f22 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003d8a:	4b69      	ldr	r3, [pc, #420]	@ (8003f30 <USER_SPI_initialize+0x1d0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003d94:	4b66      	ldr	r3, [pc, #408]	@ (8003f30 <USER_SPI_initialize+0x1d0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8003d9c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003d9e:	230a      	movs	r3, #10
 8003da0:	73fb      	strb	r3, [r7, #15]
 8003da2:	e005      	b.n	8003db0 <USER_SPI_initialize+0x50>
 8003da4:	20ff      	movs	r0, #255	@ 0xff
 8003da6:	f7ff fe81 	bl	8003aac <xchg_spi>
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f6      	bne.n	8003da4 <USER_SPI_initialize+0x44>

	ty = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003dba:	2100      	movs	r1, #0
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	f7ff ff5f 	bl	8003c80 <send_cmd>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	f040 808b 	bne.w	8003ee0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003dca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003dce:	f7ff fe43 	bl	8003a58 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003dd2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003dd6:	2008      	movs	r0, #8
 8003dd8:	f7ff ff52 	bl	8003c80 <send_cmd>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d151      	bne.n	8003e86 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003de2:	2300      	movs	r3, #0
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	e00d      	b.n	8003e04 <USER_SPI_initialize+0xa4>
 8003de8:	7bfc      	ldrb	r4, [r7, #15]
 8003dea:	20ff      	movs	r0, #255	@ 0xff
 8003dec:	f7ff fe5e 	bl	8003aac <xchg_spi>
 8003df0:	4603      	mov	r3, r0
 8003df2:	461a      	mov	r2, r3
 8003df4:	f104 0310 	add.w	r3, r4, #16
 8003df8:	443b      	add	r3, r7
 8003dfa:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	3301      	adds	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d9ee      	bls.n	8003de8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003e0a:	7abb      	ldrb	r3, [r7, #10]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d167      	bne.n	8003ee0 <USER_SPI_initialize+0x180>
 8003e10:	7afb      	ldrb	r3, [r7, #11]
 8003e12:	2baa      	cmp	r3, #170	@ 0xaa
 8003e14:	d164      	bne.n	8003ee0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003e16:	bf00      	nop
 8003e18:	f7ff fe32 	bl	8003a80 <SPI_Timer_Status>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <USER_SPI_initialize+0xd2>
 8003e22:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003e26:	20a9      	movs	r0, #169	@ 0xa9
 8003e28:	f7ff ff2a 	bl	8003c80 <send_cmd>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f2      	bne.n	8003e18 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003e32:	f7ff fe25 	bl	8003a80 <SPI_Timer_Status>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d051      	beq.n	8003ee0 <USER_SPI_initialize+0x180>
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	203a      	movs	r0, #58	@ 0x3a
 8003e40:	f7ff ff1e 	bl	8003c80 <send_cmd>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d14a      	bne.n	8003ee0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
 8003e4e:	e00d      	b.n	8003e6c <USER_SPI_initialize+0x10c>
 8003e50:	7bfc      	ldrb	r4, [r7, #15]
 8003e52:	20ff      	movs	r0, #255	@ 0xff
 8003e54:	f7ff fe2a 	bl	8003aac <xchg_spi>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f104 0310 	add.w	r3, r4, #16
 8003e60:	443b      	add	r3, r7
 8003e62:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d9ee      	bls.n	8003e50 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003e72:	7a3b      	ldrb	r3, [r7, #8]
 8003e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <USER_SPI_initialize+0x120>
 8003e7c:	230c      	movs	r3, #12
 8003e7e:	e000      	b.n	8003e82 <USER_SPI_initialize+0x122>
 8003e80:	2304      	movs	r3, #4
 8003e82:	737b      	strb	r3, [r7, #13]
 8003e84:	e02c      	b.n	8003ee0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003e86:	2100      	movs	r1, #0
 8003e88:	20a9      	movs	r0, #169	@ 0xa9
 8003e8a:	f7ff fef9 	bl	8003c80 <send_cmd>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d804      	bhi.n	8003e9e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003e94:	2302      	movs	r3, #2
 8003e96:	737b      	strb	r3, [r7, #13]
 8003e98:	23a9      	movs	r3, #169	@ 0xa9
 8003e9a:	73bb      	strb	r3, [r7, #14]
 8003e9c:	e003      	b.n	8003ea6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	737b      	strb	r3, [r7, #13]
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003ea6:	bf00      	nop
 8003ea8:	f7ff fdea 	bl	8003a80 <SPI_Timer_Status>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <USER_SPI_initialize+0x162>
 8003eb2:	7bbb      	ldrb	r3, [r7, #14]
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fee2 	bl	8003c80 <send_cmd>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f2      	bne.n	8003ea8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003ec2:	f7ff fddd 	bl	8003a80 <SPI_Timer_Status>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <USER_SPI_initialize+0x17c>
 8003ecc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ed0:	2010      	movs	r0, #16
 8003ed2:	f7ff fed5 	bl	8003c80 <send_cmd>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <USER_SPI_initialize+0x180>
				ty = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003ee0:	4a14      	ldr	r2, [pc, #80]	@ (8003f34 <USER_SPI_initialize+0x1d4>)
 8003ee2:	7b7b      	ldrb	r3, [r7, #13]
 8003ee4:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003ee6:	f7ff fe4a 	bl	8003b7e <despiselect>

	if (ty) {			/* OK */
 8003eea:	7b7b      	ldrb	r3, [r7, #13]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d012      	beq.n	8003f16 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f30 <USER_SPI_initialize+0x1d0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003efa:	4b0d      	ldr	r3, [pc, #52]	@ (8003f30 <USER_SPI_initialize+0x1d0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0210 	orr.w	r2, r2, #16
 8003f02:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003f04:	4b09      	ldr	r3, [pc, #36]	@ (8003f2c <USER_SPI_initialize+0x1cc>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	4b06      	ldr	r3, [pc, #24]	@ (8003f2c <USER_SPI_initialize+0x1cc>)
 8003f12:	701a      	strb	r2, [r3, #0]
 8003f14:	e002      	b.n	8003f1c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003f16:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <USER_SPI_initialize+0x1cc>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003f1c:	4b03      	ldr	r3, [pc, #12]	@ (8003f2c <USER_SPI_initialize+0x1cc>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	b2db      	uxtb	r3, r3
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd90      	pop	{r4, r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000020 	.word	0x20000020
 8003f30:	20000118 	.word	0x20000118
 8003f34:	2000018c 	.word	0x2000018c

08003f38 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <USER_SPI_status+0x14>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e002      	b.n	8003f52 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003f4c:	4b04      	ldr	r3, [pc, #16]	@ (8003f60 <USER_SPI_status+0x28>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	b2db      	uxtb	r3, r3
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000020 	.word	0x20000020

08003f64 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	4603      	mov	r3, r0
 8003f72:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <USER_SPI_read+0x1c>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <USER_SPI_read+0x20>
 8003f80:	2304      	movs	r3, #4
 8003f82:	e04d      	b.n	8004020 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003f84:	4b28      	ldr	r3, [pc, #160]	@ (8004028 <USER_SPI_read+0xc4>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <USER_SPI_read+0x32>
 8003f92:	2303      	movs	r3, #3
 8003f94:	e044      	b.n	8004020 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003f96:	4b25      	ldr	r3, [pc, #148]	@ (800402c <USER_SPI_read+0xc8>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <USER_SPI_read+0x44>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	025b      	lsls	r3, r3, #9
 8003fa6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d111      	bne.n	8003fd2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	2011      	movs	r0, #17
 8003fb2:	f7ff fe65 	bl	8003c80 <send_cmd>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d129      	bne.n	8004010 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003fbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003fc0:	68b8      	ldr	r0, [r7, #8]
 8003fc2:	f7ff fe02 	bl	8003bca <rcvr_datablock>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d021      	beq.n	8004010 <USER_SPI_read+0xac>
			count = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	e01e      	b.n	8004010 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	2012      	movs	r0, #18
 8003fd6:	f7ff fe53 	bl	8003c80 <send_cmd>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d117      	bne.n	8004010 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003fe0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003fe4:	68b8      	ldr	r0, [r7, #8]
 8003fe6:	f7ff fdf0 	bl	8003bca <rcvr_datablock>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <USER_SPI_read+0xa2>
				buff += 512;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003ff6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1ed      	bne.n	8003fe0 <USER_SPI_read+0x7c>
 8004004:	e000      	b.n	8004008 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004006:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004008:	2100      	movs	r1, #0
 800400a:	200c      	movs	r0, #12
 800400c:	f7ff fe38 	bl	8003c80 <send_cmd>
		}
	}
	despiselect();
 8004010:	f7ff fdb5 	bl	8003b7e <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	bf14      	ite	ne
 800401a:	2301      	movne	r3, #1
 800401c:	2300      	moveq	r3, #0
 800401e:	b2db      	uxtb	r3, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000020 	.word	0x20000020
 800402c:	2000018c 	.word	0x2000018c

08004030 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	4603      	mov	r3, r0
 800403e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d102      	bne.n	800404c <USER_SPI_write+0x1c>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <USER_SPI_write+0x20>
 800404c:	2304      	movs	r3, #4
 800404e:	e063      	b.n	8004118 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004050:	4b33      	ldr	r3, [pc, #204]	@ (8004120 <USER_SPI_write+0xf0>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <USER_SPI_write+0x32>
 800405e:	2303      	movs	r3, #3
 8004060:	e05a      	b.n	8004118 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004062:	4b2f      	ldr	r3, [pc, #188]	@ (8004120 <USER_SPI_write+0xf0>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <USER_SPI_write+0x44>
 8004070:	2302      	movs	r3, #2
 8004072:	e051      	b.n	8004118 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004074:	4b2b      	ldr	r3, [pc, #172]	@ (8004124 <USER_SPI_write+0xf4>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <USER_SPI_write+0x56>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	025b      	lsls	r3, r3, #9
 8004084:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d110      	bne.n	80040ae <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	2018      	movs	r0, #24
 8004090:	f7ff fdf6 	bl	8003c80 <send_cmd>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d136      	bne.n	8004108 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800409a:	21fe      	movs	r1, #254	@ 0xfe
 800409c:	68b8      	ldr	r0, [r7, #8]
 800409e:	f7ff fdbd 	bl	8003c1c <xmit_datablock>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d02f      	beq.n	8004108 <USER_SPI_write+0xd8>
			count = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	e02c      	b.n	8004108 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80040ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004124 <USER_SPI_write+0xf4>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	f003 0306 	and.w	r3, r3, #6
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <USER_SPI_write+0x92>
 80040ba:	6839      	ldr	r1, [r7, #0]
 80040bc:	2097      	movs	r0, #151	@ 0x97
 80040be:	f7ff fddf 	bl	8003c80 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	2019      	movs	r0, #25
 80040c6:	f7ff fddb 	bl	8003c80 <send_cmd>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d11b      	bne.n	8004108 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80040d0:	21fc      	movs	r1, #252	@ 0xfc
 80040d2:	68b8      	ldr	r0, [r7, #8]
 80040d4:	f7ff fda2 	bl	8003c1c <xmit_datablock>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <USER_SPI_write+0xc4>
				buff += 512;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80040e4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1ee      	bne.n	80040d0 <USER_SPI_write+0xa0>
 80040f2:	e000      	b.n	80040f6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80040f4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80040f6:	21fd      	movs	r1, #253	@ 0xfd
 80040f8:	2000      	movs	r0, #0
 80040fa:	f7ff fd8f 	bl	8003c1c <xmit_datablock>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <USER_SPI_write+0xd8>
 8004104:	2301      	movs	r3, #1
 8004106:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004108:	f7ff fd39 	bl	8003b7e <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	bf14      	ite	ne
 8004112:	2301      	movne	r3, #1
 8004114:	2300      	moveq	r3, #0
 8004116:	b2db      	uxtb	r3, r3
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000020 	.word	0x20000020
 8004124:	2000018c 	.word	0x2000018c

08004128 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08c      	sub	sp, #48	@ 0x30
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	603a      	str	r2, [r7, #0]
 8004132:	71fb      	strb	r3, [r7, #7]
 8004134:	460b      	mov	r3, r1
 8004136:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <USER_SPI_ioctl+0x1a>
 800413e:	2304      	movs	r3, #4
 8004140:	e15a      	b.n	80043f8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004142:	4baf      	ldr	r3, [pc, #700]	@ (8004400 <USER_SPI_ioctl+0x2d8>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <USER_SPI_ioctl+0x2c>
 8004150:	2303      	movs	r3, #3
 8004152:	e151      	b.n	80043f8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800415a:	79bb      	ldrb	r3, [r7, #6]
 800415c:	2b04      	cmp	r3, #4
 800415e:	f200 8136 	bhi.w	80043ce <USER_SPI_ioctl+0x2a6>
 8004162:	a201      	add	r2, pc, #4	@ (adr r2, 8004168 <USER_SPI_ioctl+0x40>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	0800417d 	.word	0x0800417d
 800416c:	08004191 	.word	0x08004191
 8004170:	080043cf 	.word	0x080043cf
 8004174:	0800423d 	.word	0x0800423d
 8004178:	08004333 	.word	0x08004333
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800417c:	f7ff fd0c 	bl	8003b98 <spiselect>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8127 	beq.w	80043d6 <USER_SPI_ioctl+0x2ae>
 8004188:	2300      	movs	r3, #0
 800418a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800418e:	e122      	b.n	80043d6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004190:	2100      	movs	r1, #0
 8004192:	2009      	movs	r0, #9
 8004194:	f7ff fd74 	bl	8003c80 <send_cmd>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	f040 811d 	bne.w	80043da <USER_SPI_ioctl+0x2b2>
 80041a0:	f107 030c 	add.w	r3, r7, #12
 80041a4:	2110      	movs	r1, #16
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff fd0f 	bl	8003bca <rcvr_datablock>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 8113 	beq.w	80043da <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80041b4:	7b3b      	ldrb	r3, [r7, #12]
 80041b6:	099b      	lsrs	r3, r3, #6
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d111      	bne.n	80041e2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80041be:	7d7b      	ldrb	r3, [r7, #21]
 80041c0:	461a      	mov	r2, r3
 80041c2:	7d3b      	ldrb	r3, [r7, #20]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	4413      	add	r3, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	7cfb      	ldrb	r3, [r7, #19]
 80041cc:	041b      	lsls	r3, r3, #16
 80041ce:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80041d2:	4413      	add	r3, r2
 80041d4:	3301      	adds	r3, #1
 80041d6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	029a      	lsls	r2, r3, #10
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	e028      	b.n	8004234 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80041e2:	7c7b      	ldrb	r3, [r7, #17]
 80041e4:	f003 030f 	and.w	r3, r3, #15
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	7dbb      	ldrb	r3, [r7, #22]
 80041ec:	09db      	lsrs	r3, r3, #7
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	7d7b      	ldrb	r3, [r7, #21]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f003 0306 	and.w	r3, r3, #6
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	4413      	add	r3, r2
 8004202:	b2db      	uxtb	r3, r3
 8004204:	3302      	adds	r3, #2
 8004206:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800420a:	7d3b      	ldrb	r3, [r7, #20]
 800420c:	099b      	lsrs	r3, r3, #6
 800420e:	b2db      	uxtb	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	7cfb      	ldrb	r3, [r7, #19]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	441a      	add	r2, r3
 8004218:	7cbb      	ldrb	r3, [r7, #18]
 800421a:	029b      	lsls	r3, r3, #10
 800421c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004220:	4413      	add	r3, r2
 8004222:	3301      	adds	r3, #1
 8004224:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004226:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800422a:	3b09      	subs	r3, #9
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	409a      	lsls	r2, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800423a:	e0ce      	b.n	80043da <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800423c:	4b71      	ldr	r3, [pc, #452]	@ (8004404 <USER_SPI_ioctl+0x2dc>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d031      	beq.n	80042ac <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004248:	2100      	movs	r1, #0
 800424a:	208d      	movs	r0, #141	@ 0x8d
 800424c:	f7ff fd18 	bl	8003c80 <send_cmd>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	f040 80c3 	bne.w	80043de <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004258:	20ff      	movs	r0, #255	@ 0xff
 800425a:	f7ff fc27 	bl	8003aac <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800425e:	f107 030c 	add.w	r3, r7, #12
 8004262:	2110      	movs	r1, #16
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff fcb0 	bl	8003bca <rcvr_datablock>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 80b6 	beq.w	80043de <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004272:	2330      	movs	r3, #48	@ 0x30
 8004274:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004278:	e007      	b.n	800428a <USER_SPI_ioctl+0x162>
 800427a:	20ff      	movs	r0, #255	@ 0xff
 800427c:	f7ff fc16 	bl	8003aac <xchg_spi>
 8004280:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004284:	3b01      	subs	r3, #1
 8004286:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800428a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f3      	bne.n	800427a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004292:	7dbb      	ldrb	r3, [r7, #22]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	2310      	movs	r3, #16
 800429c:	fa03 f202 	lsl.w	r2, r3, r2
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80042aa:	e098      	b.n	80043de <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80042ac:	2100      	movs	r1, #0
 80042ae:	2009      	movs	r0, #9
 80042b0:	f7ff fce6 	bl	8003c80 <send_cmd>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f040 8091 	bne.w	80043de <USER_SPI_ioctl+0x2b6>
 80042bc:	f107 030c 	add.w	r3, r7, #12
 80042c0:	2110      	movs	r1, #16
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fc81 	bl	8003bca <rcvr_datablock>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8087 	beq.w	80043de <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80042d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004404 <USER_SPI_ioctl+0x2dc>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d012      	beq.n	8004302 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80042dc:	7dbb      	ldrb	r3, [r7, #22]
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80042e4:	7dfa      	ldrb	r2, [r7, #23]
 80042e6:	09d2      	lsrs	r2, r2, #7
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	4413      	add	r3, r2
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	7e7b      	ldrb	r3, [r7, #25]
 80042f0:	099b      	lsrs	r3, r3, #6
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	e013      	b.n	800432a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004302:	7dbb      	ldrb	r3, [r7, #22]
 8004304:	109b      	asrs	r3, r3, #2
 8004306:	b29b      	uxth	r3, r3
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	3301      	adds	r3, #1
 800430e:	7dfa      	ldrb	r2, [r7, #23]
 8004310:	00d2      	lsls	r2, r2, #3
 8004312:	f002 0218 	and.w	r2, r2, #24
 8004316:	7df9      	ldrb	r1, [r7, #23]
 8004318:	0949      	lsrs	r1, r1, #5
 800431a:	b2c9      	uxtb	r1, r1
 800431c:	440a      	add	r2, r1
 800431e:	3201      	adds	r2, #1
 8004320:	fb02 f303 	mul.w	r3, r2, r3
 8004324:	461a      	mov	r2, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8004330:	e055      	b.n	80043de <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004332:	4b34      	ldr	r3, [pc, #208]	@ (8004404 <USER_SPI_ioctl+0x2dc>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	f003 0306 	and.w	r3, r3, #6
 800433a:	2b00      	cmp	r3, #0
 800433c:	d051      	beq.n	80043e2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800433e:	f107 020c 	add.w	r2, r7, #12
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	210b      	movs	r1, #11
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff feee 	bl	8004128 <USER_SPI_ioctl>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d149      	bne.n	80043e6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004352:	7b3b      	ldrb	r3, [r7, #12]
 8004354:	099b      	lsrs	r3, r3, #6
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d104      	bne.n	8004366 <USER_SPI_ioctl+0x23e>
 800435c:	7dbb      	ldrb	r3, [r7, #22]
 800435e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d041      	beq.n	80043ea <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	623b      	str	r3, [r7, #32]
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8004376:	4b23      	ldr	r3, [pc, #140]	@ (8004404 <USER_SPI_ioctl+0x2dc>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d105      	bne.n	800438e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004384:	025b      	lsls	r3, r3, #9
 8004386:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	025b      	lsls	r3, r3, #9
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800438e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004390:	2020      	movs	r0, #32
 8004392:	f7ff fc75 	bl	8003c80 <send_cmd>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d128      	bne.n	80043ee <USER_SPI_ioctl+0x2c6>
 800439c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800439e:	2021      	movs	r0, #33	@ 0x21
 80043a0:	f7ff fc6e 	bl	8003c80 <send_cmd>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d121      	bne.n	80043ee <USER_SPI_ioctl+0x2c6>
 80043aa:	2100      	movs	r1, #0
 80043ac:	2026      	movs	r0, #38	@ 0x26
 80043ae:	f7ff fc67 	bl	8003c80 <send_cmd>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d11a      	bne.n	80043ee <USER_SPI_ioctl+0x2c6>
 80043b8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80043bc:	f7ff fbbc 	bl	8003b38 <wait_ready>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d013      	beq.n	80043ee <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80043c6:	2300      	movs	r3, #0
 80043c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80043cc:	e00f      	b.n	80043ee <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80043ce:	2304      	movs	r3, #4
 80043d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80043d4:	e00c      	b.n	80043f0 <USER_SPI_ioctl+0x2c8>
		break;
 80043d6:	bf00      	nop
 80043d8:	e00a      	b.n	80043f0 <USER_SPI_ioctl+0x2c8>
		break;
 80043da:	bf00      	nop
 80043dc:	e008      	b.n	80043f0 <USER_SPI_ioctl+0x2c8>
		break;
 80043de:	bf00      	nop
 80043e0:	e006      	b.n	80043f0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80043e2:	bf00      	nop
 80043e4:	e004      	b.n	80043f0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80043e6:	bf00      	nop
 80043e8:	e002      	b.n	80043f0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80043ea:	bf00      	nop
 80043ec:	e000      	b.n	80043f0 <USER_SPI_ioctl+0x2c8>
		break;
 80043ee:	bf00      	nop
	}

	despiselect();
 80043f0:	f7ff fbc5 	bl	8003b7e <despiselect>

	return res;
 80043f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3730      	adds	r7, #48	@ 0x30
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20000020 	.word	0x20000020
 8004404:	2000018c 	.word	0x2000018c

08004408 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	4a08      	ldr	r2, [pc, #32]	@ (8004438 <disk_status+0x30>)
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	79fa      	ldrb	r2, [r7, #7]
 8004420:	4905      	ldr	r1, [pc, #20]	@ (8004438 <disk_status+0x30>)
 8004422:	440a      	add	r2, r1
 8004424:	7a12      	ldrb	r2, [r2, #8]
 8004426:	4610      	mov	r0, r2
 8004428:	4798      	blx	r3
 800442a:	4603      	mov	r3, r0
 800442c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800442e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	200001c0 	.word	0x200001c0

0800443c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	4a0d      	ldr	r2, [pc, #52]	@ (8004484 <disk_initialize+0x48>)
 800444e:	5cd3      	ldrb	r3, [r2, r3]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d111      	bne.n	8004478 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	4a0b      	ldr	r2, [pc, #44]	@ (8004484 <disk_initialize+0x48>)
 8004458:	2101      	movs	r1, #1
 800445a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	4a09      	ldr	r2, [pc, #36]	@ (8004484 <disk_initialize+0x48>)
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	79fa      	ldrb	r2, [r7, #7]
 800446a:	4906      	ldr	r1, [pc, #24]	@ (8004484 <disk_initialize+0x48>)
 800446c:	440a      	add	r2, r1
 800446e:	7a12      	ldrb	r2, [r2, #8]
 8004470:	4610      	mov	r0, r2
 8004472:	4798      	blx	r3
 8004474:	4603      	mov	r3, r0
 8004476:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004478:	7bfb      	ldrb	r3, [r7, #15]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	200001c0 	.word	0x200001c0

08004488 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4603      	mov	r3, r0
 8004496:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	4a0a      	ldr	r2, [pc, #40]	@ (80044c4 <disk_read+0x3c>)
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	689c      	ldr	r4, [r3, #8]
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	4a07      	ldr	r2, [pc, #28]	@ (80044c4 <disk_read+0x3c>)
 80044a8:	4413      	add	r3, r2
 80044aa:	7a18      	ldrb	r0, [r3, #8]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	47a0      	blx	r4
 80044b4:	4603      	mov	r3, r0
 80044b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd90      	pop	{r4, r7, pc}
 80044c2:	bf00      	nop
 80044c4:	200001c0 	.word	0x200001c0

080044c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4603      	mov	r3, r0
 80044d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	4a0a      	ldr	r2, [pc, #40]	@ (8004504 <disk_write+0x3c>)
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	68dc      	ldr	r4, [r3, #12]
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	4a07      	ldr	r2, [pc, #28]	@ (8004504 <disk_write+0x3c>)
 80044e8:	4413      	add	r3, r2
 80044ea:	7a18      	ldrb	r0, [r3, #8]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	47a0      	blx	r4
 80044f4:	4603      	mov	r3, r0
 80044f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd90      	pop	{r4, r7, pc}
 8004502:	bf00      	nop
 8004504:	200001c0 	.word	0x200001c0

08004508 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	603a      	str	r2, [r7, #0]
 8004512:	71fb      	strb	r3, [r7, #7]
 8004514:	460b      	mov	r3, r1
 8004516:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	4a09      	ldr	r2, [pc, #36]	@ (8004540 <disk_ioctl+0x38>)
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	79fa      	ldrb	r2, [r7, #7]
 8004526:	4906      	ldr	r1, [pc, #24]	@ (8004540 <disk_ioctl+0x38>)
 8004528:	440a      	add	r2, r1
 800452a:	7a10      	ldrb	r0, [r2, #8]
 800452c:	79b9      	ldrb	r1, [r7, #6]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	4798      	blx	r3
 8004532:	4603      	mov	r3, r0
 8004534:	73fb      	strb	r3, [r7, #15]
  return res;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	200001c0 	.word	0x200001c0

08004544 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3301      	adds	r3, #1
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004554:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	b21a      	sxth	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	b21b      	sxth	r3, r3
 8004562:	4313      	orrs	r3, r2
 8004564:	b21b      	sxth	r3, r3
 8004566:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004568:	89fb      	ldrh	r3, [r7, #14]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3303      	adds	r3, #3
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	3202      	adds	r2, #2
 800458e:	7812      	ldrb	r2, [r2, #0]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	3201      	adds	r2, #1
 800459c:	7812      	ldrb	r2, [r2, #0]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
	return rv;
 80045ae:	68fb      	ldr	r3, [r7, #12]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	887a      	ldrh	r2, [r7, #2]
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
 80045d4:	887b      	ldrh	r3, [r7, #2]
 80045d6:	0a1b      	lsrs	r3, r3, #8
 80045d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	887a      	ldrh	r2, [r7, #2]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	607a      	str	r2, [r7, #4]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	0a1b      	lsrs	r3, r3, #8
 800460c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	0a1b      	lsrs	r3, r3, #8
 800461e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	607a      	str	r2, [r7, #4]
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	0a1b      	lsrs	r3, r3, #8
 8004630:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800464a:	b480      	push	{r7}
 800464c:	b087      	sub	sp, #28
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00d      	beq.n	8004680 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	1c53      	adds	r3, r2, #1
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	1c59      	adds	r1, r3, #1
 800466e:	6179      	str	r1, [r7, #20]
 8004670:	7812      	ldrb	r2, [r2, #0]
 8004672:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3b01      	subs	r3, #1
 8004678:	607b      	str	r3, [r7, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f1      	bne.n	8004664 <mem_cpy+0x1a>
	}
}
 8004680:	bf00      	nop
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	617a      	str	r2, [r7, #20]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f3      	bne.n	800469c <mem_set+0x10>
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80046c2:	b480      	push	{r7}
 80046c4:	b089      	sub	sp, #36	@ 0x24
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	61fa      	str	r2, [r7, #28]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	4619      	mov	r1, r3
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	61ba      	str	r2, [r7, #24]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	1acb      	subs	r3, r1, r3
 80046ee:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <mem_cmp+0x40>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0eb      	beq.n	80046da <mem_cmp+0x18>

	return r;
 8004702:	697b      	ldr	r3, [r7, #20]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3724      	adds	r7, #36	@ 0x24
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800471a:	e002      	b.n	8004722 <chk_chr+0x12>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3301      	adds	r3, #1
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <chk_chr+0x26>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	4293      	cmp	r3, r2
 8004734:	d1f2      	bne.n	800471c <chk_chr+0xc>
	return *str;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	781b      	ldrb	r3, [r3, #0]
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004752:	2300      	movs	r3, #0
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	e029      	b.n	80047b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800475c:	4a27      	ldr	r2, [pc, #156]	@ (80047fc <chk_lock+0xb4>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	4413      	add	r3, r2
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01d      	beq.n	80047a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800476a:	4a24      	ldr	r2, [pc, #144]	@ (80047fc <chk_lock+0xb4>)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	4413      	add	r3, r2
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d116      	bne.n	80047aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800477c:	4a1f      	ldr	r2, [pc, #124]	@ (80047fc <chk_lock+0xb4>)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	4413      	add	r3, r2
 8004784:	3304      	adds	r3, #4
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800478c:	429a      	cmp	r2, r3
 800478e:	d10c      	bne.n	80047aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004790:	4a1a      	ldr	r2, [pc, #104]	@ (80047fc <chk_lock+0xb4>)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	4413      	add	r3, r2
 8004798:	3308      	adds	r3, #8
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d102      	bne.n	80047aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80047a4:	e007      	b.n	80047b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80047a6:	2301      	movs	r3, #1
 80047a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3301      	adds	r3, #1
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d9d2      	bls.n	800475c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d109      	bne.n	80047d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d102      	bne.n	80047c8 <chk_lock+0x80>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d101      	bne.n	80047cc <chk_lock+0x84>
 80047c8:	2300      	movs	r3, #0
 80047ca:	e010      	b.n	80047ee <chk_lock+0xa6>
 80047cc:	2312      	movs	r3, #18
 80047ce:	e00e      	b.n	80047ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d108      	bne.n	80047e8 <chk_lock+0xa0>
 80047d6:	4a09      	ldr	r2, [pc, #36]	@ (80047fc <chk_lock+0xb4>)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	4413      	add	r3, r2
 80047de:	330c      	adds	r3, #12
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e6:	d101      	bne.n	80047ec <chk_lock+0xa4>
 80047e8:	2310      	movs	r3, #16
 80047ea:	e000      	b.n	80047ee <chk_lock+0xa6>
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	200001a0 	.word	0x200001a0

08004800 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004806:	2300      	movs	r3, #0
 8004808:	607b      	str	r3, [r7, #4]
 800480a:	e002      	b.n	8004812 <enq_lock+0x12>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3301      	adds	r3, #1
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d806      	bhi.n	8004826 <enq_lock+0x26>
 8004818:	4a09      	ldr	r2, [pc, #36]	@ (8004840 <enq_lock+0x40>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	4413      	add	r3, r2
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f2      	bne.n	800480c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b02      	cmp	r3, #2
 800482a:	bf14      	ite	ne
 800482c:	2301      	movne	r3, #1
 800482e:	2300      	moveq	r3, #0
 8004830:	b2db      	uxtb	r3, r3
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	200001a0 	.word	0x200001a0

08004844 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e01f      	b.n	8004894 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004854:	4a41      	ldr	r2, [pc, #260]	@ (800495c <inc_lock+0x118>)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	4413      	add	r3, r2
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d113      	bne.n	800488e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004866:	4a3d      	ldr	r2, [pc, #244]	@ (800495c <inc_lock+0x118>)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	4413      	add	r3, r2
 800486e:	3304      	adds	r3, #4
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004876:	429a      	cmp	r2, r3
 8004878:	d109      	bne.n	800488e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800487a:	4a38      	ldr	r2, [pc, #224]	@ (800495c <inc_lock+0x118>)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	4413      	add	r3, r2
 8004882:	3308      	adds	r3, #8
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800488a:	429a      	cmp	r2, r3
 800488c:	d006      	beq.n	800489c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3301      	adds	r3, #1
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d9dc      	bls.n	8004854 <inc_lock+0x10>
 800489a:	e000      	b.n	800489e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800489c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d132      	bne.n	800490a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	e002      	b.n	80048b0 <inc_lock+0x6c>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3301      	adds	r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d806      	bhi.n	80048c4 <inc_lock+0x80>
 80048b6:	4a29      	ldr	r2, [pc, #164]	@ (800495c <inc_lock+0x118>)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	4413      	add	r3, r2
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f2      	bne.n	80048aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d101      	bne.n	80048ce <inc_lock+0x8a>
 80048ca:	2300      	movs	r3, #0
 80048cc:	e040      	b.n	8004950 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4922      	ldr	r1, [pc, #136]	@ (800495c <inc_lock+0x118>)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	440b      	add	r3, r1
 80048da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	491e      	ldr	r1, [pc, #120]	@ (800495c <inc_lock+0x118>)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	440b      	add	r3, r1
 80048e8:	3304      	adds	r3, #4
 80048ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	491a      	ldr	r1, [pc, #104]	@ (800495c <inc_lock+0x118>)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	440b      	add	r3, r1
 80048f8:	3308      	adds	r3, #8
 80048fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80048fc:	4a17      	ldr	r2, [pc, #92]	@ (800495c <inc_lock+0x118>)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	4413      	add	r3, r2
 8004904:	330c      	adds	r3, #12
 8004906:	2200      	movs	r2, #0
 8004908:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <inc_lock+0xe0>
 8004910:	4a12      	ldr	r2, [pc, #72]	@ (800495c <inc_lock+0x118>)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	011b      	lsls	r3, r3, #4
 8004916:	4413      	add	r3, r2
 8004918:	330c      	adds	r3, #12
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <inc_lock+0xe0>
 8004920:	2300      	movs	r3, #0
 8004922:	e015      	b.n	8004950 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d108      	bne.n	800493c <inc_lock+0xf8>
 800492a:	4a0c      	ldr	r2, [pc, #48]	@ (800495c <inc_lock+0x118>)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	4413      	add	r3, r2
 8004932:	330c      	adds	r3, #12
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	3301      	adds	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	e001      	b.n	8004940 <inc_lock+0xfc>
 800493c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004940:	4906      	ldr	r1, [pc, #24]	@ (800495c <inc_lock+0x118>)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	440b      	add	r3, r1
 8004948:	330c      	adds	r3, #12
 800494a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3301      	adds	r3, #1
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	200001a0 	.word	0x200001a0

08004960 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3b01      	subs	r3, #1
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d825      	bhi.n	80049c0 <dec_lock+0x60>
		n = Files[i].ctr;
 8004974:	4a17      	ldr	r2, [pc, #92]	@ (80049d4 <dec_lock+0x74>)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	4413      	add	r3, r2
 800497c:	330c      	adds	r3, #12
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004982:	89fb      	ldrh	r3, [r7, #14]
 8004984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004988:	d101      	bne.n	800498e <dec_lock+0x2e>
 800498a:	2300      	movs	r3, #0
 800498c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800498e:	89fb      	ldrh	r3, [r7, #14]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <dec_lock+0x3a>
 8004994:	89fb      	ldrh	r3, [r7, #14]
 8004996:	3b01      	subs	r3, #1
 8004998:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800499a:	4a0e      	ldr	r2, [pc, #56]	@ (80049d4 <dec_lock+0x74>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	4413      	add	r3, r2
 80049a2:	330c      	adds	r3, #12
 80049a4:	89fa      	ldrh	r2, [r7, #14]
 80049a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80049a8:	89fb      	ldrh	r3, [r7, #14]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d105      	bne.n	80049ba <dec_lock+0x5a>
 80049ae:	4a09      	ldr	r2, [pc, #36]	@ (80049d4 <dec_lock+0x74>)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	4413      	add	r3, r2
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	737b      	strb	r3, [r7, #13]
 80049be:	e001      	b.n	80049c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80049c0:	2302      	movs	r3, #2
 80049c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80049c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	200001a0 	.word	0x200001a0

080049d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e010      	b.n	8004a08 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80049e6:	4a0d      	ldr	r2, [pc, #52]	@ (8004a1c <clear_lock+0x44>)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	4413      	add	r3, r2
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d105      	bne.n	8004a02 <clear_lock+0x2a>
 80049f6:	4a09      	ldr	r2, [pc, #36]	@ (8004a1c <clear_lock+0x44>)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	4413      	add	r3, r2
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3301      	adds	r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d9eb      	bls.n	80049e6 <clear_lock+0xe>
	}
}
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	200001a0 	.word	0x200001a0

08004a20 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	78db      	ldrb	r3, [r3, #3]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d034      	beq.n	8004a9e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	7858      	ldrb	r0, [r3, #1]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004a44:	2301      	movs	r3, #1
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	f7ff fd3e 	bl	80044c8 <disk_write>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
 8004a56:	e022      	b.n	8004a9e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	1ad2      	subs	r2, r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d217      	bcs.n	8004a9e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	789b      	ldrb	r3, [r3, #2]
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	e010      	b.n	8004a98 <sync_window+0x78>
					wsect += fs->fsize;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	7858      	ldrb	r0, [r3, #1]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	f7ff fd1b 	bl	80044c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d8eb      	bhi.n	8004a76 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d01b      	beq.n	8004af8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff ffad 	bl	8004a20 <sync_window>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d113      	bne.n	8004af8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	7858      	ldrb	r0, [r3, #1]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004ada:	2301      	movs	r3, #1
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	f7ff fcd3 	bl	8004488 <disk_read>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d004      	beq.n	8004af2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff ff87 	bl	8004a20 <sync_window>
 8004b12:	4603      	mov	r3, r0
 8004b14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d158      	bne.n	8004bce <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d148      	bne.n	8004bb6 <sync_fs+0xb2>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	791b      	ldrb	r3, [r3, #4]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d144      	bne.n	8004bb6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3330      	adds	r3, #48	@ 0x30
 8004b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b34:	2100      	movs	r1, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fda8 	bl	800468c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3330      	adds	r3, #48	@ 0x30
 8004b40:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004b44:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff fd37 	bl	80045bc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3330      	adds	r3, #48	@ 0x30
 8004b52:	4921      	ldr	r1, [pc, #132]	@ (8004bd8 <sync_fs+0xd4>)
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff fd4c 	bl	80045f2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3330      	adds	r3, #48	@ 0x30
 8004b5e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004b62:	491e      	ldr	r1, [pc, #120]	@ (8004bdc <sync_fs+0xd8>)
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fd44 	bl	80045f2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3330      	adds	r3, #48	@ 0x30
 8004b6e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	4619      	mov	r1, r3
 8004b78:	4610      	mov	r0, r2
 8004b7a:	f7ff fd3a 	bl	80045f2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3330      	adds	r3, #48	@ 0x30
 8004b82:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	f7ff fd30 	bl	80045f2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	7858      	ldrb	r0, [r3, #1]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004baa:	2301      	movs	r3, #1
 8004bac:	f7ff fc8c 	bl	80044c8 <disk_write>
			fs->fsi_flag = 0;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	785b      	ldrb	r3, [r3, #1]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fca2 	bl	8004508 <disk_ioctl>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <sync_fs+0xca>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	41615252 	.word	0x41615252
 8004bdc:	61417272 	.word	0x61417272

08004be0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	3b02      	subs	r3, #2
 8004bee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	3b02      	subs	r3, #2
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d301      	bcc.n	8004c00 <clust2sect+0x20>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e008      	b.n	8004c12 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	895b      	ldrh	r3, [r3, #10]
 8004c04:	461a      	mov	r2, r3
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	fb03 f202 	mul.w	r2, r3, r2
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c10:	4413      	add	r3, r2
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b086      	sub	sp, #24
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d904      	bls.n	8004c3e <get_fat+0x20>
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d302      	bcc.n	8004c44 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004c3e:	2301      	movs	r3, #1
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	e08e      	b.n	8004d62 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004c44:	f04f 33ff 	mov.w	r3, #4294967295
 8004c48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d061      	beq.n	8004d16 <get_fat+0xf8>
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	dc7b      	bgt.n	8004d4e <get_fat+0x130>
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d002      	beq.n	8004c60 <get_fat+0x42>
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d041      	beq.n	8004ce2 <get_fat+0xc4>
 8004c5e:	e076      	b.n	8004d4e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	6a1a      	ldr	r2, [r3, #32]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	0a5b      	lsrs	r3, r3, #9
 8004c76:	4413      	add	r3, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6938      	ldr	r0, [r7, #16]
 8004c7c:	f7ff ff14 	bl	8004aa8 <move_window>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d166      	bne.n	8004d54 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	60fa      	str	r2, [r7, #12]
 8004c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4413      	add	r3, r2
 8004c94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c98:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	6a1a      	ldr	r2, [r3, #32]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	0a5b      	lsrs	r3, r3, #9
 8004ca2:	4413      	add	r3, r2
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	6938      	ldr	r0, [r7, #16]
 8004ca8:	f7ff fefe 	bl	8004aa8 <move_window>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d152      	bne.n	8004d58 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004cc0:	021b      	lsls	r3, r3, #8
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <get_fat+0xba>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	e002      	b.n	8004cde <get_fat+0xc0>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cde:	617b      	str	r3, [r7, #20]
			break;
 8004ce0:	e03f      	b.n	8004d62 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6a1a      	ldr	r2, [r3, #32]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	0a1b      	lsrs	r3, r3, #8
 8004cea:	4413      	add	r3, r2
 8004cec:	4619      	mov	r1, r3
 8004cee:	6938      	ldr	r0, [r7, #16]
 8004cf0:	f7ff feda 	bl	8004aa8 <move_window>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d130      	bne.n	8004d5c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004d08:	4413      	add	r3, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fc1a 	bl	8004544 <ld_word>
 8004d10:	4603      	mov	r3, r0
 8004d12:	617b      	str	r3, [r7, #20]
			break;
 8004d14:	e025      	b.n	8004d62 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6a1a      	ldr	r2, [r3, #32]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	09db      	lsrs	r3, r3, #7
 8004d1e:	4413      	add	r3, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	6938      	ldr	r0, [r7, #16]
 8004d24:	f7ff fec0 	bl	8004aa8 <move_window>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d118      	bne.n	8004d60 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004d3c:	4413      	add	r3, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fc19 	bl	8004576 <ld_dword>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d4a:	617b      	str	r3, [r7, #20]
			break;
 8004d4c:	e009      	b.n	8004d62 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004d4e:	2301      	movs	r3, #1
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	e006      	b.n	8004d62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d54:	bf00      	nop
 8004d56:	e004      	b.n	8004d62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d58:	bf00      	nop
 8004d5a:	e002      	b.n	8004d62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004d5c:	bf00      	nop
 8004d5e:	e000      	b.n	8004d62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d60:	bf00      	nop
		}
	}

	return val;
 8004d62:	697b      	ldr	r3, [r7, #20]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b089      	sub	sp, #36	@ 0x24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004d78:	2302      	movs	r3, #2
 8004d7a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	f240 80d9 	bls.w	8004f36 <put_fat+0x1ca>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	f080 80d3 	bcs.w	8004f36 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	f000 8096 	beq.w	8004ec6 <put_fat+0x15a>
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	f300 80cb 	bgt.w	8004f36 <put_fat+0x1ca>
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d002      	beq.n	8004daa <put_fat+0x3e>
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d06e      	beq.n	8004e86 <put_fat+0x11a>
 8004da8:	e0c5      	b.n	8004f36 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4413      	add	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1a      	ldr	r2, [r3, #32]
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	0a5b      	lsrs	r3, r3, #9
 8004dc0:	4413      	add	r3, r2
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f7ff fe6f 	bl	8004aa8 <move_window>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004dce:	7ffb      	ldrb	r3, [r7, #31]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f040 80a9 	bne.w	8004f28 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	1c59      	adds	r1, r3, #1
 8004de0:	61b9      	str	r1, [r7, #24]
 8004de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de6:	4413      	add	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00d      	beq.n	8004e10 <put_fat+0xa4>
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	b25b      	sxtb	r3, r3
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	b25a      	sxtb	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	b25b      	sxtb	r3, r3
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	b25b      	sxtb	r3, r3
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	b25b      	sxtb	r3, r3
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e001      	b.n	8004e14 <put_fat+0xa8>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a1a      	ldr	r2, [r3, #32]
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	0a5b      	lsrs	r3, r3, #9
 8004e26:	4413      	add	r3, r2
 8004e28:	4619      	mov	r1, r3
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7ff fe3c 	bl	8004aa8 <move_window>
 8004e30:	4603      	mov	r3, r0
 8004e32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e34:	7ffb      	ldrb	r3, [r7, #31]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d178      	bne.n	8004f2c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e46:	4413      	add	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <put_fat+0xf0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	091b      	lsrs	r3, r3, #4
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e00e      	b.n	8004e7a <put_fat+0x10e>
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b25b      	sxtb	r3, r3
 8004e62:	f023 030f 	bic.w	r3, r3, #15
 8004e66:	b25a      	sxtb	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	b25b      	sxtb	r3, r3
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	b25b      	sxtb	r3, r3
 8004e74:	4313      	orrs	r3, r2
 8004e76:	b25b      	sxtb	r3, r3
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	70da      	strb	r2, [r3, #3]
			break;
 8004e84:	e057      	b.n	8004f36 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a1a      	ldr	r2, [r3, #32]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	0a1b      	lsrs	r3, r3, #8
 8004e8e:	4413      	add	r3, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff fe08 	bl	8004aa8 <move_window>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e9c:	7ffb      	ldrb	r3, [r7, #31]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d146      	bne.n	8004f30 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004eb0:	4413      	add	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	b292      	uxth	r2, r2
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fb7f 	bl	80045bc <st_word>
			fs->wflag = 1;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	70da      	strb	r2, [r3, #3]
			break;
 8004ec4:	e037      	b.n	8004f36 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a1a      	ldr	r2, [r3, #32]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	09db      	lsrs	r3, r3, #7
 8004ece:	4413      	add	r3, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7ff fde8 	bl	8004aa8 <move_window>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004edc:	7ffb      	ldrb	r3, [r7, #31]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d128      	bne.n	8004f34 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004ef6:	4413      	add	r3, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff fb3c 	bl	8004576 <ld_dword>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004f04:	4323      	orrs	r3, r4
 8004f06:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004f16:	4413      	add	r3, r2
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fb69 	bl	80045f2 <st_dword>
			fs->wflag = 1;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	70da      	strb	r2, [r3, #3]
			break;
 8004f26:	e006      	b.n	8004f36 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004f28:	bf00      	nop
 8004f2a:	e004      	b.n	8004f36 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004f2c:	bf00      	nop
 8004f2e:	e002      	b.n	8004f36 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004f30:	bf00      	nop
 8004f32:	e000      	b.n	8004f36 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004f34:	bf00      	nop
		}
	}
	return res;
 8004f36:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3724      	adds	r7, #36	@ 0x24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd90      	pop	{r4, r7, pc}

08004f40 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d904      	bls.n	8004f66 <remove_chain+0x26>
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d301      	bcc.n	8004f6a <remove_chain+0x2a>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e04b      	b.n	8005002 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00c      	beq.n	8004f8a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004f70:	f04f 32ff 	mov.w	r2, #4294967295
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	69b8      	ldr	r0, [r7, #24]
 8004f78:	f7ff fef8 	bl	8004d6c <put_fat>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004f80:	7ffb      	ldrb	r3, [r7, #31]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <remove_chain+0x4a>
 8004f86:	7ffb      	ldrb	r3, [r7, #31]
 8004f88:	e03b      	b.n	8005002 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f7ff fe46 	bl	8004c1e <get_fat>
 8004f92:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d031      	beq.n	8004ffe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <remove_chain+0x64>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e02e      	b.n	8005002 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	d101      	bne.n	8004fb0 <remove_chain+0x70>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e028      	b.n	8005002 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	69b8      	ldr	r0, [r7, #24]
 8004fb6:	f7ff fed9 	bl	8004d6c <put_fat>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004fbe:	7ffb      	ldrb	r3, [r7, #31]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <remove_chain+0x88>
 8004fc4:	7ffb      	ldrb	r3, [r7, #31]
 8004fc6:	e01c      	b.n	8005002 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	3b02      	subs	r3, #2
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d20b      	bcs.n	8004fee <remove_chain+0xae>
			fs->free_clst++;
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	791b      	ldrb	r3, [r3, #4]
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d3c6      	bcc.n	8004f8a <remove_chain+0x4a>
 8004ffc:	e000      	b.n	8005000 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004ffe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b088      	sub	sp, #32
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10d      	bne.n	800503c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d004      	beq.n	8005036 <create_chain+0x2c>
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	429a      	cmp	r2, r3
 8005034:	d31b      	bcc.n	800506e <create_chain+0x64>
 8005036:	2301      	movs	r3, #1
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	e018      	b.n	800506e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800503c:	6839      	ldr	r1, [r7, #0]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff fded 	bl	8004c1e <get_fat>
 8005044:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d801      	bhi.n	8005050 <create_chain+0x46>
 800504c:	2301      	movs	r3, #1
 800504e:	e070      	b.n	8005132 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005056:	d101      	bne.n	800505c <create_chain+0x52>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	e06a      	b.n	8005132 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	429a      	cmp	r2, r3
 8005064:	d201      	bcs.n	800506a <create_chain+0x60>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	e063      	b.n	8005132 <create_chain+0x128>
		scl = clst;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3301      	adds	r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	429a      	cmp	r2, r3
 8005080:	d307      	bcc.n	8005092 <create_chain+0x88>
				ncl = 2;
 8005082:	2302      	movs	r3, #2
 8005084:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	429a      	cmp	r2, r3
 800508c:	d901      	bls.n	8005092 <create_chain+0x88>
 800508e:	2300      	movs	r3, #0
 8005090:	e04f      	b.n	8005132 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005092:	69f9      	ldr	r1, [r7, #28]
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff fdc2 	bl	8004c1e <get_fat>
 800509a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00e      	beq.n	80050c0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d003      	beq.n	80050b0 <create_chain+0xa6>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d101      	bne.n	80050b4 <create_chain+0xaa>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	e03e      	b.n	8005132 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d1da      	bne.n	8005072 <create_chain+0x68>
 80050bc:	2300      	movs	r3, #0
 80050be:	e038      	b.n	8005132 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80050c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80050c2:	f04f 32ff 	mov.w	r2, #4294967295
 80050c6:	69f9      	ldr	r1, [r7, #28]
 80050c8:	6938      	ldr	r0, [r7, #16]
 80050ca:	f7ff fe4f 	bl	8004d6c <put_fat>
 80050ce:	4603      	mov	r3, r0
 80050d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <create_chain+0xe2>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d006      	beq.n	80050ec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	6839      	ldr	r1, [r7, #0]
 80050e2:	6938      	ldr	r0, [r7, #16]
 80050e4:	f7ff fe42 	bl	8004d6c <put_fat>
 80050e8:	4603      	mov	r3, r0
 80050ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80050ec:	7dfb      	ldrb	r3, [r7, #23]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d116      	bne.n	8005120 <create_chain+0x116>
		fs->last_clst = ncl;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	3b02      	subs	r3, #2
 8005102:	429a      	cmp	r2, r3
 8005104:	d804      	bhi.n	8005110 <create_chain+0x106>
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	1e5a      	subs	r2, r3, #1
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	791b      	ldrb	r3, [r3, #4]
 8005114:	f043 0301 	orr.w	r3, r3, #1
 8005118:	b2da      	uxtb	r2, r3
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	711a      	strb	r2, [r3, #4]
 800511e:	e007      	b.n	8005130 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005120:	7dfb      	ldrb	r3, [r7, #23]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d102      	bne.n	800512c <create_chain+0x122>
 8005126:	f04f 33ff 	mov.w	r3, #4294967295
 800512a:	e000      	b.n	800512e <create_chain+0x124>
 800512c:	2301      	movs	r3, #1
 800512e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005130:	69fb      	ldr	r3, [r7, #28]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800513a:	b480      	push	{r7}
 800513c:	b087      	sub	sp, #28
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514e:	3304      	adds	r3, #4
 8005150:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	0a5b      	lsrs	r3, r3, #9
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	8952      	ldrh	r2, [r2, #10]
 800515a:	fbb3 f3f2 	udiv	r3, r3, r2
 800515e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1d1a      	adds	r2, r3, #4
 8005164:	613a      	str	r2, [r7, #16]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <clmt_clust+0x3a>
 8005170:	2300      	movs	r3, #0
 8005172:	e010      	b.n	8005196 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	429a      	cmp	r2, r3
 800517a:	d307      	bcc.n	800518c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	3304      	adds	r3, #4
 8005188:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800518a:	e7e9      	b.n	8005160 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800518c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	4413      	add	r3, r2
}
 8005196:	4618      	mov	r0, r3
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b086      	sub	sp, #24
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051b8:	d204      	bcs.n	80051c4 <dir_sdi+0x22>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80051c4:	2302      	movs	r3, #2
 80051c6:	e063      	b.n	8005290 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <dir_sdi+0x46>
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d902      	bls.n	80051e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10c      	bne.n	8005208 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	8912      	ldrh	r2, [r2, #8]
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d301      	bcc.n	80051fe <dir_sdi+0x5c>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e048      	b.n	8005290 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	61da      	str	r2, [r3, #28]
 8005206:	e029      	b.n	800525c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	895b      	ldrh	r3, [r3, #10]
 800520c:	025b      	lsls	r3, r3, #9
 800520e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005210:	e019      	b.n	8005246 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6979      	ldr	r1, [r7, #20]
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fd01 	bl	8004c1e <get_fat>
 800521c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005224:	d101      	bne.n	800522a <dir_sdi+0x88>
 8005226:	2301      	movs	r3, #1
 8005228:	e032      	b.n	8005290 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d904      	bls.n	800523a <dir_sdi+0x98>
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	429a      	cmp	r2, r3
 8005238:	d301      	bcc.n	800523e <dir_sdi+0x9c>
 800523a:	2302      	movs	r3, #2
 800523c:	e028      	b.n	8005290 <dir_sdi+0xee>
			ofs -= csz;
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	429a      	cmp	r2, r3
 800524c:	d2e1      	bcs.n	8005212 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800524e:	6979      	ldr	r1, [r7, #20]
 8005250:	6938      	ldr	r0, [r7, #16]
 8005252:	f7ff fcc5 	bl	8004be0 <clust2sect>
 8005256:	4602      	mov	r2, r0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <dir_sdi+0xcc>
 800526a:	2302      	movs	r3, #2
 800526c:	e010      	b.n	8005290 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69da      	ldr	r2, [r3, #28]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	0a5b      	lsrs	r3, r3, #9
 8005276:	441a      	add	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005288:	441a      	add	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	3320      	adds	r3, #32
 80052ae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <dir_next+0x28>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052be:	d301      	bcc.n	80052c4 <dir_next+0x2c>
 80052c0:	2304      	movs	r3, #4
 80052c2:	e0aa      	b.n	800541a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f040 8098 	bne.w	8005400 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	8912      	ldrh	r2, [r2, #8]
 80052ea:	4293      	cmp	r3, r2
 80052ec:	f0c0 8088 	bcc.w	8005400 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	61da      	str	r2, [r3, #28]
 80052f6:	2304      	movs	r3, #4
 80052f8:	e08f      	b.n	800541a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	0a5b      	lsrs	r3, r3, #9
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	8952      	ldrh	r2, [r2, #10]
 8005302:	3a01      	subs	r2, #1
 8005304:	4013      	ands	r3, r2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d17a      	bne.n	8005400 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f7ff fc83 	bl	8004c1e <get_fat>
 8005318:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d801      	bhi.n	8005324 <dir_next+0x8c>
 8005320:	2302      	movs	r3, #2
 8005322:	e07a      	b.n	800541a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532a:	d101      	bne.n	8005330 <dir_next+0x98>
 800532c:	2301      	movs	r3, #1
 800532e:	e074      	b.n	800541a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	429a      	cmp	r2, r3
 8005338:	d358      	bcc.n	80053ec <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	61da      	str	r2, [r3, #28]
 8005346:	2304      	movs	r3, #4
 8005348:	e067      	b.n	800541a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	4619      	mov	r1, r3
 8005352:	4610      	mov	r0, r2
 8005354:	f7ff fe59 	bl	800500a <create_chain>
 8005358:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <dir_next+0xcc>
 8005360:	2307      	movs	r3, #7
 8005362:	e05a      	b.n	800541a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d101      	bne.n	800536e <dir_next+0xd6>
 800536a:	2302      	movs	r3, #2
 800536c:	e055      	b.n	800541a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005374:	d101      	bne.n	800537a <dir_next+0xe2>
 8005376:	2301      	movs	r3, #1
 8005378:	e04f      	b.n	800541a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f7ff fb50 	bl	8004a20 <sync_window>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <dir_next+0xf2>
 8005386:	2301      	movs	r3, #1
 8005388:	e047      	b.n	800541a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3330      	adds	r3, #48	@ 0x30
 800538e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005392:	2100      	movs	r1, #0
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff f979 	bl	800468c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	6979      	ldr	r1, [r7, #20]
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7ff fc1d 	bl	8004be0 <clust2sect>
 80053a6:	4602      	mov	r2, r0
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80053ac:	e012      	b.n	80053d4 <dir_next+0x13c>
						fs->wflag = 1;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff fb33 	bl	8004a20 <sync_window>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <dir_next+0x12c>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e02a      	b.n	800541a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	3301      	adds	r3, #1
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	895b      	ldrh	r3, [r3, #10]
 80053d8:	461a      	mov	r2, r3
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4293      	cmp	r3, r2
 80053de:	d3e6      	bcc.n	80053ae <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad2      	subs	r2, r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80053f2:	6979      	ldr	r1, [r7, #20]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f7ff fbf3 	bl	8004be0 <clust2sect>
 80053fa:	4602      	mov	r2, r0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005412:	441a      	add	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b086      	sub	sp, #24
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005432:	2100      	movs	r1, #0
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff feb4 	bl	80051a2 <dir_sdi>
 800543a:	4603      	mov	r3, r0
 800543c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800543e:	7dfb      	ldrb	r3, [r7, #23]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d12b      	bne.n	800549c <dir_alloc+0x7a>
		n = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	4619      	mov	r1, r3
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f7ff fb2a 	bl	8004aa8 <move_window>
 8005454:	4603      	mov	r3, r0
 8005456:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005458:	7dfb      	ldrb	r3, [r7, #23]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d11d      	bne.n	800549a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2be5      	cmp	r3, #229	@ 0xe5
 8005466:	d004      	beq.n	8005472 <dir_alloc+0x50>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d107      	bne.n	8005482 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	3301      	adds	r3, #1
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d102      	bne.n	8005486 <dir_alloc+0x64>
 8005480:	e00c      	b.n	800549c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005482:	2300      	movs	r3, #0
 8005484:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005486:	2101      	movs	r1, #1
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff ff05 	bl	8005298 <dir_next>
 800548e:	4603      	mov	r3, r0
 8005490:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0d7      	beq.n	8005448 <dir_alloc+0x26>
 8005498:	e000      	b.n	800549c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800549a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800549c:	7dfb      	ldrb	r3, [r7, #23]
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d101      	bne.n	80054a6 <dir_alloc+0x84>
 80054a2:	2307      	movs	r3, #7
 80054a4:	75fb      	strb	r3, [r7, #23]
	return res;
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	331a      	adds	r3, #26
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff f840 	bl	8004544 <ld_word>
 80054c4:	4603      	mov	r3, r0
 80054c6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d109      	bne.n	80054e4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	3314      	adds	r3, #20
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff f835 	bl	8004544 <ld_word>
 80054da:	4603      	mov	r3, r0
 80054dc:	041b      	lsls	r3, r3, #16
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80054e4:	68fb      	ldr	r3, [r7, #12]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	331a      	adds	r3, #26
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	b292      	uxth	r2, r2
 8005502:	4611      	mov	r1, r2
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff f859 	bl	80045bc <st_word>
	if (fs->fs_type == FS_FAT32) {
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b03      	cmp	r3, #3
 8005510:	d109      	bne.n	8005526 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f103 0214 	add.w	r2, r3, #20
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	0c1b      	lsrs	r3, r3, #16
 800551c:	b29b      	uxth	r3, r3
 800551e:	4619      	mov	r1, r3
 8005520:	4610      	mov	r0, r2
 8005522:	f7ff f84b 	bl	80045bc <st_word>
	}
}
 8005526:	bf00      	nop
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b086      	sub	sp, #24
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800553c:	2100      	movs	r1, #0
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7ff fe2f 	bl	80051a2 <dir_sdi>
 8005544:	4603      	mov	r3, r0
 8005546:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <dir_find+0x24>
 800554e:	7dfb      	ldrb	r3, [r7, #23]
 8005550:	e03e      	b.n	80055d0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	4619      	mov	r1, r3
 8005558:	6938      	ldr	r0, [r7, #16]
 800555a:	f7ff faa5 	bl	8004aa8 <move_window>
 800555e:	4603      	mov	r3, r0
 8005560:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005562:	7dfb      	ldrb	r3, [r7, #23]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d12f      	bne.n	80055c8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d102      	bne.n	800557c <dir_find+0x4e>
 8005576:	2304      	movs	r3, #4
 8005578:	75fb      	strb	r3, [r7, #23]
 800557a:	e028      	b.n	80055ce <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	330b      	adds	r3, #11
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005588:	b2da      	uxtb	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	330b      	adds	r3, #11
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <dir_find+0x86>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a18      	ldr	r0, [r3, #32]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3324      	adds	r3, #36	@ 0x24
 80055a6:	220b      	movs	r2, #11
 80055a8:	4619      	mov	r1, r3
 80055aa:	f7ff f88a 	bl	80046c2 <mem_cmp>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00b      	beq.n	80055cc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80055b4:	2100      	movs	r1, #0
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff fe6e 	bl	8005298 <dir_next>
 80055bc:	4603      	mov	r3, r0
 80055be:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0c5      	beq.n	8005552 <dir_find+0x24>
 80055c6:	e002      	b.n	80055ce <dir_find+0xa0>
		if (res != FR_OK) break;
 80055c8:	bf00      	nop
 80055ca:	e000      	b.n	80055ce <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80055cc:	bf00      	nop

	return res;
 80055ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80055e6:	2101      	movs	r1, #1
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff ff1a 	bl	8005422 <dir_alloc>
 80055ee:	4603      	mov	r3, r0
 80055f0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d11c      	bne.n	8005632 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	4619      	mov	r1, r3
 80055fe:	68b8      	ldr	r0, [r7, #8]
 8005600:	f7ff fa52 	bl	8004aa8 <move_window>
 8005604:	4603      	mov	r3, r0
 8005606:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d111      	bne.n	8005632 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	2220      	movs	r2, #32
 8005614:	2100      	movs	r1, #0
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff f838 	bl	800468c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a18      	ldr	r0, [r3, #32]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3324      	adds	r3, #36	@ 0x24
 8005624:	220b      	movs	r2, #11
 8005626:	4619      	mov	r1, r3
 8005628:	f7ff f80f 	bl	800464a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2201      	movs	r2, #1
 8005630:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3324      	adds	r3, #36	@ 0x24
 8005650:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005652:	220b      	movs	r2, #11
 8005654:	2120      	movs	r1, #32
 8005656:	68b8      	ldr	r0, [r7, #8]
 8005658:	f7ff f818 	bl	800468c <mem_set>
	si = i = 0; ni = 8;
 800565c:	2300      	movs	r3, #0
 800565e:	613b      	str	r3, [r7, #16]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	2308      	movs	r3, #8
 8005666:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	61fa      	str	r2, [r7, #28]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005676:	7efb      	ldrb	r3, [r7, #27]
 8005678:	2b20      	cmp	r3, #32
 800567a:	d94e      	bls.n	800571a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800567c:	7efb      	ldrb	r3, [r7, #27]
 800567e:	2b2f      	cmp	r3, #47	@ 0x2f
 8005680:	d006      	beq.n	8005690 <create_name+0x54>
 8005682:	7efb      	ldrb	r3, [r7, #27]
 8005684:	2b5c      	cmp	r3, #92	@ 0x5c
 8005686:	d110      	bne.n	80056aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005688:	e002      	b.n	8005690 <create_name+0x54>
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	3301      	adds	r3, #1
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	4413      	add	r3, r2
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b2f      	cmp	r3, #47	@ 0x2f
 800569a:	d0f6      	beq.n	800568a <create_name+0x4e>
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	4413      	add	r3, r2
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80056a6:	d0f0      	beq.n	800568a <create_name+0x4e>
			break;
 80056a8:	e038      	b.n	800571c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80056aa:	7efb      	ldrb	r3, [r7, #27]
 80056ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80056ae:	d003      	beq.n	80056b8 <create_name+0x7c>
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d30c      	bcc.n	80056d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2b0b      	cmp	r3, #11
 80056bc:	d002      	beq.n	80056c4 <create_name+0x88>
 80056be:	7efb      	ldrb	r3, [r7, #27]
 80056c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80056c2:	d001      	beq.n	80056c8 <create_name+0x8c>
 80056c4:	2306      	movs	r3, #6
 80056c6:	e044      	b.n	8005752 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80056c8:	2308      	movs	r3, #8
 80056ca:	613b      	str	r3, [r7, #16]
 80056cc:	230b      	movs	r3, #11
 80056ce:	617b      	str	r3, [r7, #20]
			continue;
 80056d0:	e022      	b.n	8005718 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80056d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	da04      	bge.n	80056e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80056da:	7efb      	ldrb	r3, [r7, #27]
 80056dc:	3b80      	subs	r3, #128	@ 0x80
 80056de:	4a1f      	ldr	r2, [pc, #124]	@ (800575c <create_name+0x120>)
 80056e0:	5cd3      	ldrb	r3, [r2, r3]
 80056e2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80056e4:	7efb      	ldrb	r3, [r7, #27]
 80056e6:	4619      	mov	r1, r3
 80056e8:	481d      	ldr	r0, [pc, #116]	@ (8005760 <create_name+0x124>)
 80056ea:	f7ff f811 	bl	8004710 <chk_chr>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <create_name+0xbc>
 80056f4:	2306      	movs	r3, #6
 80056f6:	e02c      	b.n	8005752 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80056f8:	7efb      	ldrb	r3, [r7, #27]
 80056fa:	2b60      	cmp	r3, #96	@ 0x60
 80056fc:	d905      	bls.n	800570a <create_name+0xce>
 80056fe:	7efb      	ldrb	r3, [r7, #27]
 8005700:	2b7a      	cmp	r3, #122	@ 0x7a
 8005702:	d802      	bhi.n	800570a <create_name+0xce>
 8005704:	7efb      	ldrb	r3, [r7, #27]
 8005706:	3b20      	subs	r3, #32
 8005708:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	613a      	str	r2, [r7, #16]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	4413      	add	r3, r2
 8005714:	7efa      	ldrb	r2, [r7, #27]
 8005716:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005718:	e7a6      	b.n	8005668 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800571a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	441a      	add	r2, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <create_name+0xf4>
 800572c:	2306      	movs	r3, #6
 800572e:	e010      	b.n	8005752 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2be5      	cmp	r3, #229	@ 0xe5
 8005736:	d102      	bne.n	800573e <create_name+0x102>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2205      	movs	r2, #5
 800573c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800573e:	7efb      	ldrb	r3, [r7, #27]
 8005740:	2b20      	cmp	r3, #32
 8005742:	d801      	bhi.n	8005748 <create_name+0x10c>
 8005744:	2204      	movs	r2, #4
 8005746:	e000      	b.n	800574a <create_name+0x10e>
 8005748:	2200      	movs	r2, #0
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	330b      	adds	r3, #11
 800574e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005750:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005752:	4618      	mov	r0, r3
 8005754:	3720      	adds	r7, #32
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	08007a00 	.word	0x08007a00
 8005760:	0800797c 	.word	0x0800797c

08005764 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005778:	e002      	b.n	8005780 <follow_path+0x1c>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	3301      	adds	r3, #1
 800577e:	603b      	str	r3, [r7, #0]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b2f      	cmp	r3, #47	@ 0x2f
 8005786:	d0f8      	beq.n	800577a <follow_path+0x16>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b5c      	cmp	r3, #92	@ 0x5c
 800578e:	d0f4      	beq.n	800577a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2200      	movs	r2, #0
 8005794:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	2b1f      	cmp	r3, #31
 800579c:	d80a      	bhi.n	80057b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2280      	movs	r2, #128	@ 0x80
 80057a2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80057a6:	2100      	movs	r1, #0
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff fcfa 	bl	80051a2 <dir_sdi>
 80057ae:	4603      	mov	r3, r0
 80057b0:	75fb      	strb	r3, [r7, #23]
 80057b2:	e043      	b.n	800583c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80057b4:	463b      	mov	r3, r7
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff ff3f 	bl	800563c <create_name>
 80057be:	4603      	mov	r3, r0
 80057c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d134      	bne.n	8005832 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff feb0 	bl	800552e <dir_find>
 80057ce:	4603      	mov	r3, r0
 80057d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80057d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80057e0:	7dfb      	ldrb	r3, [r7, #23]
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d127      	bne.n	8005836 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80057e6:	7afb      	ldrb	r3, [r7, #11]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d122      	bne.n	8005836 <follow_path+0xd2>
 80057f0:	2305      	movs	r3, #5
 80057f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80057f4:	e01f      	b.n	8005836 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80057f6:	7afb      	ldrb	r3, [r7, #11]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d11c      	bne.n	800583a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	799b      	ldrb	r3, [r3, #6]
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	2b00      	cmp	r3, #0
 800580a:	d102      	bne.n	8005812 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800580c:	2305      	movs	r3, #5
 800580e:	75fb      	strb	r3, [r7, #23]
 8005810:	e014      	b.n	800583c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005820:	4413      	add	r3, r2
 8005822:	4619      	mov	r1, r3
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f7ff fe43 	bl	80054b0 <ld_clust>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005830:	e7c0      	b.n	80057b4 <follow_path+0x50>
			if (res != FR_OK) break;
 8005832:	bf00      	nop
 8005834:	e002      	b.n	800583c <follow_path+0xd8>
				break;
 8005836:	bf00      	nop
 8005838:	e000      	b.n	800583c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800583a:	bf00      	nop
			}
		}
	}

	return res;
 800583c:	7dfb      	ldrb	r3, [r7, #23]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005846:	b480      	push	{r7}
 8005848:	b087      	sub	sp, #28
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800584e:	f04f 33ff 	mov.w	r3, #4294967295
 8005852:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d031      	beq.n	80058c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	e002      	b.n	800586a <get_ldnumber+0x24>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	3301      	adds	r3, #1
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b20      	cmp	r3, #32
 8005870:	d903      	bls.n	800587a <get_ldnumber+0x34>
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b3a      	cmp	r3, #58	@ 0x3a
 8005878:	d1f4      	bne.n	8005864 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b3a      	cmp	r3, #58	@ 0x3a
 8005880:	d11c      	bne.n	80058bc <get_ldnumber+0x76>
			tp = *path;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	60fa      	str	r2, [r7, #12]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	3b30      	subs	r3, #48	@ 0x30
 8005892:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b09      	cmp	r3, #9
 8005898:	d80e      	bhi.n	80058b8 <get_ldnumber+0x72>
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d10a      	bne.n	80058b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d107      	bne.n	80058b8 <get_ldnumber+0x72>
					vol = (int)i;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	3301      	adds	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	e002      	b.n	80058c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80058c0:	693b      	ldr	r3, [r7, #16]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	70da      	strb	r2, [r3, #3]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f04f 32ff 	mov.w	r2, #4294967295
 80058e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff f8dc 	bl	8004aa8 <move_window>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <check_fs+0x2a>
 80058f6:	2304      	movs	r3, #4
 80058f8:	e038      	b.n	800596c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3330      	adds	r3, #48	@ 0x30
 80058fe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005902:	4618      	mov	r0, r3
 8005904:	f7fe fe1e 	bl	8004544 <ld_word>
 8005908:	4603      	mov	r3, r0
 800590a:	461a      	mov	r2, r3
 800590c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005910:	429a      	cmp	r2, r3
 8005912:	d001      	beq.n	8005918 <check_fs+0x48>
 8005914:	2303      	movs	r3, #3
 8005916:	e029      	b.n	800596c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800591e:	2be9      	cmp	r3, #233	@ 0xe9
 8005920:	d009      	beq.n	8005936 <check_fs+0x66>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005928:	2beb      	cmp	r3, #235	@ 0xeb
 800592a:	d11e      	bne.n	800596a <check_fs+0x9a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005932:	2b90      	cmp	r3, #144	@ 0x90
 8005934:	d119      	bne.n	800596a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3330      	adds	r3, #48	@ 0x30
 800593a:	3336      	adds	r3, #54	@ 0x36
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe fe1a 	bl	8004576 <ld_dword>
 8005942:	4603      	mov	r3, r0
 8005944:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005948:	4a0a      	ldr	r2, [pc, #40]	@ (8005974 <check_fs+0xa4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d101      	bne.n	8005952 <check_fs+0x82>
 800594e:	2300      	movs	r3, #0
 8005950:	e00c      	b.n	800596c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3330      	adds	r3, #48	@ 0x30
 8005956:	3352      	adds	r3, #82	@ 0x52
 8005958:	4618      	mov	r0, r3
 800595a:	f7fe fe0c 	bl	8004576 <ld_dword>
 800595e:	4603      	mov	r3, r0
 8005960:	4a05      	ldr	r2, [pc, #20]	@ (8005978 <check_fs+0xa8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d101      	bne.n	800596a <check_fs+0x9a>
 8005966:	2300      	movs	r3, #0
 8005968:	e000      	b.n	800596c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800596a:	2302      	movs	r3, #2
}
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	00544146 	.word	0x00544146
 8005978:	33544146 	.word	0x33544146

0800597c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b096      	sub	sp, #88	@ 0x58
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	4613      	mov	r3, r2
 8005988:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff ff58 	bl	8005846 <get_ldnumber>
 8005996:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800599a:	2b00      	cmp	r3, #0
 800599c:	da01      	bge.n	80059a2 <find_volume+0x26>
 800599e:	230b      	movs	r3, #11
 80059a0:	e22d      	b.n	8005dfe <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80059a2:	4aa1      	ldr	r2, [pc, #644]	@ (8005c28 <find_volume+0x2ac>)
 80059a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059aa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80059ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <find_volume+0x3a>
 80059b2:	230c      	movs	r3, #12
 80059b4:	e223      	b.n	8005dfe <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	f023 0301 	bic.w	r3, r3, #1
 80059c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80059c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01a      	beq.n	8005a02 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80059cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ce:	785b      	ldrb	r3, [r3, #1]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe fd19 	bl	8004408 <disk_status>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80059dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10c      	bne.n	8005a02 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d007      	beq.n	80059fe <find_volume+0x82>
 80059ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80059fa:	230a      	movs	r3, #10
 80059fc:	e1ff      	b.n	8005dfe <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80059fe:	2300      	movs	r3, #0
 8005a00:	e1fd      	b.n	8005dfe <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a04:	2200      	movs	r2, #0
 8005a06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a12:	785b      	ldrb	r3, [r3, #1]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fe fd11 	bl	800443c <disk_initialize>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005a20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e1e6      	b.n	8005dfe <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005a30:	79fb      	ldrb	r3, [r7, #7]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d007      	beq.n	8005a46 <find_volume+0xca>
 8005a36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005a42:	230a      	movs	r3, #10
 8005a44:	e1db      	b.n	8005dfe <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005a46:	2300      	movs	r3, #0
 8005a48:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005a4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005a4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a4e:	f7ff ff3f 	bl	80058d0 <check_fs>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005a58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d149      	bne.n	8005af4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a60:	2300      	movs	r3, #0
 8005a62:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a64:	e01e      	b.n	8005aa4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005a74:	4413      	add	r3, r2
 8005a76:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d006      	beq.n	8005a90 <find_volume+0x114>
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	3308      	adds	r3, #8
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe fd75 	bl	8004576 <ld_dword>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	e000      	b.n	8005a92 <find_volume+0x116>
 8005a90:	2200      	movs	r2, #0
 8005a92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	3358      	adds	r3, #88	@ 0x58
 8005a98:	443b      	add	r3, r7
 8005a9a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d9dd      	bls.n	8005a66 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005aaa:	2300      	movs	r3, #0
 8005aac:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <find_volume+0x13e>
 8005ab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	3358      	adds	r3, #88	@ 0x58
 8005ac0:	443b      	add	r3, r7
 8005ac2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005ac6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005ac8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <find_volume+0x15e>
 8005ace:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ad0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005ad2:	f7ff fefd 	bl	80058d0 <check_fs>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	e000      	b.n	8005adc <find_volume+0x160>
 8005ada:	2303      	movs	r3, #3
 8005adc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005ae0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d905      	bls.n	8005af4 <find_volume+0x178>
 8005ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aea:	3301      	adds	r3, #1
 8005aec:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d9e2      	bls.n	8005aba <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005af4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d101      	bne.n	8005b00 <find_volume+0x184>
 8005afc:	2301      	movs	r3, #1
 8005afe:	e17e      	b.n	8005dfe <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005b00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d901      	bls.n	8005b0c <find_volume+0x190>
 8005b08:	230d      	movs	r3, #13
 8005b0a:	e178      	b.n	8005dfe <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0e:	3330      	adds	r3, #48	@ 0x30
 8005b10:	330b      	adds	r3, #11
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fd16 	bl	8004544 <ld_word>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b1e:	d001      	beq.n	8005b24 <find_volume+0x1a8>
 8005b20:	230d      	movs	r3, #13
 8005b22:	e16c      	b.n	8005dfe <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b26:	3330      	adds	r3, #48	@ 0x30
 8005b28:	3316      	adds	r3, #22
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe fd0a 	bl	8004544 <ld_word>
 8005b30:	4603      	mov	r3, r0
 8005b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <find_volume+0x1cc>
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	3330      	adds	r3, #48	@ 0x30
 8005b3e:	3324      	adds	r3, #36	@ 0x24
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fe fd18 	bl	8004576 <ld_dword>
 8005b46:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b4c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b50:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8005b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b56:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5a:	789b      	ldrb	r3, [r3, #2]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d005      	beq.n	8005b6c <find_volume+0x1f0>
 8005b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b62:	789b      	ldrb	r3, [r3, #2]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d001      	beq.n	8005b6c <find_volume+0x1f0>
 8005b68:	230d      	movs	r3, #13
 8005b6a:	e148      	b.n	8005dfe <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6e:	789b      	ldrb	r3, [r3, #2]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b74:	fb02 f303 	mul.w	r3, r2, r3
 8005b78:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b80:	461a      	mov	r2, r3
 8005b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b84:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b88:	895b      	ldrh	r3, [r3, #10]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d008      	beq.n	8005ba0 <find_volume+0x224>
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b90:	895b      	ldrh	r3, [r3, #10]
 8005b92:	461a      	mov	r2, r3
 8005b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b96:	895b      	ldrh	r3, [r3, #10]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <find_volume+0x228>
 8005ba0:	230d      	movs	r3, #13
 8005ba2:	e12c      	b.n	8005dfe <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba6:	3330      	adds	r3, #48	@ 0x30
 8005ba8:	3311      	adds	r3, #17
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fcca 	bl	8004544 <ld_word>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bba:	891b      	ldrh	r3, [r3, #8]
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <find_volume+0x24e>
 8005bc6:	230d      	movs	r3, #13
 8005bc8:	e119      	b.n	8005dfe <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bcc:	3330      	adds	r3, #48	@ 0x30
 8005bce:	3313      	adds	r3, #19
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fe fcb7 	bl	8004544 <ld_word>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <find_volume+0x272>
 8005be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be2:	3330      	adds	r3, #48	@ 0x30
 8005be4:	3320      	adds	r3, #32
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe fcc5 	bl	8004576 <ld_dword>
 8005bec:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf0:	3330      	adds	r3, #48	@ 0x30
 8005bf2:	330e      	adds	r3, #14
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fe fca5 	bl	8004544 <ld_word>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005bfe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <find_volume+0x28c>
 8005c04:	230d      	movs	r3, #13
 8005c06:	e0fa      	b.n	8005dfe <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005c08:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c0c:	4413      	add	r3, r2
 8005c0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c10:	8912      	ldrh	r2, [r2, #8]
 8005c12:	0912      	lsrs	r2, r2, #4
 8005c14:	b292      	uxth	r2, r2
 8005c16:	4413      	add	r3, r2
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005c1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d204      	bcs.n	8005c2c <find_volume+0x2b0>
 8005c22:	230d      	movs	r3, #13
 8005c24:	e0eb      	b.n	8005dfe <find_volume+0x482>
 8005c26:	bf00      	nop
 8005c28:	20000198 	.word	0x20000198
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005c2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c34:	8952      	ldrh	r2, [r2, #10]
 8005c36:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c3a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <find_volume+0x2ca>
 8005c42:	230d      	movs	r3, #13
 8005c44:	e0db      	b.n	8005dfe <find_volume+0x482>
		fmt = FS_FAT32;
 8005c46:	2303      	movs	r3, #3
 8005c48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d802      	bhi.n	8005c5c <find_volume+0x2e0>
 8005c56:	2302      	movs	r3, #2
 8005c58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d802      	bhi.n	8005c6c <find_volume+0x2f0>
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6e:	1c9a      	adds	r2, r3, #2
 8005c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c72:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c78:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005c7a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005c7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c7e:	441a      	add	r2, r3
 8005c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c82:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005c84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c88:	441a      	add	r2, r3
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8005c8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d11e      	bne.n	8005cd4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c98:	3330      	adds	r3, #48	@ 0x30
 8005c9a:	332a      	adds	r3, #42	@ 0x2a
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe fc51 	bl	8004544 <ld_word>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <find_volume+0x330>
 8005ca8:	230d      	movs	r3, #13
 8005caa:	e0a8      	b.n	8005dfe <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cae:	891b      	ldrh	r3, [r3, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <find_volume+0x33c>
 8005cb4:	230d      	movs	r3, #13
 8005cb6:	e0a2      	b.n	8005dfe <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cba:	3330      	adds	r3, #48	@ 0x30
 8005cbc:	332c      	adds	r3, #44	@ 0x2c
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe fc59 	bl	8004576 <ld_dword>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cd2:	e01f      	b.n	8005d14 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd6:	891b      	ldrh	r3, [r3, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <find_volume+0x364>
 8005cdc:	230d      	movs	r3, #13
 8005cde:	e08e      	b.n	8005dfe <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce2:	6a1a      	ldr	r2, [r3, #32]
 8005ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce6:	441a      	add	r2, r3
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cea:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005cec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d103      	bne.n	8005cfc <find_volume+0x380>
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	e00a      	b.n	8005d12 <find_volume+0x396>
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfe:	695a      	ldr	r2, [r3, #20]
 8005d00:	4613      	mov	r3, r2
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	4413      	add	r3, r2
 8005d06:	085a      	lsrs	r2, r3, #1
 8005d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005d12:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d16:	699a      	ldr	r2, [r3, #24]
 8005d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d1a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8005d1e:	0a5b      	lsrs	r3, r3, #9
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d201      	bcs.n	8005d28 <find_volume+0x3ac>
 8005d24:	230d      	movs	r3, #13
 8005d26:	e06a      	b.n	8005dfe <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2e:	611a      	str	r2, [r3, #16]
 8005d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d36:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3a:	2280      	movs	r2, #128	@ 0x80
 8005d3c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005d3e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d149      	bne.n	8005dda <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d48:	3330      	adds	r3, #48	@ 0x30
 8005d4a:	3330      	adds	r3, #48	@ 0x30
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fe fbf9 	bl	8004544 <ld_word>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d140      	bne.n	8005dda <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005d58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d60:	f7fe fea2 	bl	8004aa8 <move_window>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d137      	bne.n	8005dda <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d72:	3330      	adds	r3, #48	@ 0x30
 8005d74:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fe fbe3 	bl	8004544 <ld_word>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	461a      	mov	r2, r3
 8005d82:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d127      	bne.n	8005dda <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8c:	3330      	adds	r3, #48	@ 0x30
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fe fbf1 	bl	8004576 <ld_dword>
 8005d94:	4603      	mov	r3, r0
 8005d96:	4a1c      	ldr	r2, [pc, #112]	@ (8005e08 <find_volume+0x48c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d11e      	bne.n	8005dda <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9e:	3330      	adds	r3, #48	@ 0x30
 8005da0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fe fbe6 	bl	8004576 <ld_dword>
 8005daa:	4603      	mov	r3, r0
 8005dac:	4a17      	ldr	r2, [pc, #92]	@ (8005e0c <find_volume+0x490>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d113      	bne.n	8005dda <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db4:	3330      	adds	r3, #48	@ 0x30
 8005db6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fe fbdb 	bl	8004576 <ld_dword>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc8:	3330      	adds	r3, #48	@ 0x30
 8005dca:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fe fbd1 	bl	8004576 <ld_dword>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ddc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005de0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005de2:	4b0b      	ldr	r3, [pc, #44]	@ (8005e10 <find_volume+0x494>)
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	3301      	adds	r3, #1
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	4b09      	ldr	r3, [pc, #36]	@ (8005e10 <find_volume+0x494>)
 8005dec:	801a      	strh	r2, [r3, #0]
 8005dee:	4b08      	ldr	r3, [pc, #32]	@ (8005e10 <find_volume+0x494>)
 8005df0:	881a      	ldrh	r2, [r3, #0]
 8005df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005df6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005df8:	f7fe fdee 	bl	80049d8 <clear_lock>
#endif
	return FR_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3758      	adds	r7, #88	@ 0x58
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	41615252 	.word	0x41615252
 8005e0c:	61417272 	.word	0x61417272
 8005e10:	2000019c 	.word	0x2000019c

08005e14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005e1e:	2309      	movs	r3, #9
 8005e20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01c      	beq.n	8005e62 <validate+0x4e>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d018      	beq.n	8005e62 <validate+0x4e>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d013      	beq.n	8005e62 <validate+0x4e>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	889a      	ldrh	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	88db      	ldrh	r3, [r3, #6]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d10c      	bne.n	8005e62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fe fada 	bl	8004408 <disk_status>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <validate+0x4e>
			res = FR_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <validate+0x5a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	e000      	b.n	8005e70 <validate+0x5c>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	6013      	str	r3, [r2, #0]
	return res;
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005e92:	f107 0310 	add.w	r3, r7, #16
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff fcd5 	bl	8005846 <get_ldnumber>
 8005e9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	da01      	bge.n	8005ea8 <f_mount+0x28>
 8005ea4:	230b      	movs	r3, #11
 8005ea6:	e02b      	b.n	8005f00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005ea8:	4a17      	ldr	r2, [pc, #92]	@ (8005f08 <f_mount+0x88>)
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005eb8:	69b8      	ldr	r0, [r7, #24]
 8005eba:	f7fe fd8d 	bl	80049d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	490d      	ldr	r1, [pc, #52]	@ (8005f08 <f_mount+0x88>)
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <f_mount+0x66>
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d001      	beq.n	8005eea <f_mount+0x6a>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e00a      	b.n	8005f00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005eea:	f107 010c 	add.w	r1, r7, #12
 8005eee:	f107 0308 	add.w	r3, r7, #8
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fd41 	bl	800597c <find_volume>
 8005efa:	4603      	mov	r3, r0
 8005efc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3720      	adds	r7, #32
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	20000198 	.word	0x20000198

08005f0c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b098      	sub	sp, #96	@ 0x60
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	4613      	mov	r3, r2
 8005f18:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <f_open+0x18>
 8005f20:	2309      	movs	r3, #9
 8005f22:	e1a9      	b.n	8006278 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f2a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005f2c:	79fa      	ldrb	r2, [r7, #7]
 8005f2e:	f107 0110 	add.w	r1, r7, #16
 8005f32:	f107 0308 	add.w	r3, r7, #8
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff fd20 	bl	800597c <find_volume>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8005f42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f040 818d 	bne.w	8006266 <f_open+0x35a>
		dj.obj.fs = fs;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	f107 0314 	add.w	r3, r7, #20
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fc03 	bl	8005764 <follow_path>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005f64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d118      	bne.n	8005f9e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005f6c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f70:	b25b      	sxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	da03      	bge.n	8005f7e <f_open+0x72>
				res = FR_INVALID_NAME;
 8005f76:	2306      	movs	r3, #6
 8005f78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005f7c:	e00f      	b.n	8005f9e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	bf8c      	ite	hi
 8005f84:	2301      	movhi	r3, #1
 8005f86:	2300      	movls	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f107 0314 	add.w	r3, r7, #20
 8005f90:	4611      	mov	r1, r2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe fbd8 	bl	8004748 <chk_lock>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	f003 031c 	and.w	r3, r3, #28
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d07f      	beq.n	80060a8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005fa8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d017      	beq.n	8005fe0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d10e      	bne.n	8005fd6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005fb8:	f7fe fc22 	bl	8004800 <enq_lock>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d006      	beq.n	8005fd0 <f_open+0xc4>
 8005fc2:	f107 0314 	add.w	r3, r7, #20
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff fb06 	bl	80055d8 <dir_register>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	e000      	b.n	8005fd2 <f_open+0xc6>
 8005fd0:	2312      	movs	r3, #18
 8005fd2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	f043 0308 	orr.w	r3, r3, #8
 8005fdc:	71fb      	strb	r3, [r7, #7]
 8005fde:	e010      	b.n	8006002 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005fe0:	7ebb      	ldrb	r3, [r7, #26]
 8005fe2:	f003 0311 	and.w	r3, r3, #17
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <f_open+0xe6>
					res = FR_DENIED;
 8005fea:	2307      	movs	r3, #7
 8005fec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005ff0:	e007      	b.n	8006002 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <f_open+0xf6>
 8005ffc:	2308      	movs	r3, #8
 8005ffe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006002:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006006:	2b00      	cmp	r3, #0
 8006008:	d168      	bne.n	80060dc <f_open+0x1d0>
 800600a:	79fb      	ldrb	r3, [r7, #7]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d063      	beq.n	80060dc <f_open+0x1d0>
				dw = GET_FATTIME();
 8006014:	f7fd fcc2 	bl	800399c <get_fattime>
 8006018:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800601a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800601c:	330e      	adds	r3, #14
 800601e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006020:	4618      	mov	r0, r3
 8006022:	f7fe fae6 	bl	80045f2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006028:	3316      	adds	r3, #22
 800602a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe fae0 	bl	80045f2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006034:	330b      	adds	r3, #11
 8006036:	2220      	movs	r2, #32
 8006038:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800603e:	4611      	mov	r1, r2
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff fa35 	bl	80054b0 <ld_clust>
 8006046:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800604c:	2200      	movs	r2, #0
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff fa4d 	bl	80054ee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006056:	331c      	adds	r3, #28
 8006058:	2100      	movs	r1, #0
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fac9 	bl	80045f2 <st_dword>
					fs->wflag = 1;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2201      	movs	r2, #1
 8006064:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d037      	beq.n	80060dc <f_open+0x1d0>
						dw = fs->winsect;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006070:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006072:	f107 0314 	add.w	r3, r7, #20
 8006076:	2200      	movs	r2, #0
 8006078:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe ff60 	bl	8004f40 <remove_chain>
 8006080:	4603      	mov	r3, r0
 8006082:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8006086:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800608a:	2b00      	cmp	r3, #0
 800608c:	d126      	bne.n	80060dc <f_open+0x1d0>
							res = move_window(fs, dw);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe fd08 	bl	8004aa8 <move_window>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060a2:	3a01      	subs	r2, #1
 80060a4:	60da      	str	r2, [r3, #12]
 80060a6:	e019      	b.n	80060dc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80060a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d115      	bne.n	80060dc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80060b0:	7ebb      	ldrb	r3, [r7, #26]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <f_open+0x1b6>
					res = FR_NO_FILE;
 80060ba:	2304      	movs	r3, #4
 80060bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80060c0:	e00c      	b.n	80060dc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80060c2:	79fb      	ldrb	r3, [r7, #7]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d007      	beq.n	80060dc <f_open+0x1d0>
 80060cc:	7ebb      	ldrb	r3, [r7, #26]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <f_open+0x1d0>
						res = FR_DENIED;
 80060d6:	2307      	movs	r3, #7
 80060d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80060dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d126      	bne.n	8006132 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80060e4:	79fb      	ldrb	r3, [r7, #7]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060f4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80060fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	2b01      	cmp	r3, #1
 8006108:	bf8c      	ite	hi
 800610a:	2301      	movhi	r3, #1
 800610c:	2300      	movls	r3, #0
 800610e:	b2db      	uxtb	r3, r3
 8006110:	461a      	mov	r2, r3
 8006112:	f107 0314 	add.w	r3, r7, #20
 8006116:	4611      	mov	r1, r2
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe fb93 	bl	8004844 <inc_lock>
 800611e:	4602      	mov	r2, r0
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <f_open+0x226>
 800612c:	2302      	movs	r3, #2
 800612e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006132:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006136:	2b00      	cmp	r3, #0
 8006138:	f040 8095 	bne.w	8006266 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006140:	4611      	mov	r1, r2
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff f9b4 	bl	80054b0 <ld_clust>
 8006148:	4602      	mov	r2, r0
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800614e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006150:	331c      	adds	r3, #28
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe fa0f 	bl	8004576 <ld_dword>
 8006158:	4602      	mov	r2, r0
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	88da      	ldrh	r2, [r3, #6]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	79fa      	ldrb	r2, [r7, #7]
 8006176:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3330      	adds	r3, #48	@ 0x30
 800618e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006192:	2100      	movs	r1, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe fa79 	bl	800468c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d060      	beq.n	8006266 <f_open+0x35a>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d05c      	beq.n	8006266 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	895b      	ldrh	r3, [r3, #10]
 80061b8:	025b      	lsls	r3, r3, #9
 80061ba:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80061c8:	e016      	b.n	80061f8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe fd25 	bl	8004c1e <get_fat>
 80061d4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80061d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d802      	bhi.n	80061e2 <f_open+0x2d6>
 80061dc:	2302      	movs	r3, #2
 80061de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80061e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d102      	bne.n	80061f0 <f_open+0x2e4>
 80061ea:	2301      	movs	r3, #1
 80061ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80061f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80061f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80061f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d103      	bne.n	8006208 <f_open+0x2fc>
 8006200:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006204:	429a      	cmp	r2, r3
 8006206:	d8e0      	bhi.n	80061ca <f_open+0x2be>
				}
				fp->clust = clst;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800620c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800620e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006212:	2b00      	cmp	r3, #0
 8006214:	d127      	bne.n	8006266 <f_open+0x35a>
 8006216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621c:	2b00      	cmp	r3, #0
 800621e:	d022      	beq.n	8006266 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006224:	4618      	mov	r0, r3
 8006226:	f7fe fcdb 	bl	8004be0 <clust2sect>
 800622a:	6478      	str	r0, [r7, #68]	@ 0x44
 800622c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800622e:	2b00      	cmp	r3, #0
 8006230:	d103      	bne.n	800623a <f_open+0x32e>
						res = FR_INT_ERR;
 8006232:	2302      	movs	r3, #2
 8006234:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006238:	e015      	b.n	8006266 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800623a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800623c:	0a5a      	lsrs	r2, r3, #9
 800623e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006240:	441a      	add	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	7858      	ldrb	r0, [r3, #1]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a1a      	ldr	r2, [r3, #32]
 8006254:	2301      	movs	r3, #1
 8006256:	f7fe f917 	bl	8004488 <disk_read>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <f_open+0x35a>
 8006260:	2301      	movs	r3, #1
 8006262:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006266:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <f_open+0x368>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006274:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006278:	4618      	mov	r0, r3
 800627a:	3760      	adds	r7, #96	@ 0x60
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08c      	sub	sp, #48	@ 0x30
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f107 0210 	add.w	r2, r7, #16
 800629e:	4611      	mov	r1, r2
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff fdb7 	bl	8005e14 <validate>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80062ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d107      	bne.n	80062c4 <f_write+0x44>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	7d5b      	ldrb	r3, [r3, #21]
 80062b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80062bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <f_write+0x4a>
 80062c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062c8:	e14b      	b.n	8006562 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	7d1b      	ldrb	r3, [r3, #20]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <f_write+0x5a>
 80062d6:	2307      	movs	r3, #7
 80062d8:	e143      	b.n	8006562 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	441a      	add	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	f080 812d 	bcs.w	8006546 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	43db      	mvns	r3, r3
 80062f2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80062f4:	e127      	b.n	8006546 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f040 80e3 	bne.w	80064ca <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	0a5b      	lsrs	r3, r3, #9
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	8952      	ldrh	r2, [r2, #10]
 800630e:	3a01      	subs	r2, #1
 8006310:	4013      	ands	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d143      	bne.n	80063a2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10c      	bne.n	800633c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632a:	2b00      	cmp	r3, #0
 800632c:	d11a      	bne.n	8006364 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2100      	movs	r1, #0
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe fe69 	bl	800500a <create_chain>
 8006338:	62b8      	str	r0, [r7, #40]	@ 0x28
 800633a:	e013      	b.n	8006364 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	4619      	mov	r1, r3
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7fe fef5 	bl	800513a <clmt_clust>
 8006350:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006352:	e007      	b.n	8006364 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	4619      	mov	r1, r3
 800635c:	4610      	mov	r0, r2
 800635e:	f7fe fe54 	bl	800500a <create_chain>
 8006362:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 80f2 	beq.w	8006550 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800636c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636e:	2b01      	cmp	r3, #1
 8006370:	d104      	bne.n	800637c <f_write+0xfc>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2202      	movs	r2, #2
 8006376:	755a      	strb	r2, [r3, #21]
 8006378:	2302      	movs	r3, #2
 800637a:	e0f2      	b.n	8006562 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800637c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006382:	d104      	bne.n	800638e <f_write+0x10e>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2201      	movs	r2, #1
 8006388:	755a      	strb	r2, [r3, #21]
 800638a:	2301      	movs	r3, #1
 800638c:	e0e9      	b.n	8006562 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006392:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d102      	bne.n	80063a2 <f_write+0x122>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063a0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	7d1b      	ldrb	r3, [r3, #20]
 80063a6:	b25b      	sxtb	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	da18      	bge.n	80063de <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	7858      	ldrb	r0, [r3, #1]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a1a      	ldr	r2, [r3, #32]
 80063ba:	2301      	movs	r3, #1
 80063bc:	f7fe f884 	bl	80044c8 <disk_write>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d004      	beq.n	80063d0 <f_write+0x150>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	755a      	strb	r2, [r3, #21]
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0c8      	b.n	8006562 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	7d1b      	ldrb	r3, [r3, #20]
 80063d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	4619      	mov	r1, r3
 80063e6:	4610      	mov	r0, r2
 80063e8:	f7fe fbfa 	bl	8004be0 <clust2sect>
 80063ec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <f_write+0x17e>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2202      	movs	r2, #2
 80063f8:	755a      	strb	r2, [r3, #21]
 80063fa:	2302      	movs	r3, #2
 80063fc:	e0b1      	b.n	8006562 <f_write+0x2e2>
			sect += csect;
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	4413      	add	r3, r2
 8006404:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	0a5b      	lsrs	r3, r3, #9
 800640a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d03c      	beq.n	800648c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	4413      	add	r3, r2
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	8952      	ldrh	r2, [r2, #10]
 800641c:	4293      	cmp	r3, r2
 800641e:	d905      	bls.n	800642c <f_write+0x1ac>
					cc = fs->csize - csect;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	895b      	ldrh	r3, [r3, #10]
 8006424:	461a      	mov	r2, r3
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	7858      	ldrb	r0, [r3, #1]
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	69f9      	ldr	r1, [r7, #28]
 8006436:	f7fe f847 	bl	80044c8 <disk_write>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <f_write+0x1ca>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	755a      	strb	r2, [r3, #21]
 8006446:	2301      	movs	r3, #1
 8006448:	e08b      	b.n	8006562 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1a      	ldr	r2, [r3, #32]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	6a3a      	ldr	r2, [r7, #32]
 8006454:	429a      	cmp	r2, r3
 8006456:	d915      	bls.n	8006484 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a1a      	ldr	r2, [r3, #32]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	025b      	lsls	r3, r3, #9
 8006468:	69fa      	ldr	r2, [r7, #28]
 800646a:	4413      	add	r3, r2
 800646c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006470:	4619      	mov	r1, r3
 8006472:	f7fe f8ea 	bl	800464a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	7d1b      	ldrb	r3, [r3, #20]
 800647a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800647e:	b2da      	uxtb	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	025b      	lsls	r3, r3, #9
 8006488:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800648a:	e03f      	b.n	800650c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	429a      	cmp	r2, r3
 8006494:	d016      	beq.n	80064c4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800649e:	429a      	cmp	r2, r3
 80064a0:	d210      	bcs.n	80064c4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	7858      	ldrb	r0, [r3, #1]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80064ac:	2301      	movs	r3, #1
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	f7fd ffea 	bl	8004488 <disk_read>
 80064b4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d004      	beq.n	80064c4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	755a      	strb	r2, [r3, #21]
 80064c0:	2301      	movs	r3, #1
 80064c2:	e04e      	b.n	8006562 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80064d6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80064d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d901      	bls.n	80064e4 <f_write+0x264>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f2:	4413      	add	r3, r2
 80064f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064f6:	69f9      	ldr	r1, [r7, #28]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fe f8a6 	bl	800464a <mem_cpy>
		fp->flag |= FA_DIRTY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	7d1b      	ldrb	r3, [r3, #20]
 8006502:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006506:	b2da      	uxtb	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006510:	4413      	add	r3, r2
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	699a      	ldr	r2, [r3, #24]
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	441a      	add	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	619a      	str	r2, [r3, #24]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	429a      	cmp	r2, r3
 800652a:	bf38      	it	cc
 800652c:	461a      	movcc	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	60da      	str	r2, [r3, #12]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	441a      	add	r2, r3
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	f47f aed4 	bne.w	80062f6 <f_write+0x76>
 800654e:	e000      	b.n	8006552 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006550:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	7d1b      	ldrb	r3, [r3, #20]
 8006556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800655a:	b2da      	uxtb	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3730      	adds	r7, #48	@ 0x30
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b086      	sub	sp, #24
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f107 0208 	add.w	r2, r7, #8
 8006578:	4611      	mov	r1, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff fc4a 	bl	8005e14 <validate>
 8006580:	4603      	mov	r3, r0
 8006582:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d168      	bne.n	800665c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	7d1b      	ldrb	r3, [r3, #20]
 800658e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d062      	beq.n	800665c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	7d1b      	ldrb	r3, [r3, #20]
 800659a:	b25b      	sxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	da15      	bge.n	80065cc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	7858      	ldrb	r0, [r3, #1]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1a      	ldr	r2, [r3, #32]
 80065ae:	2301      	movs	r3, #1
 80065b0:	f7fd ff8a 	bl	80044c8 <disk_write>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <f_sync+0x54>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e04f      	b.n	800665e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	7d1b      	ldrb	r3, [r3, #20]
 80065c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80065cc:	f7fd f9e6 	bl	800399c <get_fattime>
 80065d0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d8:	4619      	mov	r1, r3
 80065da:	4610      	mov	r0, r2
 80065dc:	f7fe fa64 	bl	8004aa8 <move_window>
 80065e0:	4603      	mov	r3, r0
 80065e2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d138      	bne.n	800665c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ee:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	330b      	adds	r3, #11
 80065f4:	781a      	ldrb	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	330b      	adds	r3, #11
 80065fa:	f042 0220 	orr.w	r2, r2, #32
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	461a      	mov	r2, r3
 800660c:	68f9      	ldr	r1, [r7, #12]
 800660e:	f7fe ff6e 	bl	80054ee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f103 021c 	add.w	r2, r3, #28
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	4619      	mov	r1, r3
 800661e:	4610      	mov	r0, r2
 8006620:	f7fd ffe7 	bl	80045f2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3316      	adds	r3, #22
 8006628:	6939      	ldr	r1, [r7, #16]
 800662a:	4618      	mov	r0, r3
 800662c:	f7fd ffe1 	bl	80045f2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3312      	adds	r3, #18
 8006634:	2100      	movs	r1, #0
 8006636:	4618      	mov	r0, r3
 8006638:	f7fd ffc0 	bl	80045bc <st_word>
					fs->wflag = 1;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2201      	movs	r2, #1
 8006640:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fa5d 	bl	8004b04 <sync_fs>
 800664a:	4603      	mov	r3, r0
 800664c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	7d1b      	ldrb	r3, [r3, #20]
 8006652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006656:	b2da      	uxtb	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800665c:	7dfb      	ldrb	r3, [r7, #23]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff ff7b 	bl	800656a <f_sync>
 8006674:	4603      	mov	r3, r0
 8006676:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d118      	bne.n	80066b0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f107 0208 	add.w	r2, r7, #8
 8006684:	4611      	mov	r1, r2
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff fbc4 	bl	8005e14 <validate>
 800668c:	4603      	mov	r3, r0
 800668e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10c      	bne.n	80066b0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe f960 	bl	8004960 <dec_lock>
 80066a0:	4603      	mov	r3, r0
 80066a2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d102      	bne.n	80066b0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b092      	sub	sp, #72	@ 0x48
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80066c6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80066ca:	f107 030c 	add.w	r3, r7, #12
 80066ce:	2200      	movs	r2, #0
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff f953 	bl	800597c <find_volume>
 80066d6:	4603      	mov	r3, r0
 80066d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80066dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f040 8099 	bne.w	8006818 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80066e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80066ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	3b02      	subs	r3, #2
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d804      	bhi.n	8006704 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80066fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	e089      	b.n	8006818 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006704:	2300      	movs	r3, #0
 8006706:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d128      	bne.n	8006762 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006710:	2302      	movs	r3, #2
 8006712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006716:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006718:	f107 0314 	add.w	r3, r7, #20
 800671c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe fa7d 	bl	8004c1e <get_fat>
 8006724:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672c:	d103      	bne.n	8006736 <f_getfree+0x7c>
 800672e:	2301      	movs	r3, #1
 8006730:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006734:	e063      	b.n	80067fe <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006738:	2b01      	cmp	r3, #1
 800673a:	d103      	bne.n	8006744 <f_getfree+0x8a>
 800673c:	2302      	movs	r3, #2
 800673e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006742:	e05c      	b.n	80067fe <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d102      	bne.n	8006750 <f_getfree+0x96>
 800674a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800674c:	3301      	adds	r3, #1
 800674e:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8006750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006752:	3301      	adds	r3, #1
 8006754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800675c:	429a      	cmp	r2, r3
 800675e:	d3db      	bcc.n	8006718 <f_getfree+0x5e>
 8006760:	e04d      	b.n	80067fe <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	637b      	str	r3, [r7, #52]	@ 0x34
 8006772:	2300      	movs	r3, #0
 8006774:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8006776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006778:	2b00      	cmp	r3, #0
 800677a:	d113      	bne.n	80067a4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800677c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800677e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006784:	4619      	mov	r1, r3
 8006786:	f7fe f98f 	bl	8004aa8 <move_window>
 800678a:	4603      	mov	r3, r0
 800678c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8006790:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006794:	2b00      	cmp	r3, #0
 8006796:	d131      	bne.n	80067fc <f_getfree+0x142>
							p = fs->win;
 8006798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679a:	3330      	adds	r3, #48	@ 0x30
 800679c:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800679e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067a2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80067a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d10f      	bne.n	80067cc <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80067ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067ae:	f7fd fec9 	bl	8004544 <ld_word>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d102      	bne.n	80067be <f_getfree+0x104>
 80067b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067ba:	3301      	adds	r3, #1
 80067bc:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 80067be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c0:	3302      	adds	r3, #2
 80067c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80067c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c6:	3b02      	subs	r3, #2
 80067c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ca:	e010      	b.n	80067ee <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80067cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067ce:	f7fd fed2 	bl	8004576 <ld_dword>
 80067d2:	4603      	mov	r3, r0
 80067d4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <f_getfree+0x128>
 80067dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067de:	3301      	adds	r3, #1
 80067e0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80067e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e4:	3304      	adds	r3, #4
 80067e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80067e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ea:	3b04      	subs	r3, #4
 80067ec:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80067ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f0:	3b01      	subs	r3, #1
 80067f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1bd      	bne.n	8006776 <f_getfree+0xbc>
 80067fa:	e000      	b.n	80067fe <f_getfree+0x144>
							if (res != FR_OK) break;
 80067fc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006802:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006806:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006808:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800680a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680c:	791a      	ldrb	r2, [r3, #4]
 800680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006810:	f042 0201 	orr.w	r2, r2, #1
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006818:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800681c:	4618      	mov	r0, r3
 800681e:	3748      	adds	r7, #72	@ 0x48
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006832:	2301      	movs	r3, #1
 8006834:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800683a:	4b1f      	ldr	r3, [pc, #124]	@ (80068b8 <FATFS_LinkDriverEx+0x94>)
 800683c:	7a5b      	ldrb	r3, [r3, #9]
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d131      	bne.n	80068a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006844:	4b1c      	ldr	r3, [pc, #112]	@ (80068b8 <FATFS_LinkDriverEx+0x94>)
 8006846:	7a5b      	ldrb	r3, [r3, #9]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	461a      	mov	r2, r3
 800684c:	4b1a      	ldr	r3, [pc, #104]	@ (80068b8 <FATFS_LinkDriverEx+0x94>)
 800684e:	2100      	movs	r1, #0
 8006850:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006852:	4b19      	ldr	r3, [pc, #100]	@ (80068b8 <FATFS_LinkDriverEx+0x94>)
 8006854:	7a5b      	ldrb	r3, [r3, #9]
 8006856:	b2db      	uxtb	r3, r3
 8006858:	4a17      	ldr	r2, [pc, #92]	@ (80068b8 <FATFS_LinkDriverEx+0x94>)
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006862:	4b15      	ldr	r3, [pc, #84]	@ (80068b8 <FATFS_LinkDriverEx+0x94>)
 8006864:	7a5b      	ldrb	r3, [r3, #9]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	4b13      	ldr	r3, [pc, #76]	@ (80068b8 <FATFS_LinkDriverEx+0x94>)
 800686c:	4413      	add	r3, r2
 800686e:	79fa      	ldrb	r2, [r7, #7]
 8006870:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006872:	4b11      	ldr	r3, [pc, #68]	@ (80068b8 <FATFS_LinkDriverEx+0x94>)
 8006874:	7a5b      	ldrb	r3, [r3, #9]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	b2d1      	uxtb	r1, r2
 800687c:	4a0e      	ldr	r2, [pc, #56]	@ (80068b8 <FATFS_LinkDriverEx+0x94>)
 800687e:	7251      	strb	r1, [r2, #9]
 8006880:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006882:	7dbb      	ldrb	r3, [r7, #22]
 8006884:	3330      	adds	r3, #48	@ 0x30
 8006886:	b2da      	uxtb	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	3301      	adds	r3, #1
 8006890:	223a      	movs	r2, #58	@ 0x3a
 8006892:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	3302      	adds	r3, #2
 8006898:	222f      	movs	r2, #47	@ 0x2f
 800689a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	3303      	adds	r3, #3
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	200001c0 	.word	0x200001c0

080068bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80068c6:	2200      	movs	r2, #0
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ffaa 	bl	8006824 <FATFS_LinkDriverEx>
 80068d0:	4603      	mov	r3, r0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <__sflush_r>:
 80068dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e4:	0716      	lsls	r6, r2, #28
 80068e6:	4605      	mov	r5, r0
 80068e8:	460c      	mov	r4, r1
 80068ea:	d454      	bmi.n	8006996 <__sflush_r+0xba>
 80068ec:	684b      	ldr	r3, [r1, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	dc02      	bgt.n	80068f8 <__sflush_r+0x1c>
 80068f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	dd48      	ble.n	800698a <__sflush_r+0xae>
 80068f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068fa:	2e00      	cmp	r6, #0
 80068fc:	d045      	beq.n	800698a <__sflush_r+0xae>
 80068fe:	2300      	movs	r3, #0
 8006900:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006904:	682f      	ldr	r7, [r5, #0]
 8006906:	6a21      	ldr	r1, [r4, #32]
 8006908:	602b      	str	r3, [r5, #0]
 800690a:	d030      	beq.n	800696e <__sflush_r+0x92>
 800690c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	0759      	lsls	r1, r3, #29
 8006912:	d505      	bpl.n	8006920 <__sflush_r+0x44>
 8006914:	6863      	ldr	r3, [r4, #4]
 8006916:	1ad2      	subs	r2, r2, r3
 8006918:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800691a:	b10b      	cbz	r3, 8006920 <__sflush_r+0x44>
 800691c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800691e:	1ad2      	subs	r2, r2, r3
 8006920:	2300      	movs	r3, #0
 8006922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006924:	6a21      	ldr	r1, [r4, #32]
 8006926:	4628      	mov	r0, r5
 8006928:	47b0      	blx	r6
 800692a:	1c43      	adds	r3, r0, #1
 800692c:	89a3      	ldrh	r3, [r4, #12]
 800692e:	d106      	bne.n	800693e <__sflush_r+0x62>
 8006930:	6829      	ldr	r1, [r5, #0]
 8006932:	291d      	cmp	r1, #29
 8006934:	d82b      	bhi.n	800698e <__sflush_r+0xb2>
 8006936:	4a2a      	ldr	r2, [pc, #168]	@ (80069e0 <__sflush_r+0x104>)
 8006938:	40ca      	lsrs	r2, r1
 800693a:	07d6      	lsls	r6, r2, #31
 800693c:	d527      	bpl.n	800698e <__sflush_r+0xb2>
 800693e:	2200      	movs	r2, #0
 8006940:	6062      	str	r2, [r4, #4]
 8006942:	04d9      	lsls	r1, r3, #19
 8006944:	6922      	ldr	r2, [r4, #16]
 8006946:	6022      	str	r2, [r4, #0]
 8006948:	d504      	bpl.n	8006954 <__sflush_r+0x78>
 800694a:	1c42      	adds	r2, r0, #1
 800694c:	d101      	bne.n	8006952 <__sflush_r+0x76>
 800694e:	682b      	ldr	r3, [r5, #0]
 8006950:	b903      	cbnz	r3, 8006954 <__sflush_r+0x78>
 8006952:	6560      	str	r0, [r4, #84]	@ 0x54
 8006954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006956:	602f      	str	r7, [r5, #0]
 8006958:	b1b9      	cbz	r1, 800698a <__sflush_r+0xae>
 800695a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800695e:	4299      	cmp	r1, r3
 8006960:	d002      	beq.n	8006968 <__sflush_r+0x8c>
 8006962:	4628      	mov	r0, r5
 8006964:	f000 fb00 	bl	8006f68 <_free_r>
 8006968:	2300      	movs	r3, #0
 800696a:	6363      	str	r3, [r4, #52]	@ 0x34
 800696c:	e00d      	b.n	800698a <__sflush_r+0xae>
 800696e:	2301      	movs	r3, #1
 8006970:	4628      	mov	r0, r5
 8006972:	47b0      	blx	r6
 8006974:	4602      	mov	r2, r0
 8006976:	1c50      	adds	r0, r2, #1
 8006978:	d1c9      	bne.n	800690e <__sflush_r+0x32>
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0c6      	beq.n	800690e <__sflush_r+0x32>
 8006980:	2b1d      	cmp	r3, #29
 8006982:	d001      	beq.n	8006988 <__sflush_r+0xac>
 8006984:	2b16      	cmp	r3, #22
 8006986:	d11e      	bne.n	80069c6 <__sflush_r+0xea>
 8006988:	602f      	str	r7, [r5, #0]
 800698a:	2000      	movs	r0, #0
 800698c:	e022      	b.n	80069d4 <__sflush_r+0xf8>
 800698e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006992:	b21b      	sxth	r3, r3
 8006994:	e01b      	b.n	80069ce <__sflush_r+0xf2>
 8006996:	690f      	ldr	r7, [r1, #16]
 8006998:	2f00      	cmp	r7, #0
 800699a:	d0f6      	beq.n	800698a <__sflush_r+0xae>
 800699c:	0793      	lsls	r3, r2, #30
 800699e:	680e      	ldr	r6, [r1, #0]
 80069a0:	bf08      	it	eq
 80069a2:	694b      	ldreq	r3, [r1, #20]
 80069a4:	600f      	str	r7, [r1, #0]
 80069a6:	bf18      	it	ne
 80069a8:	2300      	movne	r3, #0
 80069aa:	eba6 0807 	sub.w	r8, r6, r7
 80069ae:	608b      	str	r3, [r1, #8]
 80069b0:	f1b8 0f00 	cmp.w	r8, #0
 80069b4:	dde9      	ble.n	800698a <__sflush_r+0xae>
 80069b6:	6a21      	ldr	r1, [r4, #32]
 80069b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80069ba:	4643      	mov	r3, r8
 80069bc:	463a      	mov	r2, r7
 80069be:	4628      	mov	r0, r5
 80069c0:	47b0      	blx	r6
 80069c2:	2800      	cmp	r0, #0
 80069c4:	dc08      	bgt.n	80069d8 <__sflush_r+0xfc>
 80069c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ce:	81a3      	strh	r3, [r4, #12]
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295
 80069d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d8:	4407      	add	r7, r0
 80069da:	eba8 0800 	sub.w	r8, r8, r0
 80069de:	e7e7      	b.n	80069b0 <__sflush_r+0xd4>
 80069e0:	20400001 	.word	0x20400001

080069e4 <_fflush_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	690b      	ldr	r3, [r1, #16]
 80069e8:	4605      	mov	r5, r0
 80069ea:	460c      	mov	r4, r1
 80069ec:	b913      	cbnz	r3, 80069f4 <_fflush_r+0x10>
 80069ee:	2500      	movs	r5, #0
 80069f0:	4628      	mov	r0, r5
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	b118      	cbz	r0, 80069fe <_fflush_r+0x1a>
 80069f6:	6a03      	ldr	r3, [r0, #32]
 80069f8:	b90b      	cbnz	r3, 80069fe <_fflush_r+0x1a>
 80069fa:	f000 f8bb 	bl	8006b74 <__sinit>
 80069fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0f3      	beq.n	80069ee <_fflush_r+0xa>
 8006a06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a08:	07d0      	lsls	r0, r2, #31
 8006a0a:	d404      	bmi.n	8006a16 <_fflush_r+0x32>
 8006a0c:	0599      	lsls	r1, r3, #22
 8006a0e:	d402      	bmi.n	8006a16 <_fflush_r+0x32>
 8006a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a12:	f000 faa6 	bl	8006f62 <__retarget_lock_acquire_recursive>
 8006a16:	4628      	mov	r0, r5
 8006a18:	4621      	mov	r1, r4
 8006a1a:	f7ff ff5f 	bl	80068dc <__sflush_r>
 8006a1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a20:	07da      	lsls	r2, r3, #31
 8006a22:	4605      	mov	r5, r0
 8006a24:	d4e4      	bmi.n	80069f0 <_fflush_r+0xc>
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	059b      	lsls	r3, r3, #22
 8006a2a:	d4e1      	bmi.n	80069f0 <_fflush_r+0xc>
 8006a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a2e:	f000 fa99 	bl	8006f64 <__retarget_lock_release_recursive>
 8006a32:	e7dd      	b.n	80069f0 <_fflush_r+0xc>

08006a34 <fflush>:
 8006a34:	4601      	mov	r1, r0
 8006a36:	b920      	cbnz	r0, 8006a42 <fflush+0xe>
 8006a38:	4a04      	ldr	r2, [pc, #16]	@ (8006a4c <fflush+0x18>)
 8006a3a:	4905      	ldr	r1, [pc, #20]	@ (8006a50 <fflush+0x1c>)
 8006a3c:	4805      	ldr	r0, [pc, #20]	@ (8006a54 <fflush+0x20>)
 8006a3e:	f000 b8b1 	b.w	8006ba4 <_fwalk_sglue>
 8006a42:	4b05      	ldr	r3, [pc, #20]	@ (8006a58 <fflush+0x24>)
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	f7ff bfcd 	b.w	80069e4 <_fflush_r>
 8006a4a:	bf00      	nop
 8006a4c:	20000024 	.word	0x20000024
 8006a50:	080069e5 	.word	0x080069e5
 8006a54:	20000034 	.word	0x20000034
 8006a58:	20000030 	.word	0x20000030

08006a5c <std>:
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	4604      	mov	r4, r0
 8006a62:	e9c0 3300 	strd	r3, r3, [r0]
 8006a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a6a:	6083      	str	r3, [r0, #8]
 8006a6c:	8181      	strh	r1, [r0, #12]
 8006a6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a70:	81c2      	strh	r2, [r0, #14]
 8006a72:	6183      	str	r3, [r0, #24]
 8006a74:	4619      	mov	r1, r3
 8006a76:	2208      	movs	r2, #8
 8006a78:	305c      	adds	r0, #92	@ 0x5c
 8006a7a:	f000 f9f9 	bl	8006e70 <memset>
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab4 <std+0x58>)
 8006a80:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a82:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab8 <std+0x5c>)
 8006a84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a86:	4b0d      	ldr	r3, [pc, #52]	@ (8006abc <std+0x60>)
 8006a88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac0 <std+0x64>)
 8006a8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac4 <std+0x68>)
 8006a90:	6224      	str	r4, [r4, #32]
 8006a92:	429c      	cmp	r4, r3
 8006a94:	d006      	beq.n	8006aa4 <std+0x48>
 8006a96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a9a:	4294      	cmp	r4, r2
 8006a9c:	d002      	beq.n	8006aa4 <std+0x48>
 8006a9e:	33d0      	adds	r3, #208	@ 0xd0
 8006aa0:	429c      	cmp	r4, r3
 8006aa2:	d105      	bne.n	8006ab0 <std+0x54>
 8006aa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aac:	f000 ba58 	b.w	8006f60 <__retarget_lock_init_recursive>
 8006ab0:	bd10      	pop	{r4, pc}
 8006ab2:	bf00      	nop
 8006ab4:	08006cc1 	.word	0x08006cc1
 8006ab8:	08006ce3 	.word	0x08006ce3
 8006abc:	08006d1b 	.word	0x08006d1b
 8006ac0:	08006d3f 	.word	0x08006d3f
 8006ac4:	200001cc 	.word	0x200001cc

08006ac8 <stdio_exit_handler>:
 8006ac8:	4a02      	ldr	r2, [pc, #8]	@ (8006ad4 <stdio_exit_handler+0xc>)
 8006aca:	4903      	ldr	r1, [pc, #12]	@ (8006ad8 <stdio_exit_handler+0x10>)
 8006acc:	4803      	ldr	r0, [pc, #12]	@ (8006adc <stdio_exit_handler+0x14>)
 8006ace:	f000 b869 	b.w	8006ba4 <_fwalk_sglue>
 8006ad2:	bf00      	nop
 8006ad4:	20000024 	.word	0x20000024
 8006ad8:	080069e5 	.word	0x080069e5
 8006adc:	20000034 	.word	0x20000034

08006ae0 <cleanup_stdio>:
 8006ae0:	6841      	ldr	r1, [r0, #4]
 8006ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8006b14 <cleanup_stdio+0x34>)
 8006ae4:	4299      	cmp	r1, r3
 8006ae6:	b510      	push	{r4, lr}
 8006ae8:	4604      	mov	r4, r0
 8006aea:	d001      	beq.n	8006af0 <cleanup_stdio+0x10>
 8006aec:	f7ff ff7a 	bl	80069e4 <_fflush_r>
 8006af0:	68a1      	ldr	r1, [r4, #8]
 8006af2:	4b09      	ldr	r3, [pc, #36]	@ (8006b18 <cleanup_stdio+0x38>)
 8006af4:	4299      	cmp	r1, r3
 8006af6:	d002      	beq.n	8006afe <cleanup_stdio+0x1e>
 8006af8:	4620      	mov	r0, r4
 8006afa:	f7ff ff73 	bl	80069e4 <_fflush_r>
 8006afe:	68e1      	ldr	r1, [r4, #12]
 8006b00:	4b06      	ldr	r3, [pc, #24]	@ (8006b1c <cleanup_stdio+0x3c>)
 8006b02:	4299      	cmp	r1, r3
 8006b04:	d004      	beq.n	8006b10 <cleanup_stdio+0x30>
 8006b06:	4620      	mov	r0, r4
 8006b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b0c:	f7ff bf6a 	b.w	80069e4 <_fflush_r>
 8006b10:	bd10      	pop	{r4, pc}
 8006b12:	bf00      	nop
 8006b14:	200001cc 	.word	0x200001cc
 8006b18:	20000234 	.word	0x20000234
 8006b1c:	2000029c 	.word	0x2000029c

08006b20 <global_stdio_init.part.0>:
 8006b20:	b510      	push	{r4, lr}
 8006b22:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <global_stdio_init.part.0+0x30>)
 8006b24:	4c0b      	ldr	r4, [pc, #44]	@ (8006b54 <global_stdio_init.part.0+0x34>)
 8006b26:	4a0c      	ldr	r2, [pc, #48]	@ (8006b58 <global_stdio_init.part.0+0x38>)
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2104      	movs	r1, #4
 8006b30:	f7ff ff94 	bl	8006a5c <std>
 8006b34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b38:	2201      	movs	r2, #1
 8006b3a:	2109      	movs	r1, #9
 8006b3c:	f7ff ff8e 	bl	8006a5c <std>
 8006b40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b44:	2202      	movs	r2, #2
 8006b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b4a:	2112      	movs	r1, #18
 8006b4c:	f7ff bf86 	b.w	8006a5c <std>
 8006b50:	20000304 	.word	0x20000304
 8006b54:	200001cc 	.word	0x200001cc
 8006b58:	08006ac9 	.word	0x08006ac9

08006b5c <__sfp_lock_acquire>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	@ (8006b64 <__sfp_lock_acquire+0x8>)
 8006b5e:	f000 ba00 	b.w	8006f62 <__retarget_lock_acquire_recursive>
 8006b62:	bf00      	nop
 8006b64:	2000030d 	.word	0x2000030d

08006b68 <__sfp_lock_release>:
 8006b68:	4801      	ldr	r0, [pc, #4]	@ (8006b70 <__sfp_lock_release+0x8>)
 8006b6a:	f000 b9fb 	b.w	8006f64 <__retarget_lock_release_recursive>
 8006b6e:	bf00      	nop
 8006b70:	2000030d 	.word	0x2000030d

08006b74 <__sinit>:
 8006b74:	b510      	push	{r4, lr}
 8006b76:	4604      	mov	r4, r0
 8006b78:	f7ff fff0 	bl	8006b5c <__sfp_lock_acquire>
 8006b7c:	6a23      	ldr	r3, [r4, #32]
 8006b7e:	b11b      	cbz	r3, 8006b88 <__sinit+0x14>
 8006b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b84:	f7ff bff0 	b.w	8006b68 <__sfp_lock_release>
 8006b88:	4b04      	ldr	r3, [pc, #16]	@ (8006b9c <__sinit+0x28>)
 8006b8a:	6223      	str	r3, [r4, #32]
 8006b8c:	4b04      	ldr	r3, [pc, #16]	@ (8006ba0 <__sinit+0x2c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1f5      	bne.n	8006b80 <__sinit+0xc>
 8006b94:	f7ff ffc4 	bl	8006b20 <global_stdio_init.part.0>
 8006b98:	e7f2      	b.n	8006b80 <__sinit+0xc>
 8006b9a:	bf00      	nop
 8006b9c:	08006ae1 	.word	0x08006ae1
 8006ba0:	20000304 	.word	0x20000304

08006ba4 <_fwalk_sglue>:
 8006ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ba8:	4607      	mov	r7, r0
 8006baa:	4688      	mov	r8, r1
 8006bac:	4614      	mov	r4, r2
 8006bae:	2600      	movs	r6, #0
 8006bb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bb4:	f1b9 0901 	subs.w	r9, r9, #1
 8006bb8:	d505      	bpl.n	8006bc6 <_fwalk_sglue+0x22>
 8006bba:	6824      	ldr	r4, [r4, #0]
 8006bbc:	2c00      	cmp	r4, #0
 8006bbe:	d1f7      	bne.n	8006bb0 <_fwalk_sglue+0xc>
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bc6:	89ab      	ldrh	r3, [r5, #12]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d907      	bls.n	8006bdc <_fwalk_sglue+0x38>
 8006bcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	d003      	beq.n	8006bdc <_fwalk_sglue+0x38>
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	47c0      	blx	r8
 8006bda:	4306      	orrs	r6, r0
 8006bdc:	3568      	adds	r5, #104	@ 0x68
 8006bde:	e7e9      	b.n	8006bb4 <_fwalk_sglue+0x10>

08006be0 <iprintf>:
 8006be0:	b40f      	push	{r0, r1, r2, r3}
 8006be2:	b507      	push	{r0, r1, r2, lr}
 8006be4:	4906      	ldr	r1, [pc, #24]	@ (8006c00 <iprintf+0x20>)
 8006be6:	ab04      	add	r3, sp, #16
 8006be8:	6808      	ldr	r0, [r1, #0]
 8006bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bee:	6881      	ldr	r1, [r0, #8]
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	f000 fadb 	bl	80071ac <_vfiprintf_r>
 8006bf6:	b003      	add	sp, #12
 8006bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bfc:	b004      	add	sp, #16
 8006bfe:	4770      	bx	lr
 8006c00:	20000030 	.word	0x20000030

08006c04 <_puts_r>:
 8006c04:	6a03      	ldr	r3, [r0, #32]
 8006c06:	b570      	push	{r4, r5, r6, lr}
 8006c08:	6884      	ldr	r4, [r0, #8]
 8006c0a:	4605      	mov	r5, r0
 8006c0c:	460e      	mov	r6, r1
 8006c0e:	b90b      	cbnz	r3, 8006c14 <_puts_r+0x10>
 8006c10:	f7ff ffb0 	bl	8006b74 <__sinit>
 8006c14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c16:	07db      	lsls	r3, r3, #31
 8006c18:	d405      	bmi.n	8006c26 <_puts_r+0x22>
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	0598      	lsls	r0, r3, #22
 8006c1e:	d402      	bmi.n	8006c26 <_puts_r+0x22>
 8006c20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c22:	f000 f99e 	bl	8006f62 <__retarget_lock_acquire_recursive>
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	0719      	lsls	r1, r3, #28
 8006c2a:	d502      	bpl.n	8006c32 <_puts_r+0x2e>
 8006c2c:	6923      	ldr	r3, [r4, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d135      	bne.n	8006c9e <_puts_r+0x9a>
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 f8c5 	bl	8006dc4 <__swsetup_r>
 8006c3a:	b380      	cbz	r0, 8006c9e <_puts_r+0x9a>
 8006c3c:	f04f 35ff 	mov.w	r5, #4294967295
 8006c40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c42:	07da      	lsls	r2, r3, #31
 8006c44:	d405      	bmi.n	8006c52 <_puts_r+0x4e>
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	059b      	lsls	r3, r3, #22
 8006c4a:	d402      	bmi.n	8006c52 <_puts_r+0x4e>
 8006c4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c4e:	f000 f989 	bl	8006f64 <__retarget_lock_release_recursive>
 8006c52:	4628      	mov	r0, r5
 8006c54:	bd70      	pop	{r4, r5, r6, pc}
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	da04      	bge.n	8006c64 <_puts_r+0x60>
 8006c5a:	69a2      	ldr	r2, [r4, #24]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	dc17      	bgt.n	8006c90 <_puts_r+0x8c>
 8006c60:	290a      	cmp	r1, #10
 8006c62:	d015      	beq.n	8006c90 <_puts_r+0x8c>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	6022      	str	r2, [r4, #0]
 8006c6a:	7019      	strb	r1, [r3, #0]
 8006c6c:	68a3      	ldr	r3, [r4, #8]
 8006c6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c72:	3b01      	subs	r3, #1
 8006c74:	60a3      	str	r3, [r4, #8]
 8006c76:	2900      	cmp	r1, #0
 8006c78:	d1ed      	bne.n	8006c56 <_puts_r+0x52>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	da11      	bge.n	8006ca2 <_puts_r+0x9e>
 8006c7e:	4622      	mov	r2, r4
 8006c80:	210a      	movs	r1, #10
 8006c82:	4628      	mov	r0, r5
 8006c84:	f000 f85f 	bl	8006d46 <__swbuf_r>
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d0d7      	beq.n	8006c3c <_puts_r+0x38>
 8006c8c:	250a      	movs	r5, #10
 8006c8e:	e7d7      	b.n	8006c40 <_puts_r+0x3c>
 8006c90:	4622      	mov	r2, r4
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 f857 	bl	8006d46 <__swbuf_r>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d1e7      	bne.n	8006c6c <_puts_r+0x68>
 8006c9c:	e7ce      	b.n	8006c3c <_puts_r+0x38>
 8006c9e:	3e01      	subs	r6, #1
 8006ca0:	e7e4      	b.n	8006c6c <_puts_r+0x68>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	6022      	str	r2, [r4, #0]
 8006ca8:	220a      	movs	r2, #10
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	e7ee      	b.n	8006c8c <_puts_r+0x88>
	...

08006cb0 <puts>:
 8006cb0:	4b02      	ldr	r3, [pc, #8]	@ (8006cbc <puts+0xc>)
 8006cb2:	4601      	mov	r1, r0
 8006cb4:	6818      	ldr	r0, [r3, #0]
 8006cb6:	f7ff bfa5 	b.w	8006c04 <_puts_r>
 8006cba:	bf00      	nop
 8006cbc:	20000030 	.word	0x20000030

08006cc0 <__sread>:
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc8:	f000 f8fc 	bl	8006ec4 <_read_r>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	bfab      	itete	ge
 8006cd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cd4:	181b      	addge	r3, r3, r0
 8006cd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cda:	bfac      	ite	ge
 8006cdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cde:	81a3      	strhlt	r3, [r4, #12]
 8006ce0:	bd10      	pop	{r4, pc}

08006ce2 <__swrite>:
 8006ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce6:	461f      	mov	r7, r3
 8006ce8:	898b      	ldrh	r3, [r1, #12]
 8006cea:	05db      	lsls	r3, r3, #23
 8006cec:	4605      	mov	r5, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	4616      	mov	r6, r2
 8006cf2:	d505      	bpl.n	8006d00 <__swrite+0x1e>
 8006cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f000 f8d0 	bl	8006ea0 <_lseek_r>
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	463b      	mov	r3, r7
 8006d10:	4628      	mov	r0, r5
 8006d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d16:	f000 b8e7 	b.w	8006ee8 <_write_r>

08006d1a <__sseek>:
 8006d1a:	b510      	push	{r4, lr}
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d22:	f000 f8bd 	bl	8006ea0 <_lseek_r>
 8006d26:	1c43      	adds	r3, r0, #1
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	bf15      	itete	ne
 8006d2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d36:	81a3      	strheq	r3, [r4, #12]
 8006d38:	bf18      	it	ne
 8006d3a:	81a3      	strhne	r3, [r4, #12]
 8006d3c:	bd10      	pop	{r4, pc}

08006d3e <__sclose>:
 8006d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d42:	f000 b89d 	b.w	8006e80 <_close_r>

08006d46 <__swbuf_r>:
 8006d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d48:	460e      	mov	r6, r1
 8006d4a:	4614      	mov	r4, r2
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	b118      	cbz	r0, 8006d58 <__swbuf_r+0x12>
 8006d50:	6a03      	ldr	r3, [r0, #32]
 8006d52:	b90b      	cbnz	r3, 8006d58 <__swbuf_r+0x12>
 8006d54:	f7ff ff0e 	bl	8006b74 <__sinit>
 8006d58:	69a3      	ldr	r3, [r4, #24]
 8006d5a:	60a3      	str	r3, [r4, #8]
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	071a      	lsls	r2, r3, #28
 8006d60:	d501      	bpl.n	8006d66 <__swbuf_r+0x20>
 8006d62:	6923      	ldr	r3, [r4, #16]
 8006d64:	b943      	cbnz	r3, 8006d78 <__swbuf_r+0x32>
 8006d66:	4621      	mov	r1, r4
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f000 f82b 	bl	8006dc4 <__swsetup_r>
 8006d6e:	b118      	cbz	r0, 8006d78 <__swbuf_r+0x32>
 8006d70:	f04f 37ff 	mov.w	r7, #4294967295
 8006d74:	4638      	mov	r0, r7
 8006d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	6922      	ldr	r2, [r4, #16]
 8006d7c:	1a98      	subs	r0, r3, r2
 8006d7e:	6963      	ldr	r3, [r4, #20]
 8006d80:	b2f6      	uxtb	r6, r6
 8006d82:	4283      	cmp	r3, r0
 8006d84:	4637      	mov	r7, r6
 8006d86:	dc05      	bgt.n	8006d94 <__swbuf_r+0x4e>
 8006d88:	4621      	mov	r1, r4
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f7ff fe2a 	bl	80069e4 <_fflush_r>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d1ed      	bne.n	8006d70 <__swbuf_r+0x2a>
 8006d94:	68a3      	ldr	r3, [r4, #8]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	60a3      	str	r3, [r4, #8]
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	6022      	str	r2, [r4, #0]
 8006da0:	701e      	strb	r6, [r3, #0]
 8006da2:	6962      	ldr	r2, [r4, #20]
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d004      	beq.n	8006db4 <__swbuf_r+0x6e>
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	07db      	lsls	r3, r3, #31
 8006dae:	d5e1      	bpl.n	8006d74 <__swbuf_r+0x2e>
 8006db0:	2e0a      	cmp	r6, #10
 8006db2:	d1df      	bne.n	8006d74 <__swbuf_r+0x2e>
 8006db4:	4621      	mov	r1, r4
 8006db6:	4628      	mov	r0, r5
 8006db8:	f7ff fe14 	bl	80069e4 <_fflush_r>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d0d9      	beq.n	8006d74 <__swbuf_r+0x2e>
 8006dc0:	e7d6      	b.n	8006d70 <__swbuf_r+0x2a>
	...

08006dc4 <__swsetup_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	4b29      	ldr	r3, [pc, #164]	@ (8006e6c <__swsetup_r+0xa8>)
 8006dc8:	4605      	mov	r5, r0
 8006dca:	6818      	ldr	r0, [r3, #0]
 8006dcc:	460c      	mov	r4, r1
 8006dce:	b118      	cbz	r0, 8006dd8 <__swsetup_r+0x14>
 8006dd0:	6a03      	ldr	r3, [r0, #32]
 8006dd2:	b90b      	cbnz	r3, 8006dd8 <__swsetup_r+0x14>
 8006dd4:	f7ff fece 	bl	8006b74 <__sinit>
 8006dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ddc:	0719      	lsls	r1, r3, #28
 8006dde:	d422      	bmi.n	8006e26 <__swsetup_r+0x62>
 8006de0:	06da      	lsls	r2, r3, #27
 8006de2:	d407      	bmi.n	8006df4 <__swsetup_r+0x30>
 8006de4:	2209      	movs	r2, #9
 8006de6:	602a      	str	r2, [r5, #0]
 8006de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dec:	81a3      	strh	r3, [r4, #12]
 8006dee:	f04f 30ff 	mov.w	r0, #4294967295
 8006df2:	e033      	b.n	8006e5c <__swsetup_r+0x98>
 8006df4:	0758      	lsls	r0, r3, #29
 8006df6:	d512      	bpl.n	8006e1e <__swsetup_r+0x5a>
 8006df8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dfa:	b141      	cbz	r1, 8006e0e <__swsetup_r+0x4a>
 8006dfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e00:	4299      	cmp	r1, r3
 8006e02:	d002      	beq.n	8006e0a <__swsetup_r+0x46>
 8006e04:	4628      	mov	r0, r5
 8006e06:	f000 f8af 	bl	8006f68 <_free_r>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e14:	81a3      	strh	r3, [r4, #12]
 8006e16:	2300      	movs	r3, #0
 8006e18:	6063      	str	r3, [r4, #4]
 8006e1a:	6923      	ldr	r3, [r4, #16]
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	f043 0308 	orr.w	r3, r3, #8
 8006e24:	81a3      	strh	r3, [r4, #12]
 8006e26:	6923      	ldr	r3, [r4, #16]
 8006e28:	b94b      	cbnz	r3, 8006e3e <__swsetup_r+0x7a>
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e34:	d003      	beq.n	8006e3e <__swsetup_r+0x7a>
 8006e36:	4621      	mov	r1, r4
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f000 fc81 	bl	8007740 <__smakebuf_r>
 8006e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e42:	f013 0201 	ands.w	r2, r3, #1
 8006e46:	d00a      	beq.n	8006e5e <__swsetup_r+0x9a>
 8006e48:	2200      	movs	r2, #0
 8006e4a:	60a2      	str	r2, [r4, #8]
 8006e4c:	6962      	ldr	r2, [r4, #20]
 8006e4e:	4252      	negs	r2, r2
 8006e50:	61a2      	str	r2, [r4, #24]
 8006e52:	6922      	ldr	r2, [r4, #16]
 8006e54:	b942      	cbnz	r2, 8006e68 <__swsetup_r+0xa4>
 8006e56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e5a:	d1c5      	bne.n	8006de8 <__swsetup_r+0x24>
 8006e5c:	bd38      	pop	{r3, r4, r5, pc}
 8006e5e:	0799      	lsls	r1, r3, #30
 8006e60:	bf58      	it	pl
 8006e62:	6962      	ldrpl	r2, [r4, #20]
 8006e64:	60a2      	str	r2, [r4, #8]
 8006e66:	e7f4      	b.n	8006e52 <__swsetup_r+0x8e>
 8006e68:	2000      	movs	r0, #0
 8006e6a:	e7f7      	b.n	8006e5c <__swsetup_r+0x98>
 8006e6c:	20000030 	.word	0x20000030

08006e70 <memset>:
 8006e70:	4402      	add	r2, r0
 8006e72:	4603      	mov	r3, r0
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d100      	bne.n	8006e7a <memset+0xa>
 8006e78:	4770      	bx	lr
 8006e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e7e:	e7f9      	b.n	8006e74 <memset+0x4>

08006e80 <_close_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	4d06      	ldr	r5, [pc, #24]	@ (8006e9c <_close_r+0x1c>)
 8006e84:	2300      	movs	r3, #0
 8006e86:	4604      	mov	r4, r0
 8006e88:	4608      	mov	r0, r1
 8006e8a:	602b      	str	r3, [r5, #0]
 8006e8c:	f7f9 fe97 	bl	8000bbe <_close>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_close_r+0x1a>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_close_r+0x1a>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	20000308 	.word	0x20000308

08006ea0 <_lseek_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4d07      	ldr	r5, [pc, #28]	@ (8006ec0 <_lseek_r+0x20>)
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	602a      	str	r2, [r5, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f7f9 feac 	bl	8000c0c <_lseek>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d102      	bne.n	8006ebe <_lseek_r+0x1e>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	b103      	cbz	r3, 8006ebe <_lseek_r+0x1e>
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	20000308 	.word	0x20000308

08006ec4 <_read_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4d07      	ldr	r5, [pc, #28]	@ (8006ee4 <_read_r+0x20>)
 8006ec8:	4604      	mov	r4, r0
 8006eca:	4608      	mov	r0, r1
 8006ecc:	4611      	mov	r1, r2
 8006ece:	2200      	movs	r2, #0
 8006ed0:	602a      	str	r2, [r5, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f7f9 fe3a 	bl	8000b4c <_read>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_read_r+0x1e>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_read_r+0x1e>
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	20000308 	.word	0x20000308

08006ee8 <_write_r>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	4d07      	ldr	r5, [pc, #28]	@ (8006f08 <_write_r+0x20>)
 8006eec:	4604      	mov	r4, r0
 8006eee:	4608      	mov	r0, r1
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	602a      	str	r2, [r5, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f7f9 fe45 	bl	8000b86 <_write>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_write_r+0x1e>
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_write_r+0x1e>
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	20000308 	.word	0x20000308

08006f0c <__errno>:
 8006f0c:	4b01      	ldr	r3, [pc, #4]	@ (8006f14 <__errno+0x8>)
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	20000030 	.word	0x20000030

08006f18 <__libc_init_array>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	4d0d      	ldr	r5, [pc, #52]	@ (8006f50 <__libc_init_array+0x38>)
 8006f1c:	4c0d      	ldr	r4, [pc, #52]	@ (8006f54 <__libc_init_array+0x3c>)
 8006f1e:	1b64      	subs	r4, r4, r5
 8006f20:	10a4      	asrs	r4, r4, #2
 8006f22:	2600      	movs	r6, #0
 8006f24:	42a6      	cmp	r6, r4
 8006f26:	d109      	bne.n	8006f3c <__libc_init_array+0x24>
 8006f28:	4d0b      	ldr	r5, [pc, #44]	@ (8006f58 <__libc_init_array+0x40>)
 8006f2a:	4c0c      	ldr	r4, [pc, #48]	@ (8006f5c <__libc_init_array+0x44>)
 8006f2c:	f000 fc76 	bl	800781c <_init>
 8006f30:	1b64      	subs	r4, r4, r5
 8006f32:	10a4      	asrs	r4, r4, #2
 8006f34:	2600      	movs	r6, #0
 8006f36:	42a6      	cmp	r6, r4
 8006f38:	d105      	bne.n	8006f46 <__libc_init_array+0x2e>
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}
 8006f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f40:	4798      	blx	r3
 8006f42:	3601      	adds	r6, #1
 8006f44:	e7ee      	b.n	8006f24 <__libc_init_array+0xc>
 8006f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f4a:	4798      	blx	r3
 8006f4c:	3601      	adds	r6, #1
 8006f4e:	e7f2      	b.n	8006f36 <__libc_init_array+0x1e>
 8006f50:	08007abc 	.word	0x08007abc
 8006f54:	08007abc 	.word	0x08007abc
 8006f58:	08007abc 	.word	0x08007abc
 8006f5c:	08007ac0 	.word	0x08007ac0

08006f60 <__retarget_lock_init_recursive>:
 8006f60:	4770      	bx	lr

08006f62 <__retarget_lock_acquire_recursive>:
 8006f62:	4770      	bx	lr

08006f64 <__retarget_lock_release_recursive>:
 8006f64:	4770      	bx	lr
	...

08006f68 <_free_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4605      	mov	r5, r0
 8006f6c:	2900      	cmp	r1, #0
 8006f6e:	d041      	beq.n	8006ff4 <_free_r+0x8c>
 8006f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f74:	1f0c      	subs	r4, r1, #4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfb8      	it	lt
 8006f7a:	18e4      	addlt	r4, r4, r3
 8006f7c:	f000 f8e0 	bl	8007140 <__malloc_lock>
 8006f80:	4a1d      	ldr	r2, [pc, #116]	@ (8006ff8 <_free_r+0x90>)
 8006f82:	6813      	ldr	r3, [r2, #0]
 8006f84:	b933      	cbnz	r3, 8006f94 <_free_r+0x2c>
 8006f86:	6063      	str	r3, [r4, #4]
 8006f88:	6014      	str	r4, [r2, #0]
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f90:	f000 b8dc 	b.w	800714c <__malloc_unlock>
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	d908      	bls.n	8006faa <_free_r+0x42>
 8006f98:	6820      	ldr	r0, [r4, #0]
 8006f9a:	1821      	adds	r1, r4, r0
 8006f9c:	428b      	cmp	r3, r1
 8006f9e:	bf01      	itttt	eq
 8006fa0:	6819      	ldreq	r1, [r3, #0]
 8006fa2:	685b      	ldreq	r3, [r3, #4]
 8006fa4:	1809      	addeq	r1, r1, r0
 8006fa6:	6021      	streq	r1, [r4, #0]
 8006fa8:	e7ed      	b.n	8006f86 <_free_r+0x1e>
 8006faa:	461a      	mov	r2, r3
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	b10b      	cbz	r3, 8006fb4 <_free_r+0x4c>
 8006fb0:	42a3      	cmp	r3, r4
 8006fb2:	d9fa      	bls.n	8006faa <_free_r+0x42>
 8006fb4:	6811      	ldr	r1, [r2, #0]
 8006fb6:	1850      	adds	r0, r2, r1
 8006fb8:	42a0      	cmp	r0, r4
 8006fba:	d10b      	bne.n	8006fd4 <_free_r+0x6c>
 8006fbc:	6820      	ldr	r0, [r4, #0]
 8006fbe:	4401      	add	r1, r0
 8006fc0:	1850      	adds	r0, r2, r1
 8006fc2:	4283      	cmp	r3, r0
 8006fc4:	6011      	str	r1, [r2, #0]
 8006fc6:	d1e0      	bne.n	8006f8a <_free_r+0x22>
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	6053      	str	r3, [r2, #4]
 8006fce:	4408      	add	r0, r1
 8006fd0:	6010      	str	r0, [r2, #0]
 8006fd2:	e7da      	b.n	8006f8a <_free_r+0x22>
 8006fd4:	d902      	bls.n	8006fdc <_free_r+0x74>
 8006fd6:	230c      	movs	r3, #12
 8006fd8:	602b      	str	r3, [r5, #0]
 8006fda:	e7d6      	b.n	8006f8a <_free_r+0x22>
 8006fdc:	6820      	ldr	r0, [r4, #0]
 8006fde:	1821      	adds	r1, r4, r0
 8006fe0:	428b      	cmp	r3, r1
 8006fe2:	bf04      	itt	eq
 8006fe4:	6819      	ldreq	r1, [r3, #0]
 8006fe6:	685b      	ldreq	r3, [r3, #4]
 8006fe8:	6063      	str	r3, [r4, #4]
 8006fea:	bf04      	itt	eq
 8006fec:	1809      	addeq	r1, r1, r0
 8006fee:	6021      	streq	r1, [r4, #0]
 8006ff0:	6054      	str	r4, [r2, #4]
 8006ff2:	e7ca      	b.n	8006f8a <_free_r+0x22>
 8006ff4:	bd38      	pop	{r3, r4, r5, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000314 	.word	0x20000314

08006ffc <sbrk_aligned>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	4e0f      	ldr	r6, [pc, #60]	@ (800703c <sbrk_aligned+0x40>)
 8007000:	460c      	mov	r4, r1
 8007002:	6831      	ldr	r1, [r6, #0]
 8007004:	4605      	mov	r5, r0
 8007006:	b911      	cbnz	r1, 800700e <sbrk_aligned+0x12>
 8007008:	f000 fbf8 	bl	80077fc <_sbrk_r>
 800700c:	6030      	str	r0, [r6, #0]
 800700e:	4621      	mov	r1, r4
 8007010:	4628      	mov	r0, r5
 8007012:	f000 fbf3 	bl	80077fc <_sbrk_r>
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	d103      	bne.n	8007022 <sbrk_aligned+0x26>
 800701a:	f04f 34ff 	mov.w	r4, #4294967295
 800701e:	4620      	mov	r0, r4
 8007020:	bd70      	pop	{r4, r5, r6, pc}
 8007022:	1cc4      	adds	r4, r0, #3
 8007024:	f024 0403 	bic.w	r4, r4, #3
 8007028:	42a0      	cmp	r0, r4
 800702a:	d0f8      	beq.n	800701e <sbrk_aligned+0x22>
 800702c:	1a21      	subs	r1, r4, r0
 800702e:	4628      	mov	r0, r5
 8007030:	f000 fbe4 	bl	80077fc <_sbrk_r>
 8007034:	3001      	adds	r0, #1
 8007036:	d1f2      	bne.n	800701e <sbrk_aligned+0x22>
 8007038:	e7ef      	b.n	800701a <sbrk_aligned+0x1e>
 800703a:	bf00      	nop
 800703c:	20000310 	.word	0x20000310

08007040 <_malloc_r>:
 8007040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007044:	1ccd      	adds	r5, r1, #3
 8007046:	f025 0503 	bic.w	r5, r5, #3
 800704a:	3508      	adds	r5, #8
 800704c:	2d0c      	cmp	r5, #12
 800704e:	bf38      	it	cc
 8007050:	250c      	movcc	r5, #12
 8007052:	2d00      	cmp	r5, #0
 8007054:	4606      	mov	r6, r0
 8007056:	db01      	blt.n	800705c <_malloc_r+0x1c>
 8007058:	42a9      	cmp	r1, r5
 800705a:	d904      	bls.n	8007066 <_malloc_r+0x26>
 800705c:	230c      	movs	r3, #12
 800705e:	6033      	str	r3, [r6, #0]
 8007060:	2000      	movs	r0, #0
 8007062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007066:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800713c <_malloc_r+0xfc>
 800706a:	f000 f869 	bl	8007140 <__malloc_lock>
 800706e:	f8d8 3000 	ldr.w	r3, [r8]
 8007072:	461c      	mov	r4, r3
 8007074:	bb44      	cbnz	r4, 80070c8 <_malloc_r+0x88>
 8007076:	4629      	mov	r1, r5
 8007078:	4630      	mov	r0, r6
 800707a:	f7ff ffbf 	bl	8006ffc <sbrk_aligned>
 800707e:	1c43      	adds	r3, r0, #1
 8007080:	4604      	mov	r4, r0
 8007082:	d158      	bne.n	8007136 <_malloc_r+0xf6>
 8007084:	f8d8 4000 	ldr.w	r4, [r8]
 8007088:	4627      	mov	r7, r4
 800708a:	2f00      	cmp	r7, #0
 800708c:	d143      	bne.n	8007116 <_malloc_r+0xd6>
 800708e:	2c00      	cmp	r4, #0
 8007090:	d04b      	beq.n	800712a <_malloc_r+0xea>
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	4639      	mov	r1, r7
 8007096:	4630      	mov	r0, r6
 8007098:	eb04 0903 	add.w	r9, r4, r3
 800709c:	f000 fbae 	bl	80077fc <_sbrk_r>
 80070a0:	4581      	cmp	r9, r0
 80070a2:	d142      	bne.n	800712a <_malloc_r+0xea>
 80070a4:	6821      	ldr	r1, [r4, #0]
 80070a6:	1a6d      	subs	r5, r5, r1
 80070a8:	4629      	mov	r1, r5
 80070aa:	4630      	mov	r0, r6
 80070ac:	f7ff ffa6 	bl	8006ffc <sbrk_aligned>
 80070b0:	3001      	adds	r0, #1
 80070b2:	d03a      	beq.n	800712a <_malloc_r+0xea>
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	442b      	add	r3, r5
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	f8d8 3000 	ldr.w	r3, [r8]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	bb62      	cbnz	r2, 800711c <_malloc_r+0xdc>
 80070c2:	f8c8 7000 	str.w	r7, [r8]
 80070c6:	e00f      	b.n	80070e8 <_malloc_r+0xa8>
 80070c8:	6822      	ldr	r2, [r4, #0]
 80070ca:	1b52      	subs	r2, r2, r5
 80070cc:	d420      	bmi.n	8007110 <_malloc_r+0xd0>
 80070ce:	2a0b      	cmp	r2, #11
 80070d0:	d917      	bls.n	8007102 <_malloc_r+0xc2>
 80070d2:	1961      	adds	r1, r4, r5
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	6025      	str	r5, [r4, #0]
 80070d8:	bf18      	it	ne
 80070da:	6059      	strne	r1, [r3, #4]
 80070dc:	6863      	ldr	r3, [r4, #4]
 80070de:	bf08      	it	eq
 80070e0:	f8c8 1000 	streq.w	r1, [r8]
 80070e4:	5162      	str	r2, [r4, r5]
 80070e6:	604b      	str	r3, [r1, #4]
 80070e8:	4630      	mov	r0, r6
 80070ea:	f000 f82f 	bl	800714c <__malloc_unlock>
 80070ee:	f104 000b 	add.w	r0, r4, #11
 80070f2:	1d23      	adds	r3, r4, #4
 80070f4:	f020 0007 	bic.w	r0, r0, #7
 80070f8:	1ac2      	subs	r2, r0, r3
 80070fa:	bf1c      	itt	ne
 80070fc:	1a1b      	subne	r3, r3, r0
 80070fe:	50a3      	strne	r3, [r4, r2]
 8007100:	e7af      	b.n	8007062 <_malloc_r+0x22>
 8007102:	6862      	ldr	r2, [r4, #4]
 8007104:	42a3      	cmp	r3, r4
 8007106:	bf0c      	ite	eq
 8007108:	f8c8 2000 	streq.w	r2, [r8]
 800710c:	605a      	strne	r2, [r3, #4]
 800710e:	e7eb      	b.n	80070e8 <_malloc_r+0xa8>
 8007110:	4623      	mov	r3, r4
 8007112:	6864      	ldr	r4, [r4, #4]
 8007114:	e7ae      	b.n	8007074 <_malloc_r+0x34>
 8007116:	463c      	mov	r4, r7
 8007118:	687f      	ldr	r7, [r7, #4]
 800711a:	e7b6      	b.n	800708a <_malloc_r+0x4a>
 800711c:	461a      	mov	r2, r3
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	42a3      	cmp	r3, r4
 8007122:	d1fb      	bne.n	800711c <_malloc_r+0xdc>
 8007124:	2300      	movs	r3, #0
 8007126:	6053      	str	r3, [r2, #4]
 8007128:	e7de      	b.n	80070e8 <_malloc_r+0xa8>
 800712a:	230c      	movs	r3, #12
 800712c:	6033      	str	r3, [r6, #0]
 800712e:	4630      	mov	r0, r6
 8007130:	f000 f80c 	bl	800714c <__malloc_unlock>
 8007134:	e794      	b.n	8007060 <_malloc_r+0x20>
 8007136:	6005      	str	r5, [r0, #0]
 8007138:	e7d6      	b.n	80070e8 <_malloc_r+0xa8>
 800713a:	bf00      	nop
 800713c:	20000314 	.word	0x20000314

08007140 <__malloc_lock>:
 8007140:	4801      	ldr	r0, [pc, #4]	@ (8007148 <__malloc_lock+0x8>)
 8007142:	f7ff bf0e 	b.w	8006f62 <__retarget_lock_acquire_recursive>
 8007146:	bf00      	nop
 8007148:	2000030c 	.word	0x2000030c

0800714c <__malloc_unlock>:
 800714c:	4801      	ldr	r0, [pc, #4]	@ (8007154 <__malloc_unlock+0x8>)
 800714e:	f7ff bf09 	b.w	8006f64 <__retarget_lock_release_recursive>
 8007152:	bf00      	nop
 8007154:	2000030c 	.word	0x2000030c

08007158 <__sfputc_r>:
 8007158:	6893      	ldr	r3, [r2, #8]
 800715a:	3b01      	subs	r3, #1
 800715c:	2b00      	cmp	r3, #0
 800715e:	b410      	push	{r4}
 8007160:	6093      	str	r3, [r2, #8]
 8007162:	da08      	bge.n	8007176 <__sfputc_r+0x1e>
 8007164:	6994      	ldr	r4, [r2, #24]
 8007166:	42a3      	cmp	r3, r4
 8007168:	db01      	blt.n	800716e <__sfputc_r+0x16>
 800716a:	290a      	cmp	r1, #10
 800716c:	d103      	bne.n	8007176 <__sfputc_r+0x1e>
 800716e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007172:	f7ff bde8 	b.w	8006d46 <__swbuf_r>
 8007176:	6813      	ldr	r3, [r2, #0]
 8007178:	1c58      	adds	r0, r3, #1
 800717a:	6010      	str	r0, [r2, #0]
 800717c:	7019      	strb	r1, [r3, #0]
 800717e:	4608      	mov	r0, r1
 8007180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007184:	4770      	bx	lr

08007186 <__sfputs_r>:
 8007186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007188:	4606      	mov	r6, r0
 800718a:	460f      	mov	r7, r1
 800718c:	4614      	mov	r4, r2
 800718e:	18d5      	adds	r5, r2, r3
 8007190:	42ac      	cmp	r4, r5
 8007192:	d101      	bne.n	8007198 <__sfputs_r+0x12>
 8007194:	2000      	movs	r0, #0
 8007196:	e007      	b.n	80071a8 <__sfputs_r+0x22>
 8007198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800719c:	463a      	mov	r2, r7
 800719e:	4630      	mov	r0, r6
 80071a0:	f7ff ffda 	bl	8007158 <__sfputc_r>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d1f3      	bne.n	8007190 <__sfputs_r+0xa>
 80071a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071ac <_vfiprintf_r>:
 80071ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b0:	460d      	mov	r5, r1
 80071b2:	b09d      	sub	sp, #116	@ 0x74
 80071b4:	4614      	mov	r4, r2
 80071b6:	4698      	mov	r8, r3
 80071b8:	4606      	mov	r6, r0
 80071ba:	b118      	cbz	r0, 80071c4 <_vfiprintf_r+0x18>
 80071bc:	6a03      	ldr	r3, [r0, #32]
 80071be:	b90b      	cbnz	r3, 80071c4 <_vfiprintf_r+0x18>
 80071c0:	f7ff fcd8 	bl	8006b74 <__sinit>
 80071c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071c6:	07d9      	lsls	r1, r3, #31
 80071c8:	d405      	bmi.n	80071d6 <_vfiprintf_r+0x2a>
 80071ca:	89ab      	ldrh	r3, [r5, #12]
 80071cc:	059a      	lsls	r2, r3, #22
 80071ce:	d402      	bmi.n	80071d6 <_vfiprintf_r+0x2a>
 80071d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071d2:	f7ff fec6 	bl	8006f62 <__retarget_lock_acquire_recursive>
 80071d6:	89ab      	ldrh	r3, [r5, #12]
 80071d8:	071b      	lsls	r3, r3, #28
 80071da:	d501      	bpl.n	80071e0 <_vfiprintf_r+0x34>
 80071dc:	692b      	ldr	r3, [r5, #16]
 80071de:	b99b      	cbnz	r3, 8007208 <_vfiprintf_r+0x5c>
 80071e0:	4629      	mov	r1, r5
 80071e2:	4630      	mov	r0, r6
 80071e4:	f7ff fdee 	bl	8006dc4 <__swsetup_r>
 80071e8:	b170      	cbz	r0, 8007208 <_vfiprintf_r+0x5c>
 80071ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071ec:	07dc      	lsls	r4, r3, #31
 80071ee:	d504      	bpl.n	80071fa <_vfiprintf_r+0x4e>
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295
 80071f4:	b01d      	add	sp, #116	@ 0x74
 80071f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fa:	89ab      	ldrh	r3, [r5, #12]
 80071fc:	0598      	lsls	r0, r3, #22
 80071fe:	d4f7      	bmi.n	80071f0 <_vfiprintf_r+0x44>
 8007200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007202:	f7ff feaf 	bl	8006f64 <__retarget_lock_release_recursive>
 8007206:	e7f3      	b.n	80071f0 <_vfiprintf_r+0x44>
 8007208:	2300      	movs	r3, #0
 800720a:	9309      	str	r3, [sp, #36]	@ 0x24
 800720c:	2320      	movs	r3, #32
 800720e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007212:	f8cd 800c 	str.w	r8, [sp, #12]
 8007216:	2330      	movs	r3, #48	@ 0x30
 8007218:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80073c8 <_vfiprintf_r+0x21c>
 800721c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007220:	f04f 0901 	mov.w	r9, #1
 8007224:	4623      	mov	r3, r4
 8007226:	469a      	mov	sl, r3
 8007228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800722c:	b10a      	cbz	r2, 8007232 <_vfiprintf_r+0x86>
 800722e:	2a25      	cmp	r2, #37	@ 0x25
 8007230:	d1f9      	bne.n	8007226 <_vfiprintf_r+0x7a>
 8007232:	ebba 0b04 	subs.w	fp, sl, r4
 8007236:	d00b      	beq.n	8007250 <_vfiprintf_r+0xa4>
 8007238:	465b      	mov	r3, fp
 800723a:	4622      	mov	r2, r4
 800723c:	4629      	mov	r1, r5
 800723e:	4630      	mov	r0, r6
 8007240:	f7ff ffa1 	bl	8007186 <__sfputs_r>
 8007244:	3001      	adds	r0, #1
 8007246:	f000 80a7 	beq.w	8007398 <_vfiprintf_r+0x1ec>
 800724a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800724c:	445a      	add	r2, fp
 800724e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007250:	f89a 3000 	ldrb.w	r3, [sl]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 809f 	beq.w	8007398 <_vfiprintf_r+0x1ec>
 800725a:	2300      	movs	r3, #0
 800725c:	f04f 32ff 	mov.w	r2, #4294967295
 8007260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007264:	f10a 0a01 	add.w	sl, sl, #1
 8007268:	9304      	str	r3, [sp, #16]
 800726a:	9307      	str	r3, [sp, #28]
 800726c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007270:	931a      	str	r3, [sp, #104]	@ 0x68
 8007272:	4654      	mov	r4, sl
 8007274:	2205      	movs	r2, #5
 8007276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727a:	4853      	ldr	r0, [pc, #332]	@ (80073c8 <_vfiprintf_r+0x21c>)
 800727c:	f7f8 ffb8 	bl	80001f0 <memchr>
 8007280:	9a04      	ldr	r2, [sp, #16]
 8007282:	b9d8      	cbnz	r0, 80072bc <_vfiprintf_r+0x110>
 8007284:	06d1      	lsls	r1, r2, #27
 8007286:	bf44      	itt	mi
 8007288:	2320      	movmi	r3, #32
 800728a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800728e:	0713      	lsls	r3, r2, #28
 8007290:	bf44      	itt	mi
 8007292:	232b      	movmi	r3, #43	@ 0x2b
 8007294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007298:	f89a 3000 	ldrb.w	r3, [sl]
 800729c:	2b2a      	cmp	r3, #42	@ 0x2a
 800729e:	d015      	beq.n	80072cc <_vfiprintf_r+0x120>
 80072a0:	9a07      	ldr	r2, [sp, #28]
 80072a2:	4654      	mov	r4, sl
 80072a4:	2000      	movs	r0, #0
 80072a6:	f04f 0c0a 	mov.w	ip, #10
 80072aa:	4621      	mov	r1, r4
 80072ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b0:	3b30      	subs	r3, #48	@ 0x30
 80072b2:	2b09      	cmp	r3, #9
 80072b4:	d94b      	bls.n	800734e <_vfiprintf_r+0x1a2>
 80072b6:	b1b0      	cbz	r0, 80072e6 <_vfiprintf_r+0x13a>
 80072b8:	9207      	str	r2, [sp, #28]
 80072ba:	e014      	b.n	80072e6 <_vfiprintf_r+0x13a>
 80072bc:	eba0 0308 	sub.w	r3, r0, r8
 80072c0:	fa09 f303 	lsl.w	r3, r9, r3
 80072c4:	4313      	orrs	r3, r2
 80072c6:	9304      	str	r3, [sp, #16]
 80072c8:	46a2      	mov	sl, r4
 80072ca:	e7d2      	b.n	8007272 <_vfiprintf_r+0xc6>
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	1d19      	adds	r1, r3, #4
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	9103      	str	r1, [sp, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	bfbb      	ittet	lt
 80072d8:	425b      	neglt	r3, r3
 80072da:	f042 0202 	orrlt.w	r2, r2, #2
 80072de:	9307      	strge	r3, [sp, #28]
 80072e0:	9307      	strlt	r3, [sp, #28]
 80072e2:	bfb8      	it	lt
 80072e4:	9204      	strlt	r2, [sp, #16]
 80072e6:	7823      	ldrb	r3, [r4, #0]
 80072e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80072ea:	d10a      	bne.n	8007302 <_vfiprintf_r+0x156>
 80072ec:	7863      	ldrb	r3, [r4, #1]
 80072ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80072f0:	d132      	bne.n	8007358 <_vfiprintf_r+0x1ac>
 80072f2:	9b03      	ldr	r3, [sp, #12]
 80072f4:	1d1a      	adds	r2, r3, #4
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	9203      	str	r2, [sp, #12]
 80072fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072fe:	3402      	adds	r4, #2
 8007300:	9305      	str	r3, [sp, #20]
 8007302:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80073d8 <_vfiprintf_r+0x22c>
 8007306:	7821      	ldrb	r1, [r4, #0]
 8007308:	2203      	movs	r2, #3
 800730a:	4650      	mov	r0, sl
 800730c:	f7f8 ff70 	bl	80001f0 <memchr>
 8007310:	b138      	cbz	r0, 8007322 <_vfiprintf_r+0x176>
 8007312:	9b04      	ldr	r3, [sp, #16]
 8007314:	eba0 000a 	sub.w	r0, r0, sl
 8007318:	2240      	movs	r2, #64	@ 0x40
 800731a:	4082      	lsls	r2, r0
 800731c:	4313      	orrs	r3, r2
 800731e:	3401      	adds	r4, #1
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007326:	4829      	ldr	r0, [pc, #164]	@ (80073cc <_vfiprintf_r+0x220>)
 8007328:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800732c:	2206      	movs	r2, #6
 800732e:	f7f8 ff5f 	bl	80001f0 <memchr>
 8007332:	2800      	cmp	r0, #0
 8007334:	d03f      	beq.n	80073b6 <_vfiprintf_r+0x20a>
 8007336:	4b26      	ldr	r3, [pc, #152]	@ (80073d0 <_vfiprintf_r+0x224>)
 8007338:	bb1b      	cbnz	r3, 8007382 <_vfiprintf_r+0x1d6>
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	3307      	adds	r3, #7
 800733e:	f023 0307 	bic.w	r3, r3, #7
 8007342:	3308      	adds	r3, #8
 8007344:	9303      	str	r3, [sp, #12]
 8007346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007348:	443b      	add	r3, r7
 800734a:	9309      	str	r3, [sp, #36]	@ 0x24
 800734c:	e76a      	b.n	8007224 <_vfiprintf_r+0x78>
 800734e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007352:	460c      	mov	r4, r1
 8007354:	2001      	movs	r0, #1
 8007356:	e7a8      	b.n	80072aa <_vfiprintf_r+0xfe>
 8007358:	2300      	movs	r3, #0
 800735a:	3401      	adds	r4, #1
 800735c:	9305      	str	r3, [sp, #20]
 800735e:	4619      	mov	r1, r3
 8007360:	f04f 0c0a 	mov.w	ip, #10
 8007364:	4620      	mov	r0, r4
 8007366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800736a:	3a30      	subs	r2, #48	@ 0x30
 800736c:	2a09      	cmp	r2, #9
 800736e:	d903      	bls.n	8007378 <_vfiprintf_r+0x1cc>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0c6      	beq.n	8007302 <_vfiprintf_r+0x156>
 8007374:	9105      	str	r1, [sp, #20]
 8007376:	e7c4      	b.n	8007302 <_vfiprintf_r+0x156>
 8007378:	fb0c 2101 	mla	r1, ip, r1, r2
 800737c:	4604      	mov	r4, r0
 800737e:	2301      	movs	r3, #1
 8007380:	e7f0      	b.n	8007364 <_vfiprintf_r+0x1b8>
 8007382:	ab03      	add	r3, sp, #12
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	462a      	mov	r2, r5
 8007388:	4b12      	ldr	r3, [pc, #72]	@ (80073d4 <_vfiprintf_r+0x228>)
 800738a:	a904      	add	r1, sp, #16
 800738c:	4630      	mov	r0, r6
 800738e:	f3af 8000 	nop.w
 8007392:	4607      	mov	r7, r0
 8007394:	1c78      	adds	r0, r7, #1
 8007396:	d1d6      	bne.n	8007346 <_vfiprintf_r+0x19a>
 8007398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800739a:	07d9      	lsls	r1, r3, #31
 800739c:	d405      	bmi.n	80073aa <_vfiprintf_r+0x1fe>
 800739e:	89ab      	ldrh	r3, [r5, #12]
 80073a0:	059a      	lsls	r2, r3, #22
 80073a2:	d402      	bmi.n	80073aa <_vfiprintf_r+0x1fe>
 80073a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073a6:	f7ff fddd 	bl	8006f64 <__retarget_lock_release_recursive>
 80073aa:	89ab      	ldrh	r3, [r5, #12]
 80073ac:	065b      	lsls	r3, r3, #25
 80073ae:	f53f af1f 	bmi.w	80071f0 <_vfiprintf_r+0x44>
 80073b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073b4:	e71e      	b.n	80071f4 <_vfiprintf_r+0x48>
 80073b6:	ab03      	add	r3, sp, #12
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	462a      	mov	r2, r5
 80073bc:	4b05      	ldr	r3, [pc, #20]	@ (80073d4 <_vfiprintf_r+0x228>)
 80073be:	a904      	add	r1, sp, #16
 80073c0:	4630      	mov	r0, r6
 80073c2:	f000 f879 	bl	80074b8 <_printf_i>
 80073c6:	e7e4      	b.n	8007392 <_vfiprintf_r+0x1e6>
 80073c8:	08007a80 	.word	0x08007a80
 80073cc:	08007a8a 	.word	0x08007a8a
 80073d0:	00000000 	.word	0x00000000
 80073d4:	08007187 	.word	0x08007187
 80073d8:	08007a86 	.word	0x08007a86

080073dc <_printf_common>:
 80073dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e0:	4616      	mov	r6, r2
 80073e2:	4698      	mov	r8, r3
 80073e4:	688a      	ldr	r2, [r1, #8]
 80073e6:	690b      	ldr	r3, [r1, #16]
 80073e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073ec:	4293      	cmp	r3, r2
 80073ee:	bfb8      	it	lt
 80073f0:	4613      	movlt	r3, r2
 80073f2:	6033      	str	r3, [r6, #0]
 80073f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073f8:	4607      	mov	r7, r0
 80073fa:	460c      	mov	r4, r1
 80073fc:	b10a      	cbz	r2, 8007402 <_printf_common+0x26>
 80073fe:	3301      	adds	r3, #1
 8007400:	6033      	str	r3, [r6, #0]
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	0699      	lsls	r1, r3, #26
 8007406:	bf42      	ittt	mi
 8007408:	6833      	ldrmi	r3, [r6, #0]
 800740a:	3302      	addmi	r3, #2
 800740c:	6033      	strmi	r3, [r6, #0]
 800740e:	6825      	ldr	r5, [r4, #0]
 8007410:	f015 0506 	ands.w	r5, r5, #6
 8007414:	d106      	bne.n	8007424 <_printf_common+0x48>
 8007416:	f104 0a19 	add.w	sl, r4, #25
 800741a:	68e3      	ldr	r3, [r4, #12]
 800741c:	6832      	ldr	r2, [r6, #0]
 800741e:	1a9b      	subs	r3, r3, r2
 8007420:	42ab      	cmp	r3, r5
 8007422:	dc26      	bgt.n	8007472 <_printf_common+0x96>
 8007424:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007428:	6822      	ldr	r2, [r4, #0]
 800742a:	3b00      	subs	r3, #0
 800742c:	bf18      	it	ne
 800742e:	2301      	movne	r3, #1
 8007430:	0692      	lsls	r2, r2, #26
 8007432:	d42b      	bmi.n	800748c <_printf_common+0xb0>
 8007434:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007438:	4641      	mov	r1, r8
 800743a:	4638      	mov	r0, r7
 800743c:	47c8      	blx	r9
 800743e:	3001      	adds	r0, #1
 8007440:	d01e      	beq.n	8007480 <_printf_common+0xa4>
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	6922      	ldr	r2, [r4, #16]
 8007446:	f003 0306 	and.w	r3, r3, #6
 800744a:	2b04      	cmp	r3, #4
 800744c:	bf02      	ittt	eq
 800744e:	68e5      	ldreq	r5, [r4, #12]
 8007450:	6833      	ldreq	r3, [r6, #0]
 8007452:	1aed      	subeq	r5, r5, r3
 8007454:	68a3      	ldr	r3, [r4, #8]
 8007456:	bf0c      	ite	eq
 8007458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800745c:	2500      	movne	r5, #0
 800745e:	4293      	cmp	r3, r2
 8007460:	bfc4      	itt	gt
 8007462:	1a9b      	subgt	r3, r3, r2
 8007464:	18ed      	addgt	r5, r5, r3
 8007466:	2600      	movs	r6, #0
 8007468:	341a      	adds	r4, #26
 800746a:	42b5      	cmp	r5, r6
 800746c:	d11a      	bne.n	80074a4 <_printf_common+0xc8>
 800746e:	2000      	movs	r0, #0
 8007470:	e008      	b.n	8007484 <_printf_common+0xa8>
 8007472:	2301      	movs	r3, #1
 8007474:	4652      	mov	r2, sl
 8007476:	4641      	mov	r1, r8
 8007478:	4638      	mov	r0, r7
 800747a:	47c8      	blx	r9
 800747c:	3001      	adds	r0, #1
 800747e:	d103      	bne.n	8007488 <_printf_common+0xac>
 8007480:	f04f 30ff 	mov.w	r0, #4294967295
 8007484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007488:	3501      	adds	r5, #1
 800748a:	e7c6      	b.n	800741a <_printf_common+0x3e>
 800748c:	18e1      	adds	r1, r4, r3
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	2030      	movs	r0, #48	@ 0x30
 8007492:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007496:	4422      	add	r2, r4
 8007498:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800749c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074a0:	3302      	adds	r3, #2
 80074a2:	e7c7      	b.n	8007434 <_printf_common+0x58>
 80074a4:	2301      	movs	r3, #1
 80074a6:	4622      	mov	r2, r4
 80074a8:	4641      	mov	r1, r8
 80074aa:	4638      	mov	r0, r7
 80074ac:	47c8      	blx	r9
 80074ae:	3001      	adds	r0, #1
 80074b0:	d0e6      	beq.n	8007480 <_printf_common+0xa4>
 80074b2:	3601      	adds	r6, #1
 80074b4:	e7d9      	b.n	800746a <_printf_common+0x8e>
	...

080074b8 <_printf_i>:
 80074b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074bc:	7e0f      	ldrb	r7, [r1, #24]
 80074be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074c0:	2f78      	cmp	r7, #120	@ 0x78
 80074c2:	4691      	mov	r9, r2
 80074c4:	4680      	mov	r8, r0
 80074c6:	460c      	mov	r4, r1
 80074c8:	469a      	mov	sl, r3
 80074ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80074ce:	d807      	bhi.n	80074e0 <_printf_i+0x28>
 80074d0:	2f62      	cmp	r7, #98	@ 0x62
 80074d2:	d80a      	bhi.n	80074ea <_printf_i+0x32>
 80074d4:	2f00      	cmp	r7, #0
 80074d6:	f000 80d1 	beq.w	800767c <_printf_i+0x1c4>
 80074da:	2f58      	cmp	r7, #88	@ 0x58
 80074dc:	f000 80b8 	beq.w	8007650 <_printf_i+0x198>
 80074e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074e8:	e03a      	b.n	8007560 <_printf_i+0xa8>
 80074ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074ee:	2b15      	cmp	r3, #21
 80074f0:	d8f6      	bhi.n	80074e0 <_printf_i+0x28>
 80074f2:	a101      	add	r1, pc, #4	@ (adr r1, 80074f8 <_printf_i+0x40>)
 80074f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074f8:	08007551 	.word	0x08007551
 80074fc:	08007565 	.word	0x08007565
 8007500:	080074e1 	.word	0x080074e1
 8007504:	080074e1 	.word	0x080074e1
 8007508:	080074e1 	.word	0x080074e1
 800750c:	080074e1 	.word	0x080074e1
 8007510:	08007565 	.word	0x08007565
 8007514:	080074e1 	.word	0x080074e1
 8007518:	080074e1 	.word	0x080074e1
 800751c:	080074e1 	.word	0x080074e1
 8007520:	080074e1 	.word	0x080074e1
 8007524:	08007663 	.word	0x08007663
 8007528:	0800758f 	.word	0x0800758f
 800752c:	0800761d 	.word	0x0800761d
 8007530:	080074e1 	.word	0x080074e1
 8007534:	080074e1 	.word	0x080074e1
 8007538:	08007685 	.word	0x08007685
 800753c:	080074e1 	.word	0x080074e1
 8007540:	0800758f 	.word	0x0800758f
 8007544:	080074e1 	.word	0x080074e1
 8007548:	080074e1 	.word	0x080074e1
 800754c:	08007625 	.word	0x08007625
 8007550:	6833      	ldr	r3, [r6, #0]
 8007552:	1d1a      	adds	r2, r3, #4
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6032      	str	r2, [r6, #0]
 8007558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800755c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007560:	2301      	movs	r3, #1
 8007562:	e09c      	b.n	800769e <_printf_i+0x1e6>
 8007564:	6833      	ldr	r3, [r6, #0]
 8007566:	6820      	ldr	r0, [r4, #0]
 8007568:	1d19      	adds	r1, r3, #4
 800756a:	6031      	str	r1, [r6, #0]
 800756c:	0606      	lsls	r6, r0, #24
 800756e:	d501      	bpl.n	8007574 <_printf_i+0xbc>
 8007570:	681d      	ldr	r5, [r3, #0]
 8007572:	e003      	b.n	800757c <_printf_i+0xc4>
 8007574:	0645      	lsls	r5, r0, #25
 8007576:	d5fb      	bpl.n	8007570 <_printf_i+0xb8>
 8007578:	f9b3 5000 	ldrsh.w	r5, [r3]
 800757c:	2d00      	cmp	r5, #0
 800757e:	da03      	bge.n	8007588 <_printf_i+0xd0>
 8007580:	232d      	movs	r3, #45	@ 0x2d
 8007582:	426d      	negs	r5, r5
 8007584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007588:	4858      	ldr	r0, [pc, #352]	@ (80076ec <_printf_i+0x234>)
 800758a:	230a      	movs	r3, #10
 800758c:	e011      	b.n	80075b2 <_printf_i+0xfa>
 800758e:	6821      	ldr	r1, [r4, #0]
 8007590:	6833      	ldr	r3, [r6, #0]
 8007592:	0608      	lsls	r0, r1, #24
 8007594:	f853 5b04 	ldr.w	r5, [r3], #4
 8007598:	d402      	bmi.n	80075a0 <_printf_i+0xe8>
 800759a:	0649      	lsls	r1, r1, #25
 800759c:	bf48      	it	mi
 800759e:	b2ad      	uxthmi	r5, r5
 80075a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80075a2:	4852      	ldr	r0, [pc, #328]	@ (80076ec <_printf_i+0x234>)
 80075a4:	6033      	str	r3, [r6, #0]
 80075a6:	bf14      	ite	ne
 80075a8:	230a      	movne	r3, #10
 80075aa:	2308      	moveq	r3, #8
 80075ac:	2100      	movs	r1, #0
 80075ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075b2:	6866      	ldr	r6, [r4, #4]
 80075b4:	60a6      	str	r6, [r4, #8]
 80075b6:	2e00      	cmp	r6, #0
 80075b8:	db05      	blt.n	80075c6 <_printf_i+0x10e>
 80075ba:	6821      	ldr	r1, [r4, #0]
 80075bc:	432e      	orrs	r6, r5
 80075be:	f021 0104 	bic.w	r1, r1, #4
 80075c2:	6021      	str	r1, [r4, #0]
 80075c4:	d04b      	beq.n	800765e <_printf_i+0x1a6>
 80075c6:	4616      	mov	r6, r2
 80075c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80075cc:	fb03 5711 	mls	r7, r3, r1, r5
 80075d0:	5dc7      	ldrb	r7, [r0, r7]
 80075d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075d6:	462f      	mov	r7, r5
 80075d8:	42bb      	cmp	r3, r7
 80075da:	460d      	mov	r5, r1
 80075dc:	d9f4      	bls.n	80075c8 <_printf_i+0x110>
 80075de:	2b08      	cmp	r3, #8
 80075e0:	d10b      	bne.n	80075fa <_printf_i+0x142>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	07df      	lsls	r7, r3, #31
 80075e6:	d508      	bpl.n	80075fa <_printf_i+0x142>
 80075e8:	6923      	ldr	r3, [r4, #16]
 80075ea:	6861      	ldr	r1, [r4, #4]
 80075ec:	4299      	cmp	r1, r3
 80075ee:	bfde      	ittt	le
 80075f0:	2330      	movle	r3, #48	@ 0x30
 80075f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075fa:	1b92      	subs	r2, r2, r6
 80075fc:	6122      	str	r2, [r4, #16]
 80075fe:	f8cd a000 	str.w	sl, [sp]
 8007602:	464b      	mov	r3, r9
 8007604:	aa03      	add	r2, sp, #12
 8007606:	4621      	mov	r1, r4
 8007608:	4640      	mov	r0, r8
 800760a:	f7ff fee7 	bl	80073dc <_printf_common>
 800760e:	3001      	adds	r0, #1
 8007610:	d14a      	bne.n	80076a8 <_printf_i+0x1f0>
 8007612:	f04f 30ff 	mov.w	r0, #4294967295
 8007616:	b004      	add	sp, #16
 8007618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	f043 0320 	orr.w	r3, r3, #32
 8007622:	6023      	str	r3, [r4, #0]
 8007624:	4832      	ldr	r0, [pc, #200]	@ (80076f0 <_printf_i+0x238>)
 8007626:	2778      	movs	r7, #120	@ 0x78
 8007628:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	6831      	ldr	r1, [r6, #0]
 8007630:	061f      	lsls	r7, r3, #24
 8007632:	f851 5b04 	ldr.w	r5, [r1], #4
 8007636:	d402      	bmi.n	800763e <_printf_i+0x186>
 8007638:	065f      	lsls	r7, r3, #25
 800763a:	bf48      	it	mi
 800763c:	b2ad      	uxthmi	r5, r5
 800763e:	6031      	str	r1, [r6, #0]
 8007640:	07d9      	lsls	r1, r3, #31
 8007642:	bf44      	itt	mi
 8007644:	f043 0320 	orrmi.w	r3, r3, #32
 8007648:	6023      	strmi	r3, [r4, #0]
 800764a:	b11d      	cbz	r5, 8007654 <_printf_i+0x19c>
 800764c:	2310      	movs	r3, #16
 800764e:	e7ad      	b.n	80075ac <_printf_i+0xf4>
 8007650:	4826      	ldr	r0, [pc, #152]	@ (80076ec <_printf_i+0x234>)
 8007652:	e7e9      	b.n	8007628 <_printf_i+0x170>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	f023 0320 	bic.w	r3, r3, #32
 800765a:	6023      	str	r3, [r4, #0]
 800765c:	e7f6      	b.n	800764c <_printf_i+0x194>
 800765e:	4616      	mov	r6, r2
 8007660:	e7bd      	b.n	80075de <_printf_i+0x126>
 8007662:	6833      	ldr	r3, [r6, #0]
 8007664:	6825      	ldr	r5, [r4, #0]
 8007666:	6961      	ldr	r1, [r4, #20]
 8007668:	1d18      	adds	r0, r3, #4
 800766a:	6030      	str	r0, [r6, #0]
 800766c:	062e      	lsls	r6, r5, #24
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	d501      	bpl.n	8007676 <_printf_i+0x1be>
 8007672:	6019      	str	r1, [r3, #0]
 8007674:	e002      	b.n	800767c <_printf_i+0x1c4>
 8007676:	0668      	lsls	r0, r5, #25
 8007678:	d5fb      	bpl.n	8007672 <_printf_i+0x1ba>
 800767a:	8019      	strh	r1, [r3, #0]
 800767c:	2300      	movs	r3, #0
 800767e:	6123      	str	r3, [r4, #16]
 8007680:	4616      	mov	r6, r2
 8007682:	e7bc      	b.n	80075fe <_printf_i+0x146>
 8007684:	6833      	ldr	r3, [r6, #0]
 8007686:	1d1a      	adds	r2, r3, #4
 8007688:	6032      	str	r2, [r6, #0]
 800768a:	681e      	ldr	r6, [r3, #0]
 800768c:	6862      	ldr	r2, [r4, #4]
 800768e:	2100      	movs	r1, #0
 8007690:	4630      	mov	r0, r6
 8007692:	f7f8 fdad 	bl	80001f0 <memchr>
 8007696:	b108      	cbz	r0, 800769c <_printf_i+0x1e4>
 8007698:	1b80      	subs	r0, r0, r6
 800769a:	6060      	str	r0, [r4, #4]
 800769c:	6863      	ldr	r3, [r4, #4]
 800769e:	6123      	str	r3, [r4, #16]
 80076a0:	2300      	movs	r3, #0
 80076a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076a6:	e7aa      	b.n	80075fe <_printf_i+0x146>
 80076a8:	6923      	ldr	r3, [r4, #16]
 80076aa:	4632      	mov	r2, r6
 80076ac:	4649      	mov	r1, r9
 80076ae:	4640      	mov	r0, r8
 80076b0:	47d0      	blx	sl
 80076b2:	3001      	adds	r0, #1
 80076b4:	d0ad      	beq.n	8007612 <_printf_i+0x15a>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	079b      	lsls	r3, r3, #30
 80076ba:	d413      	bmi.n	80076e4 <_printf_i+0x22c>
 80076bc:	68e0      	ldr	r0, [r4, #12]
 80076be:	9b03      	ldr	r3, [sp, #12]
 80076c0:	4298      	cmp	r0, r3
 80076c2:	bfb8      	it	lt
 80076c4:	4618      	movlt	r0, r3
 80076c6:	e7a6      	b.n	8007616 <_printf_i+0x15e>
 80076c8:	2301      	movs	r3, #1
 80076ca:	4632      	mov	r2, r6
 80076cc:	4649      	mov	r1, r9
 80076ce:	4640      	mov	r0, r8
 80076d0:	47d0      	blx	sl
 80076d2:	3001      	adds	r0, #1
 80076d4:	d09d      	beq.n	8007612 <_printf_i+0x15a>
 80076d6:	3501      	adds	r5, #1
 80076d8:	68e3      	ldr	r3, [r4, #12]
 80076da:	9903      	ldr	r1, [sp, #12]
 80076dc:	1a5b      	subs	r3, r3, r1
 80076de:	42ab      	cmp	r3, r5
 80076e0:	dcf2      	bgt.n	80076c8 <_printf_i+0x210>
 80076e2:	e7eb      	b.n	80076bc <_printf_i+0x204>
 80076e4:	2500      	movs	r5, #0
 80076e6:	f104 0619 	add.w	r6, r4, #25
 80076ea:	e7f5      	b.n	80076d8 <_printf_i+0x220>
 80076ec:	08007a91 	.word	0x08007a91
 80076f0:	08007aa2 	.word	0x08007aa2

080076f4 <__swhatbuf_r>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	460c      	mov	r4, r1
 80076f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fc:	2900      	cmp	r1, #0
 80076fe:	b096      	sub	sp, #88	@ 0x58
 8007700:	4615      	mov	r5, r2
 8007702:	461e      	mov	r6, r3
 8007704:	da0d      	bge.n	8007722 <__swhatbuf_r+0x2e>
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800770c:	f04f 0100 	mov.w	r1, #0
 8007710:	bf14      	ite	ne
 8007712:	2340      	movne	r3, #64	@ 0x40
 8007714:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007718:	2000      	movs	r0, #0
 800771a:	6031      	str	r1, [r6, #0]
 800771c:	602b      	str	r3, [r5, #0]
 800771e:	b016      	add	sp, #88	@ 0x58
 8007720:	bd70      	pop	{r4, r5, r6, pc}
 8007722:	466a      	mov	r2, sp
 8007724:	f000 f848 	bl	80077b8 <_fstat_r>
 8007728:	2800      	cmp	r0, #0
 800772a:	dbec      	blt.n	8007706 <__swhatbuf_r+0x12>
 800772c:	9901      	ldr	r1, [sp, #4]
 800772e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007732:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007736:	4259      	negs	r1, r3
 8007738:	4159      	adcs	r1, r3
 800773a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800773e:	e7eb      	b.n	8007718 <__swhatbuf_r+0x24>

08007740 <__smakebuf_r>:
 8007740:	898b      	ldrh	r3, [r1, #12]
 8007742:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007744:	079d      	lsls	r5, r3, #30
 8007746:	4606      	mov	r6, r0
 8007748:	460c      	mov	r4, r1
 800774a:	d507      	bpl.n	800775c <__smakebuf_r+0x1c>
 800774c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	6123      	str	r3, [r4, #16]
 8007754:	2301      	movs	r3, #1
 8007756:	6163      	str	r3, [r4, #20]
 8007758:	b003      	add	sp, #12
 800775a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800775c:	ab01      	add	r3, sp, #4
 800775e:	466a      	mov	r2, sp
 8007760:	f7ff ffc8 	bl	80076f4 <__swhatbuf_r>
 8007764:	9f00      	ldr	r7, [sp, #0]
 8007766:	4605      	mov	r5, r0
 8007768:	4639      	mov	r1, r7
 800776a:	4630      	mov	r0, r6
 800776c:	f7ff fc68 	bl	8007040 <_malloc_r>
 8007770:	b948      	cbnz	r0, 8007786 <__smakebuf_r+0x46>
 8007772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007776:	059a      	lsls	r2, r3, #22
 8007778:	d4ee      	bmi.n	8007758 <__smakebuf_r+0x18>
 800777a:	f023 0303 	bic.w	r3, r3, #3
 800777e:	f043 0302 	orr.w	r3, r3, #2
 8007782:	81a3      	strh	r3, [r4, #12]
 8007784:	e7e2      	b.n	800774c <__smakebuf_r+0xc>
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	6020      	str	r0, [r4, #0]
 800778a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800778e:	81a3      	strh	r3, [r4, #12]
 8007790:	9b01      	ldr	r3, [sp, #4]
 8007792:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007796:	b15b      	cbz	r3, 80077b0 <__smakebuf_r+0x70>
 8007798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800779c:	4630      	mov	r0, r6
 800779e:	f000 f81d 	bl	80077dc <_isatty_r>
 80077a2:	b128      	cbz	r0, 80077b0 <__smakebuf_r+0x70>
 80077a4:	89a3      	ldrh	r3, [r4, #12]
 80077a6:	f023 0303 	bic.w	r3, r3, #3
 80077aa:	f043 0301 	orr.w	r3, r3, #1
 80077ae:	81a3      	strh	r3, [r4, #12]
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	431d      	orrs	r5, r3
 80077b4:	81a5      	strh	r5, [r4, #12]
 80077b6:	e7cf      	b.n	8007758 <__smakebuf_r+0x18>

080077b8 <_fstat_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	4d07      	ldr	r5, [pc, #28]	@ (80077d8 <_fstat_r+0x20>)
 80077bc:	2300      	movs	r3, #0
 80077be:	4604      	mov	r4, r0
 80077c0:	4608      	mov	r0, r1
 80077c2:	4611      	mov	r1, r2
 80077c4:	602b      	str	r3, [r5, #0]
 80077c6:	f7f9 fa06 	bl	8000bd6 <_fstat>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	d102      	bne.n	80077d4 <_fstat_r+0x1c>
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	b103      	cbz	r3, 80077d4 <_fstat_r+0x1c>
 80077d2:	6023      	str	r3, [r4, #0]
 80077d4:	bd38      	pop	{r3, r4, r5, pc}
 80077d6:	bf00      	nop
 80077d8:	20000308 	.word	0x20000308

080077dc <_isatty_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4d06      	ldr	r5, [pc, #24]	@ (80077f8 <_isatty_r+0x1c>)
 80077e0:	2300      	movs	r3, #0
 80077e2:	4604      	mov	r4, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	602b      	str	r3, [r5, #0]
 80077e8:	f7f9 fa05 	bl	8000bf6 <_isatty>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_isatty_r+0x1a>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_isatty_r+0x1a>
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	20000308 	.word	0x20000308

080077fc <_sbrk_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4d06      	ldr	r5, [pc, #24]	@ (8007818 <_sbrk_r+0x1c>)
 8007800:	2300      	movs	r3, #0
 8007802:	4604      	mov	r4, r0
 8007804:	4608      	mov	r0, r1
 8007806:	602b      	str	r3, [r5, #0]
 8007808:	f7f9 fa0e 	bl	8000c28 <_sbrk>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_sbrk_r+0x1a>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_sbrk_r+0x1a>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	20000308 	.word	0x20000308

0800781c <_init>:
 800781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781e:	bf00      	nop
 8007820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007822:	bc08      	pop	{r3}
 8007824:	469e      	mov	lr, r3
 8007826:	4770      	bx	lr

08007828 <_fini>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	bf00      	nop
 800782c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782e:	bc08      	pop	{r3}
 8007830:	469e      	mov	lr, r3
 8007832:	4770      	bx	lr
